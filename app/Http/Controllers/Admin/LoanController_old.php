<?php
namespace App\Http\Controllers\Admin;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Input;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Yajra\DataTables\DataTables;
use Validator;
use App\Models\User;
use App\Models\Loans;
use App\Models\Memberloans;
use App\Models\MemberTransaction;
use App\Models\BranchDaybook;
use App\Models\AllTransaction;
use App\Models\Transcation;
use App\Models\Profits;
use App\Models\Member;
use App\Models\Loanapplicantdetails;
use App\Models\Loanscoapplicantdetails;
use App\Models\Loansguarantordetails;
use App\Models\Loanotherdocs;
use App\Models\Loaninvestmentmembers;
use App\Models\Files;
use App\Models\SavingAccount;
use App\Models\SavingAccountTranscation;
use App\Models\TransactionReferences;
use App\Models\Grouploans;
use App\Models\LoanDayBooks;
use App\Models\SamraddhCheque;
use App\Models\AccountHeads;
use App\Models\ReceivedChequePayment;
use App\Models\ReceivedCheque;
use App\Models\SamraddhBank;
use App\Models\Daybook;
use App\Models\SamraddhChequeIssue;
use App\Models\SamraddhBankClosing;
use App\Models\AssociateCommission;
use App\Models\SamraddhBankAccount;
use App\Http\Traits\getRecordUsingDayBookRefId;

use App\Models\SamraddhBankDaybook;
use App\Models\BranchCash;
use App\Models\AllHeadTransaction;
use App\Models\AccountBranchTransfer;
use Carbon\Carbon;
use App\Services\Sms;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Response;
use URL;
use DB;
use Session;
use DateTime;
use App\Http\Traits\EmiDatesTraits;
use App\Models\LoanEmisNew;
use App\Models\CommissionEntryLoan;
use App\Http\Traits\Oustanding_amount_trait;
use App\Models\CollectorAccount;
class LoanController extends Controller
{
    use EmiDatesTraits,Oustanding_amount_trait,getRecordUsingDayBookRefId;
    /**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }
    /**
     * Display a listing of the loans.
     *
     * @return \Illuminate\Http\Response
     */
    public function Loans()
    {
        if (check_my_permission(Auth::user()->id, "25") != "1")
        {
            return redirect()
                ->route('admin.dashboard');
        }
        $data['title'] = 'Loans';
        return view('templates.admin.loan.loans', $data);
    }
    /**
     * Display the specified resource.
     *
     * @param  \App\Reservation  $reservation
     * @return \Illuminate\Http\Response
     */
    public function loanListing(Request $request)
    {
        if ($request->ajax())
        {
            $data = Loans::all('id','min_amount','max_amount','created_at','updated_at','name','code');
            return Datatables::of($data)
->addIndexColumn()
->addColumn('min_amount', function ($row)
            {
                $min_deposit = number_format($row->min_amount);
                return $min_deposit;
            })
->rawColumns(['min_amount'])
->addColumn('max_amount', function ($row)
            {
                $max_amount = number_format($row->max_amount);
                return $max_amount;
            })
->rawColumns(['max_amount'])
->addColumn('created_at', function ($row)
            {
                $created_at = date("Y/m/d h:i:A", strtotime($row->created_at));
                return $created_at;
            })
->rawColumns(['created_at'])
->addColumn('updated_at', function ($row)
            {
                $updated_at = date("Y/m/d h:i:A", strtotime($row->updated_at));
                return $updated_at;
            })
->rawColumns(['updated_at'])
->addColumn('action', function ($row)
            {
                $url = URL::to("admin/loan/" . $row->id . "");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9"></i></a><div class="dropdown-menu dropdown-menu-right"><a class="dropdown-item" href="' . $url . '"><i class="icon-pencil7 mr-2"></i>Edit</a></div></div></div>';
                return $btn;
            })
->rawColumns(['action'])
                ->make(true);
        }
    }
    /**
     * Show the form for creating a new loan.
     *
     * @return \Illuminate\Http\Response
     */
    public function Create()
    {
        $data['title'] = 'Create loan';
        return view('templates.admin.loan.create', $data);
    }
    /**
     * Store a newly created loan in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function Store(Request $request)
    {
        $rules = [
        'name' => 'required',
        'code' => 'required',
        'min_amount' => 'required',
        'max_amount' => 'required',
        'loan_type' => 'required',
        'loan_category' => 'required',
        'tenure' => 'required',
        'emi_option' => 'required',
        'roi' => 'required',
        'roi_type' => 'required',
        'emi_10000' => 'required',
        'effective_from' => 'required'
        ];
        $customMessages = [
        'required' => 'The :attribute field is required.'
        ];
        $this->validate($request, $rules, $customMessages);
        $data['name'] = $request->name;
        $data['slug'] = $request->slug;
        $data['code'] = $request->code;
        $data['min_amount'] = $request->min_amount;
        $data['max_amount'] = $request->max_amount;
        $data['loan_type'] = $request->loan_type;
        $data['loan_category'] = $request->loan_category;
        $data['tenure'] = $request->tenure;
        $data['roi'] = $request->roi;
        $data['roi_type'] = $request->roi_type;
        $data['ROI'] = $request->roi;
        $data['EMI 10000'] = $request->emi_10000;
        $data['effective_from'] = $request->effective_from;
        $data['created_at'] = $request->created_at;
        $res = Loans::create($data);
        if ($res)
        {
            return back()->with('success', 'Saved Successfully!');
        }
        else
        {
            return back()
                ->with('alert', 'Problem With Creating New Plan');
        }
    }
    /**
     * Display created loan by id.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function Edit($id)
    {
        $data['loan'] = Loans::findOrFail($id);
        $data['title'] = $data['loan']->name;
        return view('templates.admin.loan.edit', $data);
    }
    /**
     * Update the specified loan.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function Update(Request $request)
    {
        $rules = [
        'min_amount' => 'required',
        'max_amount' => 'required',
        ];
        $customMessages = [
        'required' => 'The :attribute field is required.'
        ];
        $this->validate($request, $rules, $customMessages);
        $data = Loans::findOrFail($request->id);
        $data->min_amount = $request->min_amount;
        $data->max_amount = $request->max_amount;
        if (empty($request->status))
        {
            $data->status = 0;
        }
        else
        {
            $data->status = $request->status;
        }
        $res = $data->save();
        if ($res)
        {
            return back()->with('success', 'Update was Successful!');
        }
        else
        {
            return back()
                ->with('alert', 'An error occured');
        }
    }

    // Delete the data (Gaurav)
    public function delete(Request $request)
    {
        //
    }
    
    /**
     * Loan requests listing view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function loanRequest(Request $request)
    {
        if (check_my_permission(Auth::user()->id, "26") != "1")
        {
            return redirect()
                ->route('admin.dashboard');
        }
        $data['title'] = 'Loan Registration Details';
        return view('templates.admin.loan.loan-requests', $data);
    }
    /**
     * Show loan requests listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function loanRequestAjax(Request $request)
    {
        if ($request->ajax())
        {
            //$BranchId = Auth::user()->id;
            // $data = Memberloans::with('loan')->where('status',0)->orderBy('id', 'DESC')->get();
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $applicationDate=date("Y-m-d ", strtotime(convertDate($arrFormData['create_application_date'])));
            $data = Memberloans::select('id','applicant_id','account_number','approve_date','emi_option','emi_period','deposite_amount','amount','file_charges','status','loan_type','associate_member_id','branch_id','created_at','approved_date','rejection_description','loan_type')
            ->with(['loan' => function($q){ $q->select('id','name','loan_type','loan_category'); }])
                    ->with(['loanMember' => function($q){ $q->select('id','member_id','first_name','last_name'); }])
                    ->with(['loanMemberAssociate' => function($q){ $q->select('id','associate_no','first_name','last_name'); }])
                    ->with(['groupleaderMemberIDCustom' => function($q){ $q->select('id','member_id'); }])
                    ->with(['loanBranch' => function ($query) { $query->select('id', 'name', 'branch_code', 'sector', 'regan', 'zone'); } ])
                    ->with(['loanMemberBankDetails' => function ($query) { $query->select('id', 'member_id', 'bank_name', 'account_no', 'ifsc_code'); }
                    ])->whereIn('status',[0,1,3,5,6,7,4])
                ->where('loan_type', '!=', 3)
                ->where('is_deleted', 0);
            if (Auth::user()->branch_id > 0)
            {
                $id = Auth::user()->branch_id;
                $data = $data->where('branch_id', '=', $id);
            }
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['date_from'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if ($arrFormData['date_to'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(created_at)') , [$startDate, $endDate]);
                }
                if ($arrFormData['plan'] != '')
                {
                    $planId = $arrFormData['plan'];
                    $data = $data->where('loan_type', '=', $planId);
                }
                if (isset($arrFormData['branch_id']) && $arrFormData['branch_id'] != '')
                {
                    $branch_id = $arrFormData['branch_id'];
                    $data = $data->where('branch_id', '=', $branch_id);
                }
                if ($arrFormData['application_number'] != '')
                {
                    $application_number = $arrFormData['application_number'];
                    $data = $data->where('account_number', '=', $application_number);
                }
                if ($arrFormData['member_name'] != '')
                {
                    $name = $arrFormData['member_name'];
                    $data = $data->whereHas('loanMember', function ($query) use ($name)
                    {
                        $query->where('members.first_name', 'LIKE', '%' . $name . '%')->orWhere('members.last_name', 'LIKE', '%' . $name . '%')->orWhere(DB::raw('concat(members.first_name," ",members.last_name)') , 'LIKE', "%$name%");
                    });
                }
                if ($arrFormData['member_id'] != '')
                {
                    $meid = $arrFormData['member_id'];
                    $data = $data->whereHas('loanMember', function ($query) use ($meid)
                    {
                        $query->where('members.member_id', 'LIKE', '%' . $meid . '%');
                    });
                }
                if ($arrFormData['associate_code'] != '')
                {
                    $associateCode = $arrFormData['associate_code'];
                    $data = $data->whereHas('loanMemberAssociate', function ($query) use ($associateCode)
                    {
                        $query->where('members.associate_no', 'LIKE', '%' . $associateCode . '%');
                    });
                }
                if ($arrFormData['status'] != '')
                {
                    $status = $arrFormData['status'];
                    $data = $data->where('status', '=', $status);
                }
            }
            $totalCount = $data->orderby('id', 'DESC')->count('id');
            $data = $data->orderby('id', 'DESC')->offset($_POST['start'])->limit($_POST['length']);
            $data = $data->orderby('id', 'DESC')->get();
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $row)
            {
                $sno++;
                $val['DT_RowIndex'] = $sno;
                if ($row->group_activity == 'Group loan application')
                {
                    if (isset($row->groupleader_member_id))
                    {
                        $applicant_id = $row['groupleaderMemberIDCustom']->member_id; //Member::find($row->groupleader_member_id)->member_id;
                    }
                    else
                    {
                        $applicant_id = '';
                    }
                }
                else
                {
                    if ($row->applicant_id)
                    {
                        $applicant_id = $row['loanMember']->member_id; //Member::find($row->applicant_id)->member_id;
                    }
                    else
                    {
                        $applicant_id = '';
                    }
                }
                $val['applicant_id'] = $applicant_id;
                $val['application_number'] = $row->account_number;
                $val['branch'] = $row['loanBranch']->name;
                $val['branch_code'] = $row['loanBranch']->branch_code;
                $val['sector'] = $row['loanBranch']->sector;
                $val['region'] = $row['loanBranch']->regan;
                $val['zone'] = $row['loanBranch']->zone;
                // if (isset($row['loanMember']->member_id))
                // {
                //     $member_id = $row['loanMember']->member_id;
                // }
                // else
                // {
                //     $member_id = '';
                // }
                // $val['member_id'] = $member_id;
                if (isset($row['loanMember']->member_id))
                    {
                        $member_id = $row['loanMember']->member_id;
                        $mid=$row['loanMember']->id;
                    }
                    else
                    {
                        $member_id = '';
                        $mid=0;
                    }
                    $val['member_id'] = $member_id;
                    $val['totaldepositinv'] ='N/A';
                    if($member_id>0)
                    {
                        $val['totaldepositinv'] = getAllDeposit($mid,$applicationDate);
                    }
                if (isset($row['loanMember']->member_id))
                {
                    $member_name = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                }
                else
                {
                    $member_name = '';
                }
                $val['member_name'] = $member_name;
                if ($row->approve_date)
                {
                    if ($row->emi_option == 1)
                    {
                        $last_recovery_date = date('d/m/Y', strtotime("+" . $row->emi_period . " months", strtotime($row->approve_date)));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                }
                else
                {
                    $last_recovery_date = 'N/A';
                }
                $val['last_recovery_date'] = $last_recovery_date;
                if(isset($row['loanMemberAssociate']->associate_no))
                {
                    $val['associate_code'] = $row['loanMemberAssociate']->associate_no;
                }
                else{
                    $val['associate_code'] = 'N/A';
                }
               //getMemberData($row->associate_member_id)->associate_no;
                $member = $row['loanMemberAssociate']; //Member::where('id', $row->associate_member_id)->first(['id', 'first_name', 'last_name']);
                $val['associate_name'] =(isset( $member->first_name) ? $member->first_name . ' ' . $member->last_name : 'N/A') ;
                $val['loan'] = $row['loan']->name;
                $val['amount'] = $row->deposite_amount . ' <i class="fa fa-inr"></i>';
                $val['loan_amount'] = $row->amount . ' <i class="fas fa-rupee-sign"></i>';
                $val['file_charge'] = $row->file_charges . ' <i class="fas fa-rupee-sign"></i>';
                $applicationBankDetail=loanApplicatBankDetail($row->id);
                if(isset($applicationBankDetail->bank_name))
                {
                    $bankName = $applicationBankDetail->bank_name;
                }
                else{
                    $bankName ='N/A';
                }
                $val['bank_name'] = $bankName;
                if(isset($applicationBankDetail->bank_account_number))
                {
                    $bankAccount = $applicationBankDetail->bank_account_number;
                }
                else{
                    $bankAccount ='N/A';
                }
                $val['bank_account_number'] = $bankAccount;
                if(isset($applicationBankDetail->ifsc_code))
                {
                    $ifscCode = $applicationBankDetail->ifsc_code;
                }
                else{
                    $ifscCode ='N/A';
                }
                $val['ifsc_code'] = $ifscCode;
                if ($row->status == 0)
                {
                    $status = 'Pending';
                }
                else if ($row->status == 1)
                {
                    $status = 'Approved';
                }
                else if ($row->status == 2)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 3)
                {
                    $status = 'Clear';
                }
                else if ($row->status == 4)
                {
                    $status = 'Due';
                }else if ($row->status == 5)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 6)
                {
                    $status = 'Hold';
                }
                else if ($row->status == 7)
                {
                    $status = 'Approved but hold';
                }
                else{
                    $status = 'N/A';
                }
                $val['status'] = $status;
                if ($row['approved_date'])
                {
                    $approve_date = date("d/m/Y", strtotime($row['approved_date']));
                }
                else
                {
                    $approve_date = 'N/A';
                }
                $val['reason'] =isset($row->rejection_description) ? $row->rejection_description : 'N/A' ;
                $val['approve_date'] = $approve_date;
                $val['created_at'] = date("d/m/Y", strtotime($row['created_at']));
                $vurl = URL::to("admin/loan/view/" . $row->id . "/" . $row->loan_type . "");
                $eurl = URL::to("admin/loan/edit/" . $row->id . "");
                $aurl = URL::to("admin/loan/approve/" . $row->id . "");
                $rurl = URL::to("admin/loan/loan-request-reject/" . $row->id . "/" . $row->loan_type . "");
                $taurl = URL::to("admin/loan/transfer/" . $row->id . "");
                $purl = URL::to("admin/loan/print/" . $row->id . "/" . $row->loan_type . "");
                $turl = URL::to("admin/loan/emi-transactions/" . $row->id . "/" . $row->loan_type . "");
                $urlCom = URL::to("admin/loan/commission/" . $row->id . "");
                $pdf = URL::to("admin/loan/download-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
                $print = URL::to("admin/loan/print-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
                $loanLogs = URL::to("admin/loan/logs/" . $row->id . "/" . $row->loan_type . "");
                $changestatus = 0;
                $appstatus = 1;
                $dateNew = encrypt($applicationDate);                    
                $pendurl =URL::to("admin/loan/pending/" . $row->id . "/" . $row->loan_type ."/" . $changestatus ."/" . $dateNew ."");
                $apphurl =URL::to("admin/loan/pending/" . $row->id . "/" . $row->loan_type ."/" . $appstatus ."/" . $dateNew ."");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9 mr-2"></i></a><div class="dropdown-menu dropdown-menu-right">';
                if ($row->status == 0)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $aurl . '"><i class="fas fa-thumbs-up mr-2"></i>Approve</a>';
                        // $btn .= '<a class="dropdown-item reject-loan" href="' . $rurl . '" data-toggle="modal" data-target="#loan-rejected" loan-id="' . $row->id . '"><i class="fas fa-thumbs-down mr-2"></i>Delete</a>';
                        $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Rejection" demandId = "'.$row->id.'" status = "5" loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="fas fa-thumbs-down" ></i>Reject </a>';
                        $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Hold" demandId = "'.$row->id.'" status = "6"  loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="icon-paperplane" ></i>Hold </a>';
                        $btn .= '<a class="dropdown-item" href="' . $eurl . '"><i class="icon-pencil7 mr-2"></i>Edit</a>';
                    }
                }
                elseif ($row->status == 1 && ($row->amount != $row->deposite_amount))
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $taurl . '"><i class="fa fa-exchange mr-2"></i>Transfer Amount</a>';
                    }
                    $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Hold" demandId = "'.$row->id.'" status = "7"  loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="icon-paperplane" ></i>Hold </a>';
                }
                elseif ($row->status == 6  || $row->status == 7)
                    {
                        $btn .= '<a class="dropdown-item" href="' . $apphurl . '"><i class="fas fa-thumbs-up mr-2"></i>Approve</a>';
                        $btn .= '<a class="dropdown-item" href="' . $pendurl . '"><i class="fas fa-thumbs-up mr-2"></i>Pending</a>';
                    }
                $btn .= '<a class="dropdown-item" href="' . $vurl . '"><i class="fas fa-eye text-default mr-2"></i>View</a>';
                if (Auth::user()->id != "13")
                {
                    $btn .= '<a class="dropdown-item" href="' . $purl . '" target="_blank"><i class="fa fa-print mr-2" aria-hidden="true"></i>Print</a>';
                }
                $btn .= '<a class="dropdown-item" href="' . $turl . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>Transactions</a>';
                $btn .= '<a class="dropdown-item" href="' . $urlCom . '"><i class="fas fa-percent text-default mr-2"></i>Loan Commission</a>';
                if ($row->status == 3)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $pdf . '"><i class="fas fa-download text-default mr-2"></i>Download No Dues</a>';
                        $btn .= '<a class="dropdown-item" href="' . $print . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>print No Dues</a>';
                    }
                }
                $btn .= '<a class="dropdown-item" href="' . $loanLogs . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>Logs</a>';
                $btn .= '</div></div></div>';
                $val['action'] = $btn;
                $rowReturn[] = $val;
            }
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Group Loan requests listing view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function groupLoanRequest(Request $request)
    {
        if (check_my_permission(Auth::user()->id, "27") != "1")
        {
            return redirect()
                ->route('admin.dashboard');
        }
        $data['title'] = 'Group Loan Registration Details';
        return view('templates.admin.loan.group-loan-requests', $data);
    }
    /**
     * Show group loan requests listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function groupLoanRequestAjax(Request $request)
    {
        if ($request->ajax() && check_my_permission(Auth::user()->id, "27") == "1")
        {
            //$BranchId = Auth::user()->id;
            // $data = Memberloans::with('loan')->where('status',0)->orderBy('id', 'DESC')->get();
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $applicationDate=date("Y-m-d ", strtotime(convertDate($arrFormData['create_application_date'])));
            $data = Grouploans::select('id','group_activity','groupleader_member_id','applicant_id','account_number','group_loan_common_id','approve_date','emi_option','emi_period','deposite_amount','amount','file_charges','status','member_loan_id','member_id','associate_member_id','branch_id','created_at','approved_date','rejection_description','loan_type')
            ->with(['loan' => function($q){ $q->select('id','name','loan_type','loan_category'); }])
            ->with(['loanMember'=>function($q){
                $q->select('id', 'member_id', 'first_name', 'last_name');
             }])->with(['loanMemberAssociate'=>function($q){
                 $q->select('id', 'member_id', 'first_name', 'last_name','associate_no');
              }])->with(['groupleaderMemberIDCustom'=>function($q){
                $q->select('id', 'member_id', 'first_name', 'last_name','associate_no');
             }])->with(['MemberApplicantCustom'=>function($q){
                $q->select('id', 'member_id', 'first_name', 'last_name','associate_no');
             }])->with(['gloanBranch' => function ($query) { $query->select('id', 'name', 'branch_code', 'sector', 'regan', 'zone'); },'loanMemberBankDetails2'=>function($q){
                $q->select('id','member_id','bank_name','account_no','ifsc_code');
             }  ])->whereIn('status',[0,1,3,5,6,7,4]);			 
						
            if (Auth::user()->branch_id > 0)
            {
                $id = Auth::user()->branch_id;
                $data = $data->where('branch_id', '=', $id);
            }
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['date_from'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if ($arrFormData['date_to'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(created_at)') , [$startDate, $endDate]);
                }
                if (isset($arrFormData['branch_id']) && $arrFormData['branch_id'] != '')
                {
                    $branch_id = $arrFormData['branch_id'];
                    $data = $data->where('branch_id', '=', $branch_id);
                }
                if ($arrFormData['application_number'] != '')
                {
                    $application_number = $arrFormData['application_number'];
                    $data = $data->where('account_number', '=', $application_number);
                }
                if ($arrFormData['member_name'] != '')
                {
                    $name = $arrFormData['member_name'];
                    $data = $data->whereHas('loanMember', function ($query) use ($name)
                    {
                        $query->select('id','member_id','first_name','last_name')->where('members.first_name', 'LIKE', '%' . $name . '%')->orWhere('members.last_name', 'LIKE', '%' . $name . '%')->orWhere(DB::raw('concat(members.first_name," ",members.last_name)') , 'LIKE', "%$name%");
                    });
                }
                if ($arrFormData['member_id'] != '')
                {
                    $meid = $arrFormData['member_id'];
                    $data = $data->whereHas('loanMember', function ($query) use ($meid)
                    {
                        $query->select('id','member_id','first_name','last_name')->where('members.member_id', 'LIKE', '%' . $meid . '%');
                    });
                }
                if ($arrFormData['associate_code'] != '')
                {
                    $associateCode = $arrFormData['associate_code'];
                    $data = $data->whereHas('loanMemberAssociate', function ($query) use ($associateCode)
                    {
                        $query->select('id','associate_no','first_name','last_name')->where('members.associate_no', 'LIKE', '%' . $associateCode . '%');
                    });
                }
                if ($arrFormData['status'] != '')
                {
                    $status = $arrFormData['status'];
                    $data = $data->where('status', '=', $status);
                }
				if ($arrFormData['group_loan_common_id'] != '')
				{
					$group_loan_id = $arrFormData['group_loan_common_id'];					
					$data = $data->where('group_loan_common_id', $group_loan_id);
				}
            }
            $totalCount = $data->count('id');
            $data = $data->orderby('id', 'DESC')->offset($_POST['start'])->limit($_POST['length'])->get();
            //$count = count($data);
            // $totalCount = Grouploans::with('loanMember', 'loanMemberAssociate')->with(['gloanBranch' => function ($query){
            //     $query->select('id', 'name', 'branch_code', 'sector', 'regan', 'zone'); } ])->count("id");
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $row)
            {
                //dd($row);
                $sno++;
                $val['DT_RowIndex'] = $sno;
                if ($row->group_activity == 'Group loan application')
                {
                    if ($row->groupleader_member_id)
                    {
                        $applicant_id = $row['groupleaderMemberIDCustom']->member_id; //Member::find($row->groupleader_member_id)->member_id;
                    }
                    else
                    {
                        $applicant_id = '';
                    }
                }
                else
                {
                    if ($row->applicant_id)
                    {
                        $applicant_id = $row['MemberApplicantCustom']->member_id; //Member::find($row->applicant_id)->member_id;
                    }
                    else
                    {
                        $applicant_id = '';
                    }
                }
                $val['applicant_id'] = $applicant_id;
                $group_loan_id = $row->group_loan_common_id;
                $val['group_loan_id'] = $group_loan_id;
                $val['application_number'] = $row->account_number;
                $val['branch'] = $row['gloanBranch']->name;
                $val['branch_code'] = $row['gloanBranch']->branch_code;
                $val['sector'] = $row['gloanBranch']->sector;
                $val['region'] = $row['gloanBranch']->regan;
                $val['zone'] = $row['gloanBranch']->zone;
               // $val['member_id'] = $row['loanMember']->member_id;
                if (isset($row['loanMember']->member_id))
                    {
                        $member_id = $row['loanMember']->member_id;
                        $mid=$row['loanMember']->id;
                    }
                    else
                    {
                        $member_id = '';
                        $mid=0;
                    }
                    $val['member_id'] = $member_id;
                    $val['totaldepositinv'] ='N/A';
                    if($member_id>0)
                    {
                        $val['totaldepositinv'] = getAllDeposit($mid,$applicationDate);
                    }
                $val['member_name'] = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                if ($row->approve_date)
                {
                    if ($row->emi_option == 1)
                    {
                        $last_recovery_date = date('d/m/Y', strtotime("+" . $row->emi_period . " months", strtotime($row->approve_date)));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                }
                else
                {
                    $last_recovery_date = 'N/A';
                }
                $val['last_recovery_date'] = $last_recovery_date;
                $val['associate_code'] = $row['loanMemberAssociate']->associate_no;//getMemberData($row->associate_member_id)->associate_no;
                $member = $row['loanMemberAssociate'];//Member::where('id', $row->associate_member_id)->first(['id', 'first_name', 'last_name']);
                $val['associate_name'] = $member->first_name . ' ' . $member->last_name;
                $val['loan'] = 'Group Loan';
                $val['amount'] = $row->deposite_amount . ' <i class="fa fa-inr"></i>';
                $val['loan_amount'] = $row->amount . ' <i class="fas fa-rupee-sign"></i>';
                $val['file_charge'] = $row->file_charges . ' <i class="fas fa-rupee-sign"></i>';
                if(isset($row['loanMemberBankDetails2']->bank_name))
                {
                    $bankName = $row['loanMemberBankDetails2']->bank_name;
                }
                else{
                    $bankName ='N/A';
                }
                $val['bank_name'] = $bankName;
                if(isset($row['loanMemberBankDetails2']->account_no))
                {
                    $bankAccount = $row['loanMemberBankDetails2']->account_no;
                }
                else{
                    $bankAccount ='N/A';
                }
                $val['bank_account_number'] = $bankAccount;
                if(isset($row['loanMemberBankDetails2']->ifsc_code))
                {
                    $ifscCode = $row['loanMemberBankDetails2']->ifsc_code;
                }
                else{
                    $ifscCode ='N/A';
                }
                $val['ifsc_code'] = $ifscCode;
                if ($row->status == 0)
                {
                    $status = 'Pending';
                }
                else if ($row->status == 1)
                {
                    $status = 'Approved';
                }
                else if ($row->status == 2)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 3)
                {
                    $status = 'Clear';
                }
                else if ($row->status == 4)
                {
                    $status = 'Due';
                }
                else if ($row->status == 5)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 6)
                {
                    $status = 'Hold';
                }
                else if ($row->status == 7)
                {
                    $status = 'Approved but hold';
                }
                else{
                    $status = 'N/A';
                }
                $val['status'] = $status;
                if ($row['approved_date'])
                {
                    $approve_date = date("d/m/Y", strtotime($row['approved_date']));
                }
                else
                {
                    $approve_date = 'N/A';
                }
                $val['reason'] =isset($row->rejection_description) ? $row->rejection_description : 'N/A' ;
                $val['approve_date'] = $approve_date;
                $val['created_at'] = date("d/m/Y", strtotime($row['created_at']));
                $vurl = URL::to("admin/loan/view/" . $row->member_loan_id . "/3");
                $eurl = URL::to("admin/loan/edit/" . $row->member_loan_id . "");
                $aurl = URL::to("admin/loan/approve-group-loan/" . $row->member_loan_id . "");
                // $rurl = URL::to("admin/loan/loan-request-reject/" . $row->member_loan_id . "/3");
               // $taurl = URL::to("admin/loan/transfer/" . $row->id . "");
                $taurl = URL::to("admin/loan/transfer-group-loan-amount/" . $row->id . "");
                $rurl = URL::to("admin/loan/loan-request-reject/" . $row->id . "/" . $row->loan_type . "");
                $turl = URL::to("admin/loan/emi-transactions/" . $row->id . "/3");
                $purl = URL::to("admin/loan/print/" . $row->id . "/3");
                $pdf = URL::to("admin/loan/download-recovery-clear/" . $row->id . "/3");
                $print = URL::to("admin/loan/print-recovery-clear/" . $row->id . "/3");
                $urlCom = URL::to("admin/loan/commission-group/" . $row->id . "");
                $loanLogs = URL::to("admin/loan/logs/" . $row->id . "/" . $row->loan_type . "");
                $changestatus = 0;
                $appstatus = 1;
                $dateNew = encrypt($applicationDate);                    
                $pendurl =URL::to("admin/loan/pending/" . $row->id . "/" . $row->loan_type ."/" . $changestatus ."/" . $dateNew ."");
                $apphurl =URL::to("admin/loan/pending/" . $row->id . "/" . $row->loan_type ."/" . $appstatus ."/" . $dateNew ."");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9"></i></a><div class="dropdown-menu dropdown-menu-right">';
                if ($row->status == 0)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $aurl . '"><i class="fas fa-thumbs-up"></i>Approve</a>';
                        // $btn .= '<a class="dropdown-item reject-loan" href="' . $rurl . '" data-toggle="modal" data-target="#loan-rejected" loan-id="' . $row->id . '"><i class="fas fa-thumbs-down"></i>Delete</a>';
                        $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Rejection" demandId = "'.$row->id.'" status = "5" loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="fas fa-thumbs-down" ></i>Reject </a>';
                        $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Hold" demandId = "'.$row->id.'" status = "6"  loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="icon-paperplane" ></i>Hold </a>';
                        $btn .= '<a class="dropdown-item" href="' . $eurl . '"><i class="icon-pencil7 mr-2"></i>Edit</a>';
                    }
                }
                elseif ($row->status == 1 && ($row->amount != $row->deposite_amount))
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $taurl . '"><i class="fa fa-exchange"></i>Transfer Amount</a>';
                    }
                    $btn .= '<a class="dropdown-item reject-demand-advice" href="'.$taurl.'" data-toggle="modal" data-target="#formmodal" modal-title = "Cause of Hold" demandId = "'.$row->id.'" status = "7"  loanCategory = "'.$row['loan']->loan_category.'" loanType = "'.$row->loan_type.'" ><i class="icon-paperplane" ></i>Hold </a>';
                } elseif ($row->status == 6  || $row->status == 7)
                {
                    $btn .= '<a class="dropdown-item" href="' . $apphurl . '"><i class="fas fa-thumbs-up mr-2"></i>Approve</a>';
                    $btn .= '<a class="dropdown-item" href="' . $pendurl . '"><i class="fas fa-thumbs-up mr-2"></i>Pending</a>';
                }
                $btn .= '<a class="dropdown-item" href="' . $vurl . '"><i class="fas fa-eye text-default mr-2"></i>View</a>';
                if (Auth::user()->id != "13")
                {
                    $btn .= '<a class="dropdown-item" href="' . $purl . '" target="_blank"><i class="fa fa-print mr-2" aria-hidden="true"></i>Print</a>';
                }
                $btn .= '<a class="dropdown-item" href="' . $turl . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>Transactions</a>';
                $btn .= '<a class="dropdown-item" href="' . $urlCom . '"><i class="fas fa-percent text-default mr-2"></i>Loan Commission</a>';
                if ($row->status == 3)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $pdf . '"><i class="fas fa-download text-default mr-2"></i>Download No Dues</a>';
                        $btn .= '<a class="dropdown-item" href="' . $print . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>print No Dues</a>';
                    }
                }
                $btn .= '<a class="dropdown-item" href="' . $loanLogs . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>Logs</a>';
                $btn .= '</div></div></div>';
                $val['action'] = $btn;
                $rowReturn[] = $val;
            }
           $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Display created member loan by id.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function editLoan($id)
    {
        $data['title'] = "Loan Edit";
        $data['loans'] = Loans::all();
        $data['loanDetails'] = Memberloans::with('loan', 'LoanApplicants', 'LoanCoApplicants', 'LoanGuarantor', 'Loanotherdocs', 'GroupLoanMembers', 'loanInvestmentPlans')->findOrFail($id);
        $data['id'] = $id;
        return view('templates.admin.loan.edit_member_loan', $data);
    }
    /**
     * Update the specified loan.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function updateLoan(Request $request)
    {
        $loantype = $request->input('loan_type');
        /*switch ($loantype) {
          case "personal-loan":
            $rules = [
                'loan' => 'required',
                'amount' => 'required',
                'days' => 'required',
                'months' => 'required',
                'acc_member_id' => 'required',
                //'applicant_id' => 'required',
                'applicant_member_id' => 'required',
                'applicant_address_permanent' => 'required',
                'applicant_address_temporary' => 'required',
                'applicant_occupation' => 'required',
                'applicant_organization' => 'required',
                'applicant_designation' => 'required',
                'applicant_monthly_income' => 'required|integer',
                'applicant_year_from' => 'required|integer',
                'applicant_bank_name' => 'required',
                'applicant_bank_account_number' => 'required|integer',
                'applicant_ifsc_code' => 'required|integer',
                'applicant_cheque_number_1' => 'required|integer',
                'applicant_cheque_number_2' => 'required|integer',
                'applicant_id_proof' => 'required',
                'applicant_id_number' => 'required',
                'applicant_address_id_proof' => 'required',
                'applicant_address_id_number' => 'required',
                'applicant_income' => 'required',
                'applicant_security' => 'required',
                'co-applicant_member_id' => 'required',
                'co-applicant_address_permanent' => 'required',
                'co-applicant_address_temporary' => 'required',
                'co-applicant_occupation' => 'required',
                'co-applicant_organization' => 'required',
                'co-applicant_designation' => 'required',
                'co-applicant_monthly_income' => 'required|integer',
                'co-applicant_year_from' => 'required|integer',
                'co-applicant_bank_name' => 'required',
                'co-applicant_bank_account_number' => 'required|integer',
                'co-applicant_ifsc_code' => 'required|integer',
                'co-applicant_cheque_number_1' => 'required|integer',
                'co-applicant_cheque_number_2' => 'required|integer',
                'co-applicant_id_proof' => 'required',
                'co-applicant_id_number' => 'required',
                'co-applicant_address_id_proof' => 'required',
                'co-applicant_address_id_number' => 'required',
                'co-applicant_income' => 'required',
                'co-applicant_security' => 'required',
                'guarantor_member_id' => 'required',
                'guarantor_name' => 'required',
                'guarantor_father_name' => 'required',
                'guarantor_dob' => 'required',
                'guarantor_marital_status' => 'required',
                'local_address' => 'required',
                'guarantor_ownership' => 'required',
                'guarantor_temporary_address' => 'required',
                'guarantor_mobile_number' => 'required|integer',
                'guarantor_educational_qualification' => 'required',
                'guarantor_dependents_number' => 'required',
                'guarantor_occupation' => 'required',
                'guarantor_organization' => 'required',
                'guarantor_designation' => 'required',
                'guarantor_monthly_income' => 'required|integer',
                'guarantor_year_from' => 'required|integer',
                'guarantor_bank_name' => 'required',
                'guarantor_bank_account_number' => 'required|integer',
                'guarantor_ifsc_code' => 'required|integer',
                'guarantor_cheque_number_1' => 'required|integer',
                'guarantor_cheque_number_2' => 'required|integer',
                'guarantor_id_proof' => 'required',
                'guarantor_id_number' => 'required',
                'guarantor_address_id_proof' => 'required',
                'guarantor_address_id_number' => 'required',
                'guarantor_income' => 'required',
                'guarantor_security' => 'required',
            ];
            break;
        }
        $customMessages = [
            'acc_member_id.required' => 'The accociate member id field is required.',
            'required' => 'The :attribute field is required.'
        ];
        $this->validate($request, $rules, $customMessages);*/
        $type = 'update';
        $loanId = $request->input('loanId');
        $data = $this->getData($request->all() , $type);
        $memberLoan = Memberloans::find($loanId);
        $data['edit_reject_request'] = $request->input('edit_reject_request');
        $memberLoan->update($data);
        DB::beginTransaction();
        try
        {
            switch ($loantype)
            {
                case "1":
                    $applicantIdFile = $request->file('applicant_id_file');
                    $applicantAddressFile = $request->file('applicant_address_id_file');
                    $applicantIncomeFile = $request->file('applicant_income_file');
                    $applicant = $this->applicantDetailData($request->all() , $applicantIdFile, $applicantAddressFile, $applicantIncomeFile, $loanId, $type);
                    $applicantId = $request->input('applicant_id');
                    $applicanRes = Loanapplicantdetails::find($applicantId);
                    $applicanRes->update($applicant);
                    $coapplicantIdFile = $request->file('co-applicant_id_file');
                    $coapplicantAddressFile = $request->file('co-applicant_address_id_file');
                    $coapplicantIncomeFile = $request->file('co-applicant_income_file');
                    $coapplicantUnderTakingDoc = $request->file('co-applicant_under_taking_doc');
                    //if($request['co_applicant_checkbox'] != ''){
                    $coApplicant = $this->coApplicantDetailData($request->all() , $coapplicantIdFile, $coapplicantAddressFile, $coapplicantIncomeFile, $coapplicantUnderTakingDoc, $loanId, $type);
                    $coapplicantId = $request->input('coapplicant_id');
                    $coapplicanRes = Loanscoapplicantdetails::find($coapplicantId);
                    $coapplicanRes->update($coApplicant);
                    //}
                    $guarantorIdFile = $request->file('guarantor_id_file');
                    $guarantorAddressFile = $request->file('guarantor_address_id_file');
                    $guarantorIncomeFile = $request->file('guarantor_income_file');
                    $guarantorOtherFile = $request->file('guarantor_more_upload_file');
                    //$guarantorUnderTakingDoc = $request->file('guarantor_under_taking_doc');
                    $guarantor = $this->guarantorDetailData($request->all() , $guarantorIdFile, $guarantorAddressFile, $guarantorIncomeFile, $guarantorOtherFile, $loanId, $type);
                    $guarantorId = $request->input('guarantor_id');
                    $guarantorRes = Loansguarantordetails::find($guarantorId);
                    $guarantorRes->update($guarantor);
                    if ($request['hidden_more_doc'] == 1 && !empty($request->file('guarantor_more_upload_file')))
                    {
                        $guarantorMoreDoc = $this->uploadGuarantorMoreDoc($request->all() , $request['guarantor_more_doc_title'], $request->file('guarantor_more_upload_file') , $loanId, 'guarantor', 'moredocument', $type);
                    }
                break;
                case "2":
                    $applicantIdFile = $request->file('applicant_id_file');
                    $applicantAddressFile = $request->file('applicant_address_id_file');
                    $applicantIncomeFile = $request->file('applicant_income_file');
                    $applicant = $this->applicantDetailData($request->all() , $applicantIdFile, $applicantAddressFile, $applicantIncomeFile, $loanId, $type);
                    $applicantId = $request->input('applicant_id');
                    $applicanRes = Loanapplicantdetails::find($applicantId);
                    $applicanRes->update($applicant);
                    $coapplicantIdFile = $request->file('co-applicant_id_file');
                    $coapplicantAddressFile = $request->file('co-applicant_address_id_file');
                    $coapplicantIncomeFile = $request->file('co-applicant_income_file');
                    if ($request['co_applicant_checkbox'] != '')
                    {
                        $coApplicant = $this->coApplicantDetailData($request->all() , $coapplicantIdFile, $coapplicantAddressFile, $coapplicantIncomeFile, $loanId, $type);
                        $coapplicantId = $request->input('coapplicant_id');
                        $coapplicanRes = Loanscoapplicantdetails::find($coapplicantId);
                        $coapplicanRes->update($coApplicant);
                    }
                    $guarantorIdFile = $request->file('guarantor_id_file');
                    $guarantorAddressFile = $request->file('guarantor_address_id_file');
                    $guarantorIncomeFile = $request->file('guarantor_income_file');
                    $guarantorOtherFile = $request->file('guarantor_more_upload_file');
                    //$guarantorUnderTakingDoc = $request->file('guarantor_under_taking_doc');
                    $guarantor = $this->guarantorDetailData($request->all() , $guarantorIdFile, $guarantorAddressFile, $guarantorIncomeFile, $guarantorOtherFile, $loanId, $type);
                    $guarantorId = $request->input('guarantor_id');
                    $guarantorRes = Loansguarantordetails::find($guarantorId);
                    $guarantorRes->update($guarantor);
                    if ($request['hidden_more_doc'] == 1 && !empty($request->file('guarantor_more_upload_file')))
                    {
                        $guarantorMoreDoc = $this->uploadGuarantorMoreDoc($request->all() , $request['guarantor_more_doc_title'], $request->file('guarantor_more_upload_file') , $loanId, 'guarantor', 'moredocument', $type);
                    }
                break;
                case "3":
                    $applicantIdFile = $request->file('applicant_id_file');
                    $applicantAddressFile = $request->file('applicant_address_id_file');
                    $applicantIncomeFile = $request->file('applicant_income_file');
                    $applicant = $this->applicantDetailData($request->all() , $applicantIdFile, $applicantAddressFile, $applicantIncomeFile, $loanId, $type);
                    $applicantId = $request->input('applicant_id');
                    $applicanRes = Loanapplicantdetails::find($applicantId);
                    $applicanRes->update($applicant);
                    $guarantorIdFile = $request->file('guarantor_id_file');
                    $guarantorAddressFile = $request->file('guarantor_address_id_file');
                    $guarantorIncomeFile = $request->file('guarantor_income_file');
                    $guarantorOtherFile = $request->file('guarantor_more_upload_file');
                    //$guarantorUnderTakingDoc = $request->file('guarantor_under_taking_doc');
                    $guarantor = $this->guarantorDetailData($request->all() , $guarantorIdFile, $guarantorAddressFile, $guarantorIncomeFile, $guarantorOtherFile, $loanId, $type);
                    $guarantorId = $request->input('guarantor_id');
                    $guarantorRes = Loansguarantordetails::find($guarantorId);
                    $guarantorRes->update($guarantor);
                    if ($request['hidden_more_doc'] == 1 && !empty($request->file('guarantor_more_upload_file')))
                    {
                        $guarantorMoreDoc = $this->uploadGuarantorMoreDoc($request->all() , $request['guarantor_more_doc_title'], $request->file('guarantor_more_upload_file') , $loanId, 'guarantor', 'moredocument', $type);
                    }
                break;
                case "4":
                    $applicantIdFile = $request->file('applicant_id_file');
                    $applicantAddressFile = $request->file('applicant_address_id_file');
                    $applicantIncomeFile = $request->file('applicant_income_file');
                    $guarantorOtherFile = $request->file('guarantor_more_upload_file');
                    $applicant = $this->applicantDetailData($request->all() , $applicantIdFile, $applicantAddressFile, $applicantIncomeFile, $guarantorOtherFile, $request->input('loanId') , $type);
                    $applicantId = $request->input('applicant_id');
                    $applicanRes = Loanapplicantdetails::find($applicantId);
                    $applicanRes->update($applicant);
                break;
            }
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return back()
            ->with('success', 'Update was Successful!');
        /*if ($applicanRes) {
            return back()->with('success', 'Update was Successful!');
        } else {
            return back()->with('alert', 'An error occured');
        }*/
    }
    /**
     * upload more documents to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function uploadGuarantorMoreDoc($request, $moredoctitles, $moredocfiles, $loanId, $folder, $moredocfolder, $type)
    {
        $mainFolder = storage_path() . '/images/loan/document/' . $loanId;
        File::makeDirectory($mainFolder, $mode = 0777, true, true);
        $loanTypeFolder = $mainFolder . '/' . $folder;
        File::makeDirectory($loanTypeFolder, $mode = 0777, true, true);
        $loanTypeProffFolder = $loanTypeFolder . '/' . $moredocfolder . '/';
        //File::makeDirectory($loanTypeProffFolder, $mode = 0777, true, true);
        foreach ($moredoctitles as $key => $value)
        {
            if (array_key_exists($key, $moredocfiles) && $request['hidden_other_doc_file_id'][$key])
            {
                $file = $moredocfiles[$key];
                $uploadFile = $file->getClientOriginalName();
                $filename = pathinfo($uploadFile, PATHINFO_FILENAME);
                $fname = $filename . '_' . time() . $key . '.' . $file->getClientOriginalExtension();
                $file->move($loanTypeProffFolder, $fname);
                $data = [
                'file_name' => $fname,
                'file_path' => $loanTypeProffFolder,
                'file_extension' => $file->getClientOriginalExtension() ,
                'created_at' => $request['created_at'],
                ];
                $fileRes = Files::find($request['hidden_other_doc_file_id'][$key]);
                $fileRes->update($data);
                $filesId = $request['hidden_other_doc_file_id'][$key];
            }
            elseif (array_key_exists($key, $moredocfiles) && $request['hidden_other_doc_file_id'][$key] == '')
            {
                $file = $moredocfiles[$key];
                $uploadFile = $file->getClientOriginalName();
                $filename = pathinfo($uploadFile, PATHINFO_FILENAME);
                $fname = $filename . '_' . time() . $key . '.' . $file->getClientOriginalExtension();
                $file->move($loanTypeProffFolder, $fname);
                $data = [
                'file_name' => $fname,
                'file_path' => $loanTypeProffFolder,
                'file_extension' => $file->getClientOriginalExtension() ,
                'created_at' => $request['created_at'],
                ];
                $res = Files::create($data);
                $fId = $res->id;
                $loanOtherData = [
                'member_loan_id' => $loanId,
                'title' => $value,
                'file_id' => $fId,
                'created_at' => $request['created_at'],
                ];
                $res = Loanotherdocs::create($loanOtherData);
            }
        }
    }
    /**
     * Get investment plans data to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getData($request, $type)
    {
        $loantype = $request['loan_type'];
        switch ($loantype)
        {
            case "personal-loan":
            break;
            case "staff-loan":
                /*$data['emi_mode_in_month'] = $request['staff_emi_mode'];
                $data['group_activity'] = $request['group_activity'];
                $data['group_member_id'] = $request['group_leader_member_id'];
                $data['number_of_member'] = $request['number_of_member'];*/
            break;
            case "group-loan":
                $data['group_activity'] = $request['group_activity'];
                $data['groupleader_member_id'] = $request['group_leader_m_id'];
                $data['group_associate_id'] = $request['group_associate_id'];
                $data['number_of_member'] = $request['number_of_member'];
                $data['group_member_id'] = $request['group_member_id'];
            break;
        }
        if ($type == 'create')
        {
            $data['branch_id'] = $BranchId;
            $data['emi_option'] = $request['emi_option'];
            $data['emi_period'] = $request['emi_period'];
            $data['emi_amount'] = $request['loan_emi'];
            $data['file_charges'] = $request['file_charge'];
            $data['loan_purpose'] = $request['purpose'];
            $data['amount'] = $request['amount'];
            $data['loan_type'] = $request['loan'];
        }
        $data['associate_member_id'] = $request['acc_member_id'];
        $data['applicant_id'] = $request['applicant_member_id'];
        //$data['emi_mode'] = $request['emi_mode'];
        $data['bank_account'] = $request['bank_account'];
        $data['ifsc_code'] = $request['ifsc_code'];
        $data['bank_name'] = $request['bank_name'];
        $data['created_at'] = $request['created_at'];
        return $data;
    }
    /**
     * Get loan applicant data to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function applicantDetailData($request, $idFile, $addressFile, $incomeFile, $loanId, $type)
    {
        $folder = 'applicant';
        $data['member_loan_id'] = $request['loanId'];
        $data['member_id'] = $request['acc_member_id'];
        $data['address_permanent'] = $request['applicant_address_permanent'];
        $data['temporary_permanent'] = $request['applicant_address_temporary'];
        //$data['occupation'] = $request['applicant_occupation'];
        $data['organization'] = $request['applicant_organization'];
        $data['designation'] = $request['applicant_designation'];
        $data['monthly_income'] = $request['applicant_monthly_income'];
        $data['year_from'] = $request['applicant_year_from'];
        $data['bank_name'] = $request['applicant_bank_name'];
        $data['bank_account_number'] = $request['applicant_bank_account_number'];
        $data['ifsc_code'] = $request['applicant_ifsc_code'];
        $data['cheque_number_1'] = $request['applicant_cheque_number_1'];
        $data['cheque_number_2'] = $request['applicant_cheque_number_2'];
        if ($type == 'update' && $idFile)
        {
            $hiddenFileId = $request['hidden_applicant_file_id'];
            $fileId = $this->updateUploadStoreImage($idFile, $loanId, $folder, 'id_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $idFile == '')
        {
            $fileId = $request['hidden_applicant_file_id'];
        }
        elseif ($type == 'create' && $idFile)
        {
            $fileId = $this->uploadStoreImage($idFile, $loanId, $folder, 'id_proof', $request['created_at']);
        }
        if (empty($fileId))
        {
            $fileId = null;
        }
        $data['id_proof_type'] = $request['applicant_id_proof'];
        $data['id_proof_number'] = $request['applicant_id_number'];
        $data['id_proof_file_id'] = $fileId;
        if ($type == 'update' && $addressFile)
        {
            $hiddenFileId = $request['hidden_applicant_address_file_id'];
            $addressFileId = $this->updateUploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $addressFile == '')
        {
            $addressFileId = $request['hidden_applicant_address_file_id'];
        }
        elseif ($type == 'create' && $addressFile)
        {
            $addressFileId = $this->uploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $request['created_at']);
        }
        if (empty($addressFileId))
        {
            $addressFileId = null;
        }
        $data['address_proof_type'] = $request['applicant_address_id_proof'];
        $data['address_proof_id_number'] = $request['applicant_address_id_number'];
        $data['address_proof_file_id'] = $addressFileId;
        if ($type == 'update' && $incomeFile)
        {
            $hiddenFileId = $request['hidden_applicant_income_file_id'];
            $incomeFileId = $this->updateUploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $incomeFile == '')
        {
            $incomeFileId = $request['hidden_applicant_income_file_id'];
        }
        elseif ($type == 'create' && $incomeFile)
        {
            $incomeFileId = $this->uploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $request['created_at']);
        }
        if (empty($incomeFileId))
        {
            $incomeFileId = null;
        }
        $data['income_type'] = $request['applicant_income'];
        if ($data['income_type'] == 2)
        {
            $data['income_remark'] = $request['applicant_remark'];
        }
        $data['income_file_id'] = $incomeFileId;
        $data['security'] = $request['applicant_security'];
        $data['created_at'] = $request['created_at'];
        return $data;
    }
    /**
     * Get loan co-applicant data to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function coApplicantDetailData($request, $idFile, $addressFile, $incomeFile, $undertakingFile, $loanId, $type)
    {
        $folder = 'coapplicant';
        $data['member_loan_id'] = $loanId;
        $data['member_id'] = $request['co-applicant_member_id'];
        $data['address_permanent'] = $request['co-applicant_address_permanent'];
        $data['temporary_permanent'] = $request['co-applicant_address_temporary'];
        //$data['occupation'] = $request['co-applicant_occupation'];
        $data['organization'] = $request['co-applicant_organization'];
        $data['designation'] = $request['co-applicant_designation'];
        $data['monthly_income'] = $request['co-applicant_monthly_income'];
        $data['year_from'] = $request['co-applicant_year_from'];
        $data['bank_name'] = $request['co-applicant_bank_name'];
        $data['bank_account_number'] = $request['co-applicant_bank_account_number'];
        $data['ifsc_code'] = $request['co-applicant_ifsc_code'];
        $data['cheque_number_1'] = $request['co-applicant_cheque_number_1'];
        $data['cheque_number_2'] = $request['co-applicant_cheque_number_2'];
        if ($type == 'update' && $idFile)
        {
            $hiddenFileId = $request['hidden_coapplicant_file_id'];
            $fileId = $this->updateUploadStoreImage($idFile, $loanId, $folder, 'id_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $idFile == '')
        {
            $fileId = $request['hidden_coapplicant_file_id'];
        }
        elseif ($type == 'create' && $idFile)
        {
            $fileId = $this->uploadStoreImage($idFile, $loanId, $folder, 'id_proof', $request['created_at']);
        }
        if (empty($fileId))
        {
            $fileId = null;
        }
        $data['id_proof_type'] = $request['co-applicant_id_proof'];
        $data['id_proof_number'] = $request['co-applicant_id_number'];
        $data['id_proof_file_id'] = $fileId;
        if ($type == 'update' && $addressFile)
        {
            $hiddenFileId = $request['hidden_coapplicant_address_file_id'];
            $addressFileId = $this->updateUploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $addressFile == '')
        {
            $addressFileId = $request['hidden_coapplicant_address_file_id'];
        }
        elseif ($type == 'create' && $addressFile)
        {
            $addressFileId = $this->uploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $request['created_at']);
        }
        if (empty($addressFileId))
        {
            $addressFileId = null;
        }
        $data['address_proof_type'] = $request['co-applicant_address_id_proof'];
        $data['address_proof_id_number'] = $request['co-applicant_address_id_number'];
        $data['address_proof_file_id'] = $addressFileId;
        if ($type == 'update' && $incomeFile)
        {
            $hiddenFileId = $request['hidden_coapplicant_income_file_id'];
            $incomeFileId = $this->updateUploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $incomeFile == '')
        {
            $incomeFileId = $request['hidden_coapplicant_income_file_id'];
        }
        elseif ($type == 'create' && $incomeFile)
        {
            $incomeFileId = $this->uploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $request['created_at']);
        }
        if (empty($incomeFileId))
        {
            $incomeFileId = null;
        }
        $data['income_type'] = $request['co-applicant_income'];
        /*if($data['income_type']==2){
            $data['income_remark'] = $request['co_applicant_remark'];
        }*/
        $data['income_file_id'] = $incomeFileId;
        $data['security'] = $request['co-applicant_security'];
        /*$moreFileId = $this->uploadStoreImage($incomeFile,$loanId,$folder,'other');
        $data['more_doc_title'] = $request['fn_mobile_number'];
        $data['more_doc_file_id'] = $moreFileId;*/
        if ($type == 'update' && $undertakingFile)
        {
            $hiddenFileId = $request['hidden_guarantor_income_file_id'];
            $undertakingFileId = $this->updateUploadStoreImage($undertakingFile, $loanId, $folder, 'undertakingdoc', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $undertakingFile == '')
        {
            $undertakingFileId = $request['hidden_guarantor_income_file_id'];
        }
        elseif ($type == 'create' && $undertakingFile)
        {
            $undertakingFileId = $this->uploadStoreImage($undertakingFile, $loanId, $folder, 'undertakingdoc', $request['created_at']);
        }
        if (empty($undertakingFileId))
        {
            $undertakingFileId = null;
        }
        $data['under_taking_doc'] = $undertakingFileId;
        $data['created_at'] = $request['created_at'];
        return $data;
    }
    /**
     * Get loan guarantor data to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function guarantorDetailData($request, $idFile, $addressFile, $incomeFile, $guarantorOtherFile, $loanId, $type)
    {
        $folder = 'guarantor';
        $data['member_loan_id'] = $loanId;
        $data['member_id'] = $request['guarantor_member_id'];
        $data['name'] = $request['guarantor_name'];
        $data['father_name'] = $request['guarantor_father_name'];
        $data['dob'] = date("Y-m-d", strtotime(convertDate($request['guarantor_dob'])));
        $data['marital_status'] = $request['guarantor_marital_status'];
        $data['local_address'] = $request['local_address'];
        $data['ownership'] = $request['guarantor_ownership'];
        $data['temporary_permanent'] = $request['guarantor_temporary_address'];
        $data['mobile_number'] = $request['guarantor_mobile_number'];
        $data['educational_qualification'] = $request['guarantor_educational_qualification'];
        $data['number_of_dependents'] = $request['guarantor_dependents_number'];
        //$data['occupation'] = $request['guarantor_occupation'];
        $data['organization'] = $request['guarantor_organization'];
        $data['designation'] = $request['guarantor_designation'];
        $data['monthly_income'] = $request['guarantor_monthly_income'];
        $data['year_from'] = $request['guarantor_year_from'];
        $data['bank_name'] = $request['guarantor_bank_name'];
        $data['bank_account_number'] = $request['guarantor_bank_account_number'];
        $data['ifsc_code'] = $request['guarantor_ifsc_code'];
        $data['cheque_number_1'] = $request['guarantor_cheque_number_1'];
        $data['cheque_number_2'] = $request['guarantor_cheque_number_2'];
        if ($type == 'update' && $idFile)
        {
            $hiddenFileId = $request['hidden_guarantor_file_id'];
            $fileId = $this->updateUploadStoreImage($idFile, $loanId, $folder, 'id_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $idFile == '')
        {
            $fileId = $request['hidden_guarantor_file_id'];
        }
        elseif ($type == 'create' && $idFile)
        {
            $fileId = $this->uploadStoreImage($idFile, $loanId, $folder, 'id_proof', $request['created_at']);
        }
        if (empty($fileId))
        {
            $fileId = null;
        }
        $data['id_proof_type'] = $request['guarantor_id_proof'];
        $data['id_proof_number'] = $request['guarantor_id_number'];
        $data['id_proof_file_id'] = $fileId;
        if ($type == 'update' && $addressFile)
        {
            $hiddenFileId = $request['hidden_guarantor_address_file_id'];
            $addressFileId = $this->updateUploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $addressFile == '')
        {
            $addressFileId = $request['hidden_guarantor_address_file_id'];
        }
        elseif ($type == 'create' && $addressFile)
        {
            $addressFileId = $this->uploadStoreImage($addressFile, $loanId, $folder, 'address_proof', $request['created_at']);
        }
        if (empty($addressFileId))
        {
            $addressFileId = null;
        }
        $data['address_proof_type'] = $request['guarantor_address_id_proof'];
        $data['address_proof_id_number'] = $request['guarantor_address_id_number'];
        $data['address_proof_file_id'] = $addressFileId;
        if ($type == 'update' && $incomeFile)
        {
            $hiddenFileId = $request['hidden_guarantor_income_file_id'];
            $incomeFileId = $this->updateUploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $hiddenFileId, $request['created_at']);
        }
        elseif ($type == 'update' && $incomeFile == '')
        {
            $incomeFileId = $request['hidden_guarantor_income_file_id'];
        }
        elseif ($type == 'create' && $incomeFile)
        {
            $incomeFileId = $this->uploadStoreImage($incomeFile, $loanId, $folder, 'income_proof', $request['created_at']);
        }
        if (empty($incomeFileId))
        {
            $incomeFileId = null;
        }
        /*if($type=='update' && $undertakingFile){
            $hiddenFileId = $request['hidden_guarantor_under_taking_file_id'];
            $undertakingFileId = $this->updateUploadStoreImage($undertakingFile,$loanId,$folder,'undertakingdoc',$hiddenFileId,$request['created_at']);
        }elseif($type=='update' && $undertakingFile == ''){
            $undertakingFileId = $request['hidden_guarantor_under_taking_file_id'];
        }elseif ($type=='create' && $undertakingFile) {
            $undertakingFileId = $this->uploadStoreImage($undertakingFile,$loanId,$folder,'undertakingdoc',$request['created_at']);
        }
        if(empty($undertakingFileId)){
            $undertakingFileId = null;
        }
        $data['under_taking_doc'] = $undertakingFileId;*/
        $data['income_type'] = $request['guarantor_income'];
        /*if($data['income_type']==2){
            $data['income_remark'] = $request['guarantor_income_remark'];
        }*/
        $data['income_file_id'] = $incomeFileId;
        $data['security'] = $request['guarantor_security'];
        if ($type != 'update')
        {
            $data['created_at'] = $request['created_at'];
        }
        //echo "<pre>"; print_r($data); die;
        /*if($request['hidden_more_doc']==1){
            if($type=='update' && $guarantorOtherFile && $request['hidden_other_doc_file_id']){
                $hiddenFileId = $request['hidden_other_doc_file_id'];
                $moreFileId = $this->updateUploadStoreImage($guarantorOtherFile,$loanId,$folder,'other',$hiddenFileId);
            }elseif($type=='update' && $guarantorOtherFile == '' && $request['hidden_other_doc_file_id'] != ''){
                $moreFileId = $request['hidden_other_doc_file_id'];
                //$moreFileId = $this->uploadStoreImage($guarantorOtherFile,$loanId,$folder,'other');
            }elseif($type=='update' && $guarantorOtherFile && $request['hidden_other_doc_file_id'] == ''){
                $moreFileId = $this->uploadStoreImage($guarantorOtherFile,$loanId,$folder,'other');
                //$moreFileId = $this->uploadStoreImage($guarantorOtherFile,$loanId,$folder,'other');
            }elseif ($type=='create' && $guarantorOtherFile) {
                $moreFileId = $this->uploadStoreImage($guarantorOtherFile,$loanId,$folder,'other');
            }
            $data['more_doc_title'] = $request['guarantor_more_doc_title'];
            $data['more_doc_file_id'] = $moreFileId;
        }*/
        return $data;
    }
    /**
     * update upload loan proof documents to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function updateUploadStoreImage($file, $loanId, $folder, $prooffolder, $hiddenFileId, $created_at)
    {
        $mainFolder = storage_path() . '/images/loan/document/' . $loanId;
        File::makeDirectory($mainFolder, $mode = 0777, true, true);
        $loanTypeFolder = $mainFolder . '/' . $folder;
        File::makeDirectory($loanTypeFolder, $mode = 0777, true, true);
        $loanTypeProffFolder = $loanTypeFolder . '/' . $prooffolder . '/';
        //File::makeDirectory($loanTypeProffFolder, $mode = 0777, true, true);
        $proffFolder = glob($loanTypeFolder . '/' . $prooffolder . '/*');
        foreach ($proffFolder as $fileRes)
        {
            if (is_file($fileRes))
            unlink($fileRes);
        }
        $uploadFile = $file->getClientOriginalName();
        $filename = pathinfo($uploadFile, PATHINFO_FILENAME);
        $fname = $filename . '_' . time() . '.' . $file->getClientOriginalExtension();
        $file->move($loanTypeProffFolder, $fname);
        if ($hiddenFileId == '')
        {
            $data = [
            'file_name' => $fname,
            'file_path' => $loanTypeProffFolder,
            'file_extension' => $file->getClientOriginalExtension() ,
            'created_at' => $created_at,
            ];
            $res = Files::create($data);
            $filesId = $res->id;
        }
        else
        {
            $data = [
            'file_name' => $fname,
            'file_path' => $loanTypeProffFolder,
            'file_extension' => $file->getClientOriginalExtension() ,
            ];
            $fileRes = Files::find($hiddenFileId);
            $fileRes->update($data);
            $filesId = $hiddenFileId;
        }
        return $filesId;
    }
    /**
     * upload loan proof documents to store.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function uploadStoreImage($file, $loanId, $folder, $prooffolder, $created_at)
    {
        $mainFolder = storage_path() . '/images/loan/document/' . $loanId;
        File::makeDirectory($mainFolder, $mode = 0777, true, true);
        $loanTypeFolder = $mainFolder . '/' . $folder;
        File::makeDirectory($loanTypeFolder, $mode = 0777, true, true);
        $loanTypeProffFolder = $loanTypeFolder . '/' . $prooffolder . '/';
        //File::makeDirectory($loanTypeProffFolder, $mode = 0777, true, true);
        $uploadFile = $file->getClientOriginalName();
        $filename = pathinfo($uploadFile, PATHINFO_FILENAME);
        $fname = $filename . '_' . time() . '.' . $file->getClientOriginalExtension();
        $file->move($loanTypeProffFolder, $fname);
        $data = [
        'file_name' => $fname,
        'file_path' => $loanTypeProffFolder,
        'file_extension' => $file->getClientOriginalExtension() ,
        'created_at' => $created_at,
        ];
        $res = Files::create($data);
        return $res->id;
    }
    /**
     * Update Loan requests status view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function loanRequestApproval($id)
    {
        $mLoanDetails = Memberloans::select('branch_id', 'loan_type')->where('id', $id)->first();
        //$getBranchId=getUserBranchId($mLoanDetails->branch_id);
        $branch_id = $mLoanDetails->branch_id;
        $getBranchCode = getBranchCode($branch_id);
        $branchCode = $getBranchCode->branch_code;
        $faCode = getLoanCode($mLoanDetails->loan_type);
        $loanMiCode = getLoanMiCodeNew($mLoanDetails->loan_type, $branch_id);
        if (!empty($loanMiCode))
        {
            $miCodeAdd = $loanMiCode->mi_code + 1;
        }
        else
        {
            $miCodeAdd = 1;
        }
        $miCode = str_pad($miCodeAdd, 5, '0', STR_PAD_LEFT);
        $loanAccount = $branchCode . $faCode . $miCode;
        $mLoan = Memberloans::find($id);
        $mLoanData['mi_code'] = $miCode;
        $mLoanData['account_number'] = $loanAccount;
        $mLoanData['status'] = 1;
        $mLoanData['rejection_description'] = '';
        $mLoanData['old_branch_id'] = $branch_id;
        $state_id = getBranchDetail($branch_id)->state_id;
        $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'), $state_id);
        $mLoanData['approved_date'] = date("Y-m-d",strtotime($globaldate));
         // Register Collector On Approve Of Member Loan and Make an Entry in New Table Collector Account start
         $collector_type = 'loancollector'; 
         $typeid = $mLoan->id;
         $associateid = $mLoan->associate_member_id;
         CollectorAccountStoreLI($collector_type,$typeid,$associateid,$globaldate);
         // Register Collector On Approve Of Member Loan and Make an Entry in New Table Collector Account End
        $mLoan->update($mLoanData);
        return back()->with('success', 'Loan request has been Approved!');
    }
    /**
     * Update Loan requests status view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function groupLoanRequestApproval($id)
    {
        $mLoanDetails = Memberloans::select('branch_id', 'loan_type')->where('id', $id)->first();
        $gLoanDetails = Grouploans::select('id')->where('member_loan_id', $id)->get();
        foreach ($gLoanDetails as $key => $value)
        {
            //$getBranchId=getUserBranchId($mLoanDetails->branch_id);
            //$branch_id=$getBranchId->id;
            $branch_id = $mLoanDetails->branch_id;
            $getBranchCode = getBranchCode($branch_id);
            $branchCode = $getBranchCode->branch_code;
            $faCode = getLoanCode(3);
            $loanMiCode = getGroupLoanMiCodeNew($branch_id);
            if (!empty($loanMiCode))
            {
                $miCodeAdd = $loanMiCode->mi_code + 1;
            }
            else
            {
                $miCodeAdd = 1;
            }
            $miCode = str_pad($miCodeAdd, 5, '0', STR_PAD_LEFT);
            $loanAccount = $branchCode . $faCode . $miCode;
            $gLoan = Grouploans::find($value->id);
            $gLoanData['mi_code'] = $miCode;
            $gLoanData['account_number'] = $loanAccount;
            $gLoanData['status'] = 1;
            $state_id = getBranchDetail($value->branch_id)->state_id;
            $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'), $state_id);
            $gLoanData['approved_date'] = date("Y-m-d",strtotime($globaldate));
            $gLoanData['old_branch_id'] = $branch_id;
             // Register Collector On Approve Of Group Loan and Make an Entry in New Table Collector Account start
             $collector_type = 'grouploancollector'; 
             $typeid = $gLoan->id;
             $associateid = $gLoan->associate_member_id;
             CollectorAccountStoreLI($collector_type,$typeid,$associateid,$globaldate);
             // Register Collector On Approve Of Group Loan and Make an Entry in New Table Collector Account End
            $gLoan->update($gLoanData);
        }
        $mLoan = Memberloans::find($id);
        $mLoanData['status'] = 1;
        $mLoan->update($mLoanData);
        return back()->with('success', 'Loan request has been Approved!');
    }
    /**
     * Update Loan requests status view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function loanRequestRejection($id, $type)
    {
        $loanId = $id;
        $mLoanDetails = Memberloans::select('branch_id', 'loan_type')->where('id', $loanId)->first();
        $maLoanDetails = Loanapplicantdetails::select('id_proof_file_id', 'address_proof_file_id', 'income_file_id')->where('member_loan_id', $loanId)->first();
        $mcoaLoanDetails = Loanscoapplicantdetails::select('id_proof_file_id', 'address_proof_file_id', 'income_file_id', 'more_doc_file_id')->where('member_loan_id', $loanId)->first();
        $mgLoanDetails = Loansguarantordetails::select('id_proof_file_id', 'address_proof_file_id', 'income_file_id', 'more_doc_file_id')->where('member_loan_id', $loanId)->first();
        $lothetDocs = Loanotherdocs::select('file_id')->where('member_loan_id', $loanId)->get();
        Schema::disableForeignKeyConstraints();
        DB::beginTransaction();
        try
        {
            if (isset($maLoanDetails->id_proof_file_id) && $maLoanDetails->id_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $maLoanDetails->id_proof_file_id)
                    ->delete();
            }
            if (isset($maLoanDetails->address_proof_file_id) && $maLoanDetails->address_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $maLoanDetails->address_proof_file_id)
                    ->delete();
            }
            if (isset($maLoanDetails->income_file_id) && $maLoanDetails->income_file_id)
            {
                $loDocumentFiles = Files::where('id', $maLoanDetails->income_file_id)
                    ->delete();
            }
            if (isset($mcoaLoanDetails->id_proof_file_id) && $mcoaLoanDetails->id_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $mcoaLoanDetails->id_proof_file_id)
                    ->delete();
            }
            if (isset($mcoaLoanDetails->address_proof_file_id) && $mcoaLoanDetails->address_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $mcoaLoanDetails->address_proof_file_id)
                    ->delete();
            }
            if (isset($mcoaLoanDetails->income_file_id) && $mcoaLoanDetails->income_file_id)
            {
                $loDocumentFiles = Files::where('id', $mcoaLoanDetails->income_file_id)
                    ->delete();
            }
            if (isset($mcoaLoanDetails->more_doc_file_id) && $mcoaLoanDetails->more_doc_file_id)
            {
                $loDocumentFiles = Files::where('id', $mcoaLoanDetails->more_doc_file_id)
                    ->delete();
            }
            if (isset($mgLoanDetails->id_proof_file_id) && $mgLoanDetails->id_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $mgLoanDetails->id_proof_file_id)
                    ->delete();
            }
            if (isset($mgLoanDetails->address_proof_file_id) && $mgLoanDetails->address_proof_file_id)
            {
                $loDocumentFiles = Files::where('id', $mgLoanDetails->address_proof_file_id)
                    ->delete();
            }
            if (isset($mgLoanDetails->income_file_id) && $mgLoanDetails->income_file_id)
            {
                $loDocumentFiles = Files::where('id', $mgLoanDetails->income_file_id)
                    ->delete();
            }
            if (isset($mgLoanDetails->more_doc_file_id) && $mgLoanDetails->more_doc_file_id)
            {
                $loDocumentFiles = Files::where('id', $mgLoanDetails->more_doc_file_id)
                    ->delete();
            }
            foreach ($lothetDocs as $key => $value)
            {
                if (isset($value->file_id) && $value->file_id)
                {
                    $loDocumentFiles = Files::where('id', $value->file_id)
                        ->delete();
                }
            }
            $applicatnt = Loanapplicantdetails::where('member_loan_id', $loanId)->delete();
            $coapplicatnt = Loanscoapplicantdetails::where('member_loan_id', $loanId)->delete();
            $gaurantor = Loansguarantordetails::where('member_loan_id', $loanId)->delete();
            $liMembers = Loaninvestmentmembers::where('member_loan_id', $loanId)->delete();
            $loDocuments = Loanotherdocs::where('member_loan_id', $loanId)->delete();
            $loan = Memberloans::where('id', $loanId)->delete();
            if ($type == 3)
            {
                $loan = Grouploans::where('member_loan_id', $loanId)->delete();
            }
            $mainFolder = storage_path() . '/images/loan/document/' . $loanId;
            $this->delete_directory($mainFolder);
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        /*$mLoan = Memberloans::find($loanId);
        $mLoanData['edit_reject_request'] = 1;
        $mLoanData['rejection_description'] = $request->rejection;
        $mLoanData['status'] = 2;
        $mLoan->update($mLoanData);*/
        return back()
            ->with('success', 'Loan request has been deleted!');
    }
    function delete_directory($dir)
    {
        if (is_dir($dir))
        {
            $dir_handle = opendir($dir);
            if ($dir_handle)
            {
                while ($file = readdir($dir_handle))
                {
                    if ($file != "." && $file != "..")
                    {
                        if (!is_dir($dir . "/" . $file))
                        {
                            unlink($dir . "/" . $file);
                        }
                        else
                        {
                            $this->delete_directory($dir . '/' . $file);
                        }
                    }
                }
                closedir($dir_handle);
            }
            rmdir($dir);
            return true;
        }
        return false;
    }
    /**
     * Update Loan requests status view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function transferAmountView($id)
    {
        $data['title'] = 'Transfer Loan Amount';
        $data['load_id'] = $id;
        $data['ssbDetails'] = Memberloans::with('loanMember', 'loanSavingAccount', 'loanMemberBankDetails', 'LoanApplicants')->where('id', $id)->first();
        $data['cBanks'] = SamraddhBank::with('bankAccount')->get();
        $data['cheques'] = SamraddhCheque::select('cheque_no', 'account_id')->where('status', 1)
            ->get();
        $stateid = getBranchState($data['ssbDetails']['loanBranch']->name);
        $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
        $data['gstSetting'] = \App\Models\GstSetting::where('state_id', $data['ssbDetails']['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
        $data['headSetting'] = \App\Models\HeadSetting::where('head_id',294)->first();
        $data['headSettingfileChrage'] = \App\Models\HeadSetting::where('head_id',90)->first();
        $data['headSettingfileChrageAmount'] = 0;
        if(   $data['gstSetting'] &&  $data['headSettingfileChrage'])
        {
            $data['headSettingfileChrageAmount']    = ceil(number_format((float)($data['ssbDetails']->file_charges * $data['headSettingfileChrage']->gst_percentage )/100, 2, '.', ''));
        }
        // dd($data);
        //dd($data['ssbDetails']['LoanApplicants'][0]->id);

        $data['dob'] = Member::find($data['ssbDetails']->applicant_id);	
		$member_dob = date('Y-m-d' , strtotime($data['dob']->dob));
		$today_date = date('Y-m-d');
		$diff = abs(strtotime($today_date) - strtotime($member_dob)); 
		$years = floor($diff / (365*60*60*24));		
		$data['member_age_years'] 	=$years;            

        if($years > 60){
			$data['ssbDetails']['insurance_charge'] = 0;
		} 


        return view('templates.admin.loan.approve-loan', $data);
    }
    /**
     * Transfer group loan amount view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function transferGroupLoanAmountView($id)
    {
        $data['title'] = 'Transfer Group Loan Amount';
        $data['load_id'] = $id;
        $data['ssbDetails'] = Grouploans::with('loanMember', 'loanSavingAccount2', 'loanMemberBankDetails')->where('id', $id)->first();
        $data['cBanks'] = SamraddhBank::with('bankAccount')->get();
        $data['cheques'] = SamraddhCheque::select('cheque_no', 'account_id')->where('status', 1)
            ->get();
            $stateid = getBranchState($data['ssbDetails']['loanBranch']->name);
            $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
            $data['gstSetting'] = \App\Models\GstSetting::where('state_id', $data['ssbDetails']['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
            $data['headSetting'] = \App\Models\HeadSetting::where('head_id',294)->first();
            $data['headSettingfileChrage'] = \App\Models\HeadSetting::where('head_id',90)->first();
            $data['headSettingfileChrageAmount'] = 0;
            if(   $data['gstSetting'] &&  $data['headSettingfileChrage'])
            {
                $data['headSettingfileChrageAmount']    = ceil(number_format((float)($data['ssbDetails']->file_charges * $data['headSettingfileChrage']->gst_percentage )/100, 2, '.', ''));
            }

            $data['dob'] = Member::find($data['ssbDetails']->applicant_id);	
            $member_dob = date('Y-m-d' , strtotime($data['dob']->dob));
            $today_date = date('Y-m-d');
            $diff = abs(strtotime($today_date) - strtotime($member_dob)); 
            $years = floor($diff / (365*60*60*24));		
            if($years > 60){
                $data['ssbDetails']['insurance_charge'] = 0;
            }
            $data['member_age_years'] 	=$years;  

            
        return view('templates.admin.loan.approve-group-loan', $data);
    }
    /**
     * Update Loan requests status view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    // public function transferAmount(Request $request)
    // {
    //     $loanId = $request->loan_id;
    //     $payment_mode = $request->payment_mode;
    //     $loanDetails = Memberloans::with('loanMember','savingAccount')->select('deposite_amount','account_number','amount','associate_member_id','applicant_id','branch_id','loan_type')->where('id',$loanId)->first();
    //     if($request->ssbaccount){
    //         $ssbAccountDetails = SavingAccount::select('id','balance','branch_id','branch_code','member_id')->where('account_no',$request->ssbaccount)->first();
    //         $ssb_account_number = $request->ssbaccount;
    //     }else{
    //         $ssb_account_number = 0;
    //     }
    //     if($payment_mode == 0){
    //         if($loanDetails['savingAccount']->account_no != $ssb_account_number){
    //             return back()->with('alert', 'Applicant SSB Account Number does not exists!');
    //         }
    //     }
    //     $countSsbResult = SavingAccount::where('account_no',$ssb_account_number)->count();        if($payment_mode == 0){
    //         if($countSsbResult == 0){
    //             return back()->with('alert', 'SSB Account does not exists!');
    //         }
    //     }
    //     if($payment_mode == 1){
    //         $bank_id=$request['company_bank'];
    //         $bank_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //         $bankBla=SamraddhBankClosing::where('bank_id',$bank_id)->where('account_id',$bank_ac_id)->whereDate('entry_date','<=',date("Y-m-d", strtotime(convertDate($request['date']))))->orderby('entry_date','desc')->first();
    //         if($bankBla){
    //             if($request['total_online_amount'] > $bankBla->balance)
    //             {
    //                 return back()->with('alert', 'Sufficient amount not available in bank account!');
    //             }
    //         }
    //         else
    //         {
    //             return back()->with('alert', 'Sufficient amount not available in bank account!');
    //         }
    //     }
    //     if($loanDetails->deposite_amount > 0){
    //         return back()->with('alert', 'Loan amount already transferred to user’s SSB account!');
    //     }        /*if($countSsbResult > 0){*/
    //     DB::beginTransaction();
    //     try {
    //             $entryTime = date("H:i:s");
    //             Session::put('created_at', date("Y-m-d", strtotime(convertDate($request['date']))));
    //             $amountArraySsb = array('1'=>$loanDetails->amount);
    //             if($payment_mode == 0){
    //                 $paymentMode = 4;
    //                 $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name.' '.$ssbAccountDetails['ssbMember']->last_name;
    //                 $record1=SavingAccountTranscation::where('account_no',$ssb_account_number)->whereDate('created_at','<',date("Y-m-d", strtotime(convertDate($request['date']))))->first();
    //                 $ssb['saving_account_id']=$ssbAccountDetails->id;
    //                 $ssb['account_no']=$ssb_account_number;
    //                 if($record1){
    //                     if($request['pay_file_charge'] == 0){
    //                         $ssb['opening_balance']=($loanDetails->amount-$request['file_charge'])+$record1->opening_balance;
    //                         $ssb['deposit']=$loanDetails->amount-$request['file_charge'];
    //                     }else{
    //                         $ssb['opening_balance']=$loanDetails->amount+$record1->opening_balance;
    //                         $ssb['deposit']=$loanDetails->amount;
    //                     }
    //                 }else{
    //                     if($request['pay_file_charge'] == 0){
    //                         $ssb['opening_balance']=($loanDetails->amount-$request['file_charge']);
    //                         $ssb['deposit']=$loanDetails->amount-$request['file_charge'];
    //                     }else{
    //                         $ssb['opening_balance']=$loanDetails->amount;
    //                         $ssb['deposit']=$loanDetails->amount;
    //                     }
    //                 }
    //                 $ssb['branch_id']=$loanDetails->branch_id;
    //                 $ssb['type']=6;
    //                 $ssb['withdrawal']=0;
    //                 $ssb['description']='Transferred loan amount to SSB';
    //                 $ssb['currency_code']='INR';
    //                 $ssb['payment_type']='CR';
    //                 $ssb['payment_mode']=3;
    //                 $ssb['created_at']=date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //                 $saTranctionId = $ssbAccountTran->id;
    //                 if($request['pay_file_charge'] == 0){
    //                     $balance_update=($loanDetails->amount-$request['file_charge'])+$ssbAccountDetails->balance;
    //                 }else{
    //                     $balance_update=$loanDetails->amount+$ssbAccountDetails->balance;
    //                 }
    //                 $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //                 $ssbBalance->balance=$balance_update;
    //                 $ssbBalance->save();
    //                 $record2=SavingAccountTranscation::where('account_no',$ssb_account_number)->whereDate('created_at','>',date("Y-m-d", strtotime(convertDate($request['date']))))->get();
    //                 foreach ($record2 as $key => $value) {
    //                     $nsResult = SavingAccountTranscation::find($value->id);
    //                     if($request['pay_file_charge'] == 0){
    //                         $nsResult['opening_balance']=($loanDetails->amount-$request['file_charge'])+$value->opening_balance;
    //                     }else{
    //                         $nsResult['opening_balance']=$loanDetails->amount+$value->opening_balance;
    //                     }
    //                     $nsResult['updated_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['date'])));
    //                     $nsResult->save();
    //                 }
    //                 $data['saving_account_transaction_id']=$saTranctionId;
    //                 $data['loan_id']=$loanId;
    //                 $data['created_at']=date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $satRef = TransactionReferences::create($data);
    //                 $satRefId = $satRef->id;
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,1,$loanId,$ssbAccountDetails->member_id,$ssbAccountDetails->branch_id,$ssbAccountDetails->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name=NULL,$ssbAccountDetails->member_id,$ssb_account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $description = 'Loan amount to ssb';
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$loanId,$loanDetails->associate_member_id,$ssbAccountDetails->member_id,$loanDetails->amount+$ssbAccountDetails->balance,$loanDetails->amount,$withdrawal=0,$description,$ssb_account_number,$ssbAccountDetails->branch_id,$ssbAccountDetails->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name=NULL,$ssbAccountDetails->member_id,$ssb_account_number,0,NULL,NULL,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /*$chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loanDetails->amount);
    //                 $memberTransaction = CommanController::createMemberTransaction($dayBookRef,4,48,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loanDetails->amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             }elseif($payment_mode == 1){
    //                 $satRefId = NULL;
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 3;
    //                 }
    //                 $saTranctionId = '';
    //             }elseif($payment_mode == 2){
    //                 $satRefId = NULL;
    //                 $paymentMode = 2;
    //                 $saTranctionId = '';
    //             }
    //             $amount_deposit_by_name = $loanDetails['loanMember']->first_name.' '.$loanDetails['loanMember']->last_name;
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,3,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,3,$loanId,0,$loanDetails->applicant_id,$loanDetails->amount,$loanDetails->amount,0,'Loan EMI deposite',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //             /************* Head Implement ****************/
    //             if($payment_mode == 0){
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 if($loanDetails->loan_type == '1'){
    //                     $loan_head_id = 64;
    //                 }elseif($loanDetails->loan_type == '2'){
    //                     $loan_head_id = 65;
    //                 }elseif($loanDetails->loan_type == '3'){
    //                     $loan_head_id = 66;
    //                 }elseif($loanDetails->loan_type == '4'){
    //                     $loan_head_id = 67;
    //                 }
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$saTranctionId,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,$loan_head_id,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL,$cheque_type=NULL,$cheque_id=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_from_id=NULL,$cheque_bank_ac_from_id=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_from_id=NULL,$transction_bank_from_ac_id=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch=NULL,$transction_bank_to_ifsc=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,56,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL,$cheque_type=NULL,$cheque_id=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_from_id=NULL,$cheque_bank_ac_from_id=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_from_id=NULL,$transction_bank_from_ac_id=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch=NULL,$transction_bank_to_ifsc=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),1,Auth::user()->id);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$saTranctionId,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             }elseif($payment_mode == 1){
    //                 if($loanDetails->loan_type == '1'){
    //                     $loan_head_id = 64;
    //                 }elseif($loanDetails->loan_type == '2'){
    //                     $loan_head_id = 65;
    //                 }elseif($loanDetails->loan_type == '3'){
    //                     $loan_head_id = 66;
    //                 }elseif($loanDetails->loan_type == '4'){
    //                     $loan_head_id = 67;
    //                 }
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $payment_type = 1;
    //                     $amount_from_id = $request['company_bank'];
    //                     $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
    //                     $cheque_type = 1;
    //                     $cheque_id = getSamraddhChequeData($request['cheque_id'])->id;
    //                     $cheque_no = $request['cheque_id'];
    //                     $cheque_date = getSamraddhChequeData($request['cheque_id'])->cheque_create_date;
    //                     $cheque_bank_from = $request['company_bank'];
    //                     $cheque_bank_ac_from = $request['company_bank_account_number'];
    //                     $cheque_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $cheque_bank_ac_from_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $cheque_bank_branch_from=NULL;
    //                     $cheque_bank_to=NULL;
    //                     $cheque_bank_ac_to=$request['customer_bank_account_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_no = NULL;
    //                     $transction_bank_from = $request['company_bank'];
    //                     $transction_bank_ac_from = $request['company_bank_account_number'];
    //                     $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = $request['customer_bank_account_number'];
    //                     $transction_bank_to_name = $request['customer_bank_name'];
    //                     $transction_bank_to_ac_no = $request['customer_bank_account_number'];
    //                     $transction_bank_to_branch = $request['customer_branch_name'];
    //                     $transction_bank_to_ifsc = $request['customer_ifsc_code'];
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $payment_type = 2;
    //                     $amount_from_id = $request['company_bank'];
    //                     $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
    //                     $cheque_type = NULL;
    //                     $cheque_id = NULL;
    //                     $cheque_no = NULL;
    //                     $cheque_date = NULL;
    //                     $cheque_bank_from = NULL;
    //                     $cheque_bank_ac_from = NULL;
    //                     $cheque_bank_ac_from_id = NULL;
    //                     $cheque_bank_ifsc_from = NULL;
    //                     $cheque_bank_branch_from = NULL;
    //                     $cheque_bank_to = NULL;
    //                     $cheque_bank_ac_to = NULL;
    //                     $transction_no = $request['utr_transaction_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_bank_from = $request['company_bank'];
    //                     $transction_bank_ac_from = $request['company_bank_account_number'];
    //                     $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = $request['customer_bank_account_number'];
    //                     $transction_bank_to_name = $request['customer_bank_name'];
    //                     $transction_bank_to_ac_no = $request['customer_bank_account_number'];
    //                     $transction_bank_to_branch = $request['customer_branch_name'];
    //                     $transction_bank_to_ifsc = $request['customer_ifsc_code'];
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,$loan_head_id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type=1,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,($loan_amount+$request['rtgs_neft_charge']),($loan_amount+$request['rtgs_neft_charge']),($loan_amount+$request['rtgs_neft_charge']),'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type=1,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],'Payment transfer for Loan Sanction','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 if($request['bank_transfer_mode'] == 1){
    //                     $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,92,5,522,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],'NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type=NULL,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                     /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,4,86,92,$head4=NULL,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],'NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                     $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount,$request['company_bank'],getSamraddhBankAccount($request['company_bank_account_number'])->id,$request['date'],$request['rtgs_neft_charge'],1);
    //                 }
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id);
    //                 $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($dayBookRef,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],'Payment transfer for Loan Sanction','Cash A/c Dr '.($loan_amount+$request['rtgs_neft_charge']).'','NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL);
    //                 $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount,$request['company_bank'],getSamraddhBankAccount($request['company_bank_account_number'])->id,$request['date'],0,1) ;
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     SamraddhCheque::where('cheque_no',$request['cheque_id'])->update(['status' => 3,'is_use'=>1]);
    //                     SamraddhChequeIssue::create([
    //                         'cheque_id' => getSamraddhChequeData($request['cheque_id'])->id,
    //                         'type' =>3,
    //                         'sub_type' =>33,
    //                         'type_id' =>$loanId,
    //                         'cheque_issue_date' => date("Y-m-d", strtotime(convertDate($request['date']))),
    //                         'status' => 1,
    //                     ]);
    //                 }
    //             }elseif($payment_mode == 2){
    //                 $v_no = NULL;
    //                 if($loanDetails->loan_type == '1'){
    //                     $loan_head_id = 64;
    //                 }elseif($loanDetails->loan_type == '2'){
    //                     $loan_head_id = 65;
    //                 }elseif($loanDetails->loan_type == '3'){
    //                     $loan_head_id = 66;
    //                 }elseif($loanDetails->loan_type == '4'){
    //                     $loan_head_id = 67;
    //                 }
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchName($loanDetails->branch_id)->name,$v_no,NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,$loan_head_id,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails=NULL,$createDayBook,$ssb_account_tran_id_from=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,28,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails=NULL,$createDayBook,$ssb_account_tran_id_from=NULL);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $updateBranchCash = $this->checkCreateBranchCashDR($loanDetails->branch_id,date("Y-m-d H:i:s", strtotime(convertDate($request['date']))),$loan_amount,0);
    //                 $updateBranchClosingCash = $this->checkCreateBranchClosingDR($loanDetails->branch_id,date("Y-m-d H:i:s", strtotime(convertDate($request['date']))),$loan_amount,0);
    //             }
    //             /************* Head Implement ****************/
    //             if($request['pay_file_charge'] != '' && $request['pay_file_charge'] == 0){
    //                 $mlResult = Memberloans::find($loanId);
    //                 $lData['deposite_amount'] = $loanDetails->amount-$request['file_charge'];
    //                 $lData['due_amount'] = $loanDetails->amount;
    //                 $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 if($loanDetails->emi_option == 1){
    //                     $lData['closing_date'] = date('Y-m-d', strtotime("+".$loanDetails->emi_period." months", strtotime($lData['approve_date'])));
    //                 }elseif($loanDetails->emi_option == 2){
    //                     $days = $loanDetails->emi_period*7;
    //                     $start_date = $lData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $lData['closing_date'] = date('Y-m-d', $date);
    //                 }elseif($loanDetails->emi_option == 3){
    //                     $days = $loanDetails->emi_period;
    //                     $start_date = $lData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $lData['closing_date'] = date('Y-m-d', $date);
    //                 }
    //                 $lData['status'] = 4;
    //                 $mlResult->update($lData);
    //                 $fileamountArraySsb = array('1'=>$request['file_charge']);
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,6,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,5,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,6,$loanId,0,$loanDetails->applicant_id,$request['file_charge'],$request['file_charge'],0,'Loan File Charges',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,5,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /************* Head Implement ****************/
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 /*if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$request['file_charge'];
    //                 }*/
    //                 $loan_amount=$request['file_charge'];
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,90,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,''.$loanDetails->account_number.' file charge','DR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /************* Head Implement ****************/
    //             }elseif($request['pay_file_charge'] != '' && $request['pay_file_charge'] == 1){
    //                 $mlResult = Memberloans::find($loanId);
    //                 $lData['deposite_amount'] = $loanDetails->amount;
    //                 $lData['due_amount'] = $loanDetails->amount;
    //                 $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 if($loanDetails->emi_option == 1){
    //                     $lData['closing_date'] = date('Y-m-d', strtotime("+".$loanDetails->emi_period." months", strtotime($lData['approve_date'])));
    //                 }elseif($loanDetails->emi_option == 2){
    //                     $days = $loanDetails->emi_period*7;
    //                     $start_date = $lData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $lData['closing_date'] = date('Y-m-d', $date);
    //                 }elseif($loanDetails->emi_option == 3){
    //                     $days = $loanDetails->emi_period;
    //                     $start_date = $lData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $lData['closing_date'] = date('Y-m-d', $date);
    //                 }
    //                 $lData['status'] = 4;
    //                 $mlResult->update($lData);
    //                 $fileamountArraySsb = array('1'=>$request['file_charge']);
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,6,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,0,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,6,$loanId,0,$loanDetails->applicant_id,$request['file_charge'],$request['file_charge'],0,'Loan File Charges',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,0,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /************* Head Implement ****************/
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 $loan_amount=$request['file_charge'];
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,90,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,28,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
    //                 /*$cashTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,''.$loanDetails->account_number.' file charge','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $backDateloanChargeBalance = CommanController::updateBackDateloanChargeBalance($loan_amount,$loanDetails->branch_id,$request['date']);
    //                 /************* Head Implement ****************/
    //             }else{
    //                 $mlResult = Memberloans::find($loanId);
    //                 $lData['deposite_amount'] = $loanDetails->amount;
    //                 $lData['due_amount'] = $loanDetails->amount;
    //                 $lData['status'] = 4;
    //                 $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $mlResult->update($lData);
    //             }
    //     DB::commit();
    //     } catch (\Exception $ex) {
    //         DB::rollback();
    //         return back()->with('alert', $ex->getMessage());
    //     }
    //     return redirect()->route('admin.loan.request')->with('success', 'Loan amount has been successfully transferred!');
    //     /*}else{
    //         return back()->with('alert', 'SSB Account does not exists!');
    //     }*/
    // }
     public function transferAmount(Request $request)
    {
        $loanId = $request->loan_id;
        $payment_mode = $request->payment_mode;
	   $insurance_amount = $request->insurance_amount;
        $loanDetails = Memberloans::with('loanMember', 'savingAccount','loanSavingAccount')->select('deposite_amount', 'account_number', 'amount', 'associate_member_id', 'applicant_id', 'branch_id', 'loan_type','emi_option','emi_amount')
            ->where('id', $loanId)->first();
        if($loanDetails->emi_option == 1)
        {
            $Mode = 'Monthly';
        }
        elseif($loanDetails->emi_option == 2)
        {
            $Mode = 'Weekly';
        }
        elseif($loanDetails->emi_option == 3)
        {
            $Mode = 'Daily';
        }
        $stateid = getBranchState($loanDetails['loanBranch']->name);
        $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
        $getHeadSetting = \App\Models\HeadSetting::where('head_id',294)->first();
        $getHeadSettingFileCHrage = \App\Models\HeadSetting::where('head_id',90)->first();
        $getGstSetting = \App\Models\GstSetting::where('state_id',$loanDetails['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
        $getGstSettingno = \App\Models\GstSetting::select('id','gst_no')->where('state_id',$loanDetails['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->first();
        $gstAmount = 0;
        $gstAmountFileChrage = 0;
        //Gst Insuramce
        if(isset($getHeadSetting->gst_percentage) &&  $getGstSetting )
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmount =  ceil(($insurance_amount*$getHeadSetting->gst_percentage)/100)/2;
                $cgstHead = 171;
                $sgstHead = 172;
                $IntraState = true;
            }
            else{
                $gstAmount =  ceil($insurance_amount*$getHeadSetting->gst_percentage)/100;
                $cgstHead = 170;
                $IntraState = false;
            }
        }
        if(isset($getHeadSettingFileCHrage->gst_percentage) &&  $getGstSetting )
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmountFileChrage =  ceil(($request['file_charge']*$getHeadSettingFileCHrage->gst_percentage)/100)/2;
                $cgstHead = 171;
                $sgstHead = 172;
                $IntraStateFile = true;
            }
            else{
                $gstAmountFileChrage =  ceil($request['file_charge']*$getHeadSettingFileCHrage->gst_percentage)/100;
                $cgstHead = 170;
                $IntraStateFile = false;
            }
        }
       //Gst End
        if ($request->ssbaccount) //SSB
        {
            $ssbAccountDetails = SavingAccount::select('id', 'balance', 'branch_id', 'branch_code', 'member_id')->where('account_no', $request->ssbaccount)
                ->first();
            $ssb_account_number = $request->ssbaccount;
        }
        else
        {
            $ssb_account_number = 0;
        }
        if ($payment_mode == 0)//SSb
        {
            if ($loanDetails['loanSavingAccount']->account_no != $ssb_account_number)
            {
                return back()->with('alert', 'Applicant SSB Account Number does not exists!');
            }
        }
        $countSsbResult = SavingAccount::where('account_no', $ssb_account_number)->count();
        if ($payment_mode == 0)
        {
            if ($countSsbResult == 0)
            {
                return back()->with('alert', 'SSB Account does not exists!');
            }
        }
        if ($payment_mode == 1)//Bank
        {
            $bank_id = $request['company_bank'];
            $bank_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
            $bankBla = SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $bank_ac_id)->whereDate('entry_date', '<=', date("Y-m-d", strtotime(convertDate($request['date']))))->orderby('entry_date', 'desc')
                ->first();
            if ($bankBla)
            {
                // Changes By Anup SIr = 01-09-2022  && $bank_id != 2 (Aman jain )
            //https://pm.w3care.com/projects/1892/tasks/45618
                if ($request['total_online_amount'] > $bankBla->balance && $bank_id != 2)
                {
                    return back()
                        ->with('alert', 'Sufficient amount not available in bank account!');
                }
            }
            else
            {
                return back()
                    ->with('alert', 'Sufficient amount not available in bank account!');
            }
        }
        if ($loanDetails->deposite_amount > 0)
        {
            return back()
                ->with('alert', 'Loan amount already transferred to user’s SSB account!');
        } /*if($countSsbResult > 0){*/
        DB::beginTransaction();
        try
        {
            $entryTime = date("H:i:s");
            Session::put('created_at', date("Y-m-d", strtotime(convertDate($request['date']))));
            $amountArraySsb = array(
                '1' => $loanDetails->amount
            );
            if ($payment_mode == 0)//ssb
            {
                $paymentMode = 4;
                $transferMode = 'SSB';
                $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name . ' ' . $ssbAccountDetails['ssbMember']->last_name;
                $transDate = date("Y-m-d ".$entryTime."",strtotime(convertDate($request['date'])));
                $record1 = SavingAccountTranscation::where('account_no', $ssb_account_number)->where('created_at','<=',$transDate)->where('is_deleted',0)->orderby('id','desc')->first();
                $ssb['saving_account_id'] = $ssbAccountDetails->id;
                $ssb['account_no'] = $ssb_account_number;
                $transferAccount = $ssb_account_number;
                if ($record1)
                {
                    if ($request['pay_file_charge'] == 0)
                    {
                        $ssb['opening_balance'] = ($loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount) + $record1->opening_balance;
                        $ssb['deposit'] = $loanDetails->amount - $request['file_charge']- $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    }
                    else
                    {
                        $ssb['opening_balance'] = $loanDetails->amount + $record1->opening_balance;
                        $ssb['deposit'] = $loanDetails->amount;
                    }
                }
                else
                {
                    if ($request['pay_file_charge'] == 0)
                    {
                        $ssb['opening_balance'] = ($loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage);
                        $ssb['deposit'] = $loanDetails->amount - $request['file_charge'] - $insurance_amount -$gstAmount - $gstAmountFileChrage;
                    }
                    else
                    {
                        $ssb['opening_balance'] = $loanDetails->amount;
                        $ssb['deposit'] = $loanDetails->amount;
                    }
                }
                $ssb['branch_id'] = $loanDetails->branch_id;
                $ssb['type'] = 6;
                $ssb['withdrawal'] = 0;
                $ssb['description'] = 'Transferred loan amount to SSB';
                $ssb['currency_code'] = 'INR';
                $ssb['payment_type'] = 'CR';
                $ssb['payment_mode'] = 3;
                $ssb['created_at'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $ssbAccountTran = SavingAccountTranscation::create($ssb);
                $saTranctionId = $ssbAccountTran->id;
                if ($request['pay_file_charge'] == 0) //From Loan Amount File Charge
                {
                    $balance_update = ($loanDetails->amount - $request['file_charge'] - $insurance_amount) + $ssbAccountDetails->balance -$gstAmount - $gstAmountFileChrage;
                }
                else
                {
                    $balance_update = $loanDetails->amount + $ssbAccountDetails->balance;
                }
                $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
                $ssbBalance->balance = $balance_update;
                $ssbBalance->save();
                $record2 = SavingAccountTranscation::where('account_no', $ssb_account_number)->whereDate('created_at', '>', date("Y-m-d", strtotime(convertDate($request['date']))))->get();
                foreach ($record2 as $key => $value)
                {
                    $nsResult = SavingAccountTranscation::find($value->id);
                    if ($request['pay_file_charge'] == 0) //From Loan Amount File Charge
                    {
                        $nsResult['opening_balance'] = ($loanDetails->amount - $request['file_charge'] -$insurance_amount -$gstAmount - $gstAmountFileChrage) + $value->opening_balance;
                    }
                    else
                    {
                        $nsResult['opening_balance'] = $loanDetails->amount + $value->opening_balance;
                    }
                    $nsResult['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['date'])));
                    $nsResult->save();
                }
                $data['saving_account_transaction_id'] = $saTranctionId;
                $data['loan_id'] = $loanId;
                $data['created_at'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $satRef = TransactionReferences::create($data);
                $satRefId = $satRef->id;
                $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $loanId, $ssbAccountDetails->member_id, $ssbAccountDetails->branch_id, $ssbAccountDetails->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name = NULL, $ssbAccountDetails->member_id, $ssb_account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $description = 'Loan amount to ssb';
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $loanId, $loanDetails->associate_member_id, $ssbAccountDetails->member_id, $loanDetails->amount + $ssbAccountDetails->balance, $loanDetails->amount, $withdrawal = 0, $description, $ssb_account_number, $ssbAccountDetails->branch_id, $ssbAccountDetails->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name = NULL, $ssbAccountDetails->member_id, $ssb_account_number, 0, NULL, NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                /*$chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    $v_no = "";
                    for ($i = 0; $i < 10; $i++) {
                        $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
                    }
                    $dayBookRef = CommanController::createBranchDayBookReference($loanDetails->amount);
                    $memberTransaction = CommanController::createMemberTransaction($dayBookRef,4,48,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loanDetails->amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
            }
            elseif ($payment_mode == 1) //Bank Payment mode
            {
                $satRefId = NULL;
                $transferMode = 'BANK';
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $paymentMode = 1;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $paymentMode = 3;
                }
                $saTranctionId = '';
            }
            elseif ($payment_mode == 2) // Cash payment Mode
            {
                $satRefId = NULL;
                $paymentMode = 2;
                $saTranctionId = '';
            }
            $amount_deposit_by_name = $loanDetails['loanMember']->first_name . ' ' . $loanDetails['loanMember']->last_name;
             //Create  Transaaction for Loan
            $ssbCreateTran = CommanController::createTransaction($satRefId, 3, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
             //Create Daybook Transaaction for Loan(3)
            $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 3, $loanId, 0, $loanDetails->applicant_id, $loanDetails->amount, $loanDetails->amount, 0, 'Loan Amount Sanction', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
            /************* Head Implement ****************/
            // dd($payment_mode);
            if ($payment_mode == 0) //SSb
            {
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                if ($loanDetails->loan_type == '1')
                {
                    $loan_head_id = 64; //Personal Loan Head
                }
                elseif ($loanDetails->loan_type == '2')
                {
                    $loan_head_id = 65; //Staff Loan
                }
                elseif ($loanDetails->loan_type == '3')
                {
                    $loan_head_id = 66; // Group Loan
                }
                elseif ($loanDetails->loan_type == '4')
                {
                    $loan_head_id = 67; // Loan Against Investment
                }
                //............................. Optimization code...........................//
                if ($request['pay_file_charge'] == 0)
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge']- $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                //............................. Optimization code...........................//
               //Create Branch Daybook Reference Transaction For SSb and generate Daybook Id
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                //Create BranchDaybook Transaction For SSB
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 51, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $totalLoanAmount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'DR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $saTranctionId, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                //............................. Optimization code...........................//
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
                //............................. Optimization code...........................//
                //Create AllHead Transaction For SSB in loan Head DR Type
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $loan_head_id, 5, 51, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $ssbAccountDetails->id, $saTranctionId, $ssb_account_tran_id_from = NULL, $cheque_type = NULL, $cheque_id = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_from_id = NULL, $cheque_bank_ac_from_id = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_from_id = NULL, $transction_bank_from_ac_id = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch = NULL, $transction_bank_to_ifsc = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , 1, Auth::user()->id);
                //............................. Optimization code...........................//
                //Create AllHead Transaction For SSB Head  CR Type
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 56, 5, 51, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $ssbAccountDetails->id, $saTranctionId, $ssb_account_tran_id_from = NULL, $cheque_type = NULL, $cheque_id = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_from_id = NULL, $cheque_bank_ac_from_id = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_from_id = NULL, $transction_bank_from_ac_id = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch = NULL, $transction_bank_to_ifsc = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , 1, Auth::user()->id);
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,51,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
                 //Create MemberTransaction Transaction For SSB
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 51, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $saTranctionId, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            }
            //Bank Transaction
            elseif ($payment_mode == 1) //Bank
            {
                if ($loanDetails->loan_type == '1')
                {
                    $loan_head_id = 64;  //Personal Loan Head
                }
                elseif ($loanDetails->loan_type == '2')
                {
                    $loan_head_id = 65;  //Staff Loan Head
                }
                elseif ($loanDetails->loan_type == '3')
                {
                    $loan_head_id = 66; //Group Loan Head
                }
                elseif ($loanDetails->loan_type == '4')
                {
                    $loan_head_id = 67; //Loan Against Investment Loan Head
                }
                if ($request['pay_file_charge'] == 0) // loan
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge']- $insurance_amount -$gstAmount - $gstAmountFileChrage;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '') //Cheque Mode
                {
                    $payment_type = 1;
                    $amount_from_id = $request['company_bank'];
                    $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
                    $cheque_type = 1;
                    $cheque_id = getSamraddhChequeData($request['cheque_id'])->id;
                    $cheque_no = $request['cheque_id'];
                    $cheque_date = getSamraddhChequeData($request['cheque_id'])->cheque_create_date;
                    $cheque_bank_from = $request['company_bank'];
                    $cheque_bank_ac_from = $request['company_bank_account_number'];
                    $cheque_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $cheque_bank_ac_from_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = $request['customer_bank_account_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_no = NULL;
                    $transction_bank_from = $request['company_bank'];
                    $transction_bank_ac_from = $request['company_bank_account_number'];
                    $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = NULL;
                    $transction_bank_ac_to = $request['customer_bank_account_number'];
                    $transction_bank_to_name = $request['customer_bank_name'];
                    $transction_bank_to_ac_no = $request['customer_bank_account_number'];
                    $transction_bank_to_branch = $request['customer_branch_name'];
                    $transction_bank_to_ifsc = $request['customer_ifsc_code'];
                    $transferAccount = $request['customer_bank_account_number'];
                }
                elseif ($request['bank_transfer_mode'] == 1) // Online Mode
                {
                    $payment_type = 2;
                    $amount_from_id = $request['company_bank'];
                    $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
                    $cheque_type = NULL;
                    $cheque_id = NULL;
                    $cheque_no = NULL;
                    $cheque_date = NULL;
                    $cheque_bank_from = NULL;
                    $cheque_bank_ac_from = NULL;
                    $cheque_bank_ac_from_id = NULL;
                    $cheque_bank_ifsc_from = NULL;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = NULL;
                    $transction_no = $request['utr_transaction_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_bank_from = $request['company_bank'];
                    $transction_bank_ac_from = $request['company_bank_account_number'];
                    $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = NULL;
                    $transction_bank_ac_to = $request['customer_bank_account_number'];
                    $transction_bank_to_name = $request['customer_bank_name'];
                    $transction_bank_to_ac_no = $request['customer_bank_account_number'];
                    $transction_bank_to_branch = $request['customer_branch_name'];
                    $transction_bank_to_ifsc = $request['customer_ifsc_code'];
                    $transferAccount = $request['customer_bank_account_number'];
                }
                //Create BranchDaybook Transaction and generate Daybook id
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                 //Create Branch Daybook Transaction for bank mode
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Cr ' . $totalLoanAmount . '', 'To Bank A/C Dr ' . $loanDetails->account_number . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id);
                //............................. Optimization code...........................//
                /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                //............................. Optimization code...........................//
                  //Create AllHead Transaction for bank mode and  Head
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, $loan_head_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type = 1, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                //............................. Optimization code...........................//
                //Create AllHead Transaction for bank mode and  Bank Head
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, ($loan_amount + $request['rtgs_neft_charge']) , ($loan_amount + $request['rtgs_neft_charge']) , ($loan_amount + $request['rtgs_neft_charge']) , 'Payment transfer for Loan Sanction', 'CR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type = 1, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],'Payment transfer for Loan Sanction','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                if ($request['bank_transfer_mode'] == 1) //Online
                {
                    if( $request['rtgs_neft_charge'] > 0) //Rtgs Charge
                    {
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 92, 5, 522, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], 'NEFT Charge A/c Dr ' . $request['rtgs_neft_charge'] . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type = NULL, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                        //............................. Optimization code...........................//
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], 'NEFT Charge', 'Bank Charge To ' . $loanDetails->account_number . ' A/C Dr ' . $totalLoanAmount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id);
                    }
                    //............................. Optimization code...........................//
                    /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,4,86,92,$head4=NULL,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],'NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount, $request['company_bank'], getSamraddhBankAccount($request['company_bank_account_number'])->id, $request['date'], $request['rtgs_neft_charge'], 1);
                }
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id);
                $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($dayBookRef, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $loan_amount + $request['rtgs_neft_charge'], $loan_amount + $request['rtgs_neft_charge'], $loan_amount + $request['rtgs_neft_charge'], 'Payment transfer for Loan Sanction', 'Cash A/c Dr ' . ($loan_amount + $request['rtgs_neft_charge']) . '', 'NEFT Charge A/c Dr ' . $request['rtgs_neft_charge'] . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $amount_from_name, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $created_at = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount, $request['company_bank'], getSamraddhBankAccount($request['company_bank_account_number'])->id, $request['date'], 0, 1);
                 //Create Cheque
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    SamraddhCheque::where('cheque_no', $request['cheque_id']);
                    SamraddhChequeIssue::create([
                    'cheque_id' => getSamraddhChequeData($request['cheque_id'])->id,
                    'type' => 3,
                    'sub_type' => 33,
                    'type_id' => $loanId,
                    'cheque_issue_date' => date("Y-m-d", strtotime(convertDate($request['date']))) ,
                    'status' => 1,
                    ]);
                }
            }
              //Cash Transaction
            elseif ($payment_mode == 2)
            {
                $v_no = NULL;
                if ($loanDetails->loan_type == '1')
                {
                    $loan_head_id = 64;
                }
                elseif ($loanDetails->loan_type == '2')
                {
                    $loan_head_id = 65;
                }
                elseif ($loanDetails->loan_type == '3')
                {
                    $loan_head_id = 66;
                }
                elseif ($loanDetails->loan_type == '4')
                {
                    $loan_head_id = 67;
                }
                if ($request['pay_file_charge'] == 0)
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge']- $insurance_amount -$gstAmountFileChrage - $gstAmount;
                    $totalLoanAmount = $loanDetails->amount ;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                }
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $totalLoanAmount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $v_no, NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                //............................. Optimization code...........................//
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $loan_head_id, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                //............................. Optimization code...........................//
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails=NULL,$createDayBook,$ssb_account_tran_id_from=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails=NULL,$createDayBook,$ssb_account_tran_id_from=NULL);*/
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 51, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $updateBranchCash = $this->checkCreateBranchCashDR($loanDetails->branch_id, date("Y-m-d H:i:s", strtotime(convertDate($request['date']))) , $loan_amount, 0);
                $updateBranchClosingCash = $this->checkCreateBranchClosingDR($loanDetails->branch_id, date("Y-m-d H:i:s", strtotime(convertDate($request['date']))) , $loan_amount, 0);
            }
            /************* Head Implement ****************/
             //File Charge Transaction loan
            if ($request['pay_file_charge'] != '' && $request['pay_file_charge'] == 0)
            {
                $mlResult = Memberloans::find($loanId);
                $lData['deposite_amount'] = $loanDetails->amount - $request['file_charge'];
                $lData['due_amount'] = $loanDetails->amount;
                $lData['insurance_charge'] = $insurance_amount;
                $lData['file_charge_type'] = '1';
                $lData['transfer_amount'] = $loan_amount;
                $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                if ($loanDetails->emi_option == 1)
                {
                    $lData['closing_date'] = date('Y-m-d', strtotime("+" . $loanDetails->emi_period . " months", strtotime($lData['approve_date'])));
                }
                elseif ($loanDetails->emi_option == 2)
                {
                    $days = $loanDetails->emi_period * 7;
                    $start_date = $lData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $lData['closing_date'] = date('Y-m-d', $date);
                }
                elseif ($loanDetails->emi_option == 3)
                {
                    $days = $loanDetails->emi_period;
                    $start_date = $lData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $lData['closing_date'] = date('Y-m-d', $date);
                }
                $lData['status'] = 4;
                $mlResult->update($lData);
                $fileamountArraySsb = array(
                    '1' => $request['file_charge']
                );
                $ssbCreateTran = CommanController::createTransaction($satRefId, 6, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 6, $loanId, 0, $loanDetails->applicant_id, $request['file_charge'], $request['file_charge'], 0, 'Loan File Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 24, $loanId, 0, $loanDetails->applicant_id, $request['insurance_amount'], $request['insurance_amount'], 0, 'Loan Insurance Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                /************* Head Implement ****************/
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                /*if($request['pay_file_charge'] == 0){
                        $loan_amount=$loanDetails->amount-$request['file_charge'];
                    }else{
                        $loan_amount=$request['file_charge'];
                    }*/
                $loan_amount = $request['file_charge'];
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount + $insurance_amount);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 90, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 294, 5,525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                 //Gst Charge Foir Branch DayBook
                 if($gstAmount > 0 )
                 {
                     $mlResult = Memberloans::find($loanId);
                     if($IntraState)
                     {
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'CGST CHARGE ' . $loanDetails->account_number . '','CGST CHARGE ' . $loanDetails->account_number . '', 'CGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'SGST CHARGE ' . $loanDetails->account_number . '','SGST CHARGE ' . $loanDetails->account_number . '', 'SGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . ' CGST charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . ' SGST charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' CGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' SGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 5, 'Loan CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 5, 'Loan SGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . ' Cgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . ' Sgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $lData['insurance_cgst'] = $gstAmount;
                         $lData['insurance_sgst'] = $gstAmount;
                     }
                     else{
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'IGST CHARGE ' . $loanDetails->account_number . '','IGST CHARGE ' . $loanDetails->account_number . '', 'IGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'IGST charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' IGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 25, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 5, 'Loan IGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                         $lData['insurance_charge_igst'] = $gstAmount;
                     }
                         $mlResult->update($lData);
                         $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$insurance_amount,$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState== true ? $gstAmount : 0),($IntraState == true) ? $insurance_amount + $gstAmount + $gstAmount :$insurance_amount + $gstAmount,294,$request['date'],'IC294',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                 }
                 if($gstAmountFileChrage > 0 )
                 {
                     $mlResult = Memberloans::find($loanId);
                     if($IntraStateFile)
                     {
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'File Charge CGST ' . $loanDetails->account_number . '','File Charge CGST  ' . $loanDetails->account_number . '', 'File Charge CGST ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'File Charge SGST ' . $loanDetails->account_number . '','File Charge SGST ' . $loanDetails->account_number . '', 'File Charge SGST' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File Charge CGST ', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File Charge SGST ', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File Charge SGST', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . ' SGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 28, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 5, 'Loan File Chrage CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 29, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 5, 'Loan File Chrage CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'Loan File Charge Cgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'Loan File Charge Sgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $lData['filecharge_sgst'] = $gstAmountFileChrage;
                         $lData['filecharge_cgst'] = $gstAmountFileChrage;
                     }
                     else{
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 532, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'IGST CHARGE ' . $loanDetails->account_number . '','IGST CHARGE ' . $loanDetails->account_number . '', 'File Charge IGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File IGST charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File IGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 30, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 5, 'Loan File Charge  IGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        //  $lData['filecharge_igst'] = $gstAmountFileChrage;
                        $lData['filecharge_igst'] = $gstAmountFileChrage;
                     }
                     $mlResult->update($lData);
                     $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$request['file_charge'],$getHeadSettingFileCHrage->gst_percentage,($IntraStateFile == false ? $gstAmountFileChrage : 0 ) ,($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage+ $request['file_charge'] + $gstAmountFileChrage  : $request['file_charge'] + $gstAmountFileChrage),90,$request['date'],'FC90',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                 }
                /************* Head Implement ****************/
            }
            elseif ($request['pay_file_charge'] != '' && $request['pay_file_charge'] == 1)
            {
                $mlResult = Memberloans::find($loanId);
                $lData['deposite_amount'] = $loanDetails->amount;
                $lData['due_amount'] = $loanDetails->amount;
                $lData['file_charge_type'] = '0';
                $lData['transfer_amount'] = $loan_amount;
                $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                if ($loanDetails->emi_option == 1)
                {
                    $lData['closing_date'] = date('Y-m-d', strtotime("+" . $loanDetails->emi_period . " months", strtotime($lData['approve_date'])));
                }
                elseif ($loanDetails->emi_option == 2)
                {
                    $days = $loanDetails->emi_period * 7;
                    $start_date = $lData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $lData['closing_date'] = date('Y-m-d', $date);
                }
                elseif ($loanDetails->emi_option == 3)
                {
                    $days = $loanDetails->emi_period;
                    $start_date = $lData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $lData['closing_date'] = date('Y-m-d', $date);
                }
                $lData['status'] = 4;
                $lData['insurance_charge'] = $insurance_amount;
                $mlResult->update($lData);
                $fileamountArraySsb = array(
                    '1' => $request['file_charge']
                );
                $ssbCreateTran = CommanController::createTransaction($satRefId, 6, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 6, $loanId, 0, $loanDetails->applicant_id, $request['file_charge'], $request['file_charge'], 0, 'Loan File Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 6, $loanId, 0, $loanDetails->applicant_id, $request['insurance_amount'], $request['insurance_amount'], 0, 'Loan Insurance  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                if($gstAmount > 0)
                {
                    if($IntraState)
                    {
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'CGST INSURANCE CHARGE ' . $loanDetails->account_number . '','CGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'SGST INSURANCE CHARGE ' . $loanDetails->account_number . '','SGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'SGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . ' CGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . ' SGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' CGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' SGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'Loan CGST INSURANCE Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'Loan SGST INSURANCE  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 528, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . ' Cgst INSURANCE  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 529, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . ' Sgst INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $lData['insurance_cgst'] = $gstAmount;
                        $lData['insurance_sgst'] = $gstAmount;
                    }
                    else{
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'IGST INSURANCE CHARGE ' . $loanDetails->account_number . '','IGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'IGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'IGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . ' IGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 25, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, ' IGST INSURANCE  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . ' Igst INSURANCE  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $lData['insurance_igst'] = $gstAmount;
                    }
                    $mlResult->update($lData);
                    $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$insurance_amount,$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState== true ? $gstAmount : 0),($IntraState == true) ? $insurance_amount + $gstAmount + $gstAmount :$insurance_amount + $gstAmount,294,$request['date'],'IC294',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                }
                //File Charge Gst Charge Transaction
                if($gstAmountFileChrage > 0 )
                {
                    if($IntraStateFile)
                    {
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'File CGST CHARGE ' . $loanDetails->account_number . '','File CGST CHARGE ' . $loanDetails->account_number . '', 'File CGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'File SGST CHARGE ' . $loanDetails->account_number . '','File SGST CHARGE ' . $loanDetails->account_number . '', 'File sGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File CGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File SGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File CGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File SGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 0, 'Loan File CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 0, 'Loan File SGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 530, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File Cgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 531, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File Sgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $lData['filecharge_sgst'] = $gstAmountFileChrage;
                        $lData['filecharge_cgst'] = $gstAmountFileChrage;
                    }
                    else{
                        $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 532, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'IGST CHARGE ' . $loanDetails->account_number . '','IGST CHARGE ' . $loanDetails->account_number . '', 'File IGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 532, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'File IGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 532, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File IGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        // $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 30, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 0, 'Loan File IGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 527, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'File Igst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $lData['filecharge_igst'] = $gstAmountFileChrage;
                    }
                    $mlResult->update($lData);
                    $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$request['file_charge'],$getHeadSettingFileCHrage->gst_percentage,($IntraStateFile == false ? $gstAmountFileChrage : 0 ) ,($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage+ $request['file_charge'] + $gstAmountFileChrage  : $request['file_charge'] + $gstAmountFileChrage),90,$request['date'],'FC90',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                    //DD( $createdGstTransaction);
                }
                /************* Head Implement ****************/
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                $loan_amount = $request['file_charge'];
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount - $insurance_amount);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 90, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 294,5, 525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount,$insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
                /*$cashTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,57,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*///
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 57, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 525, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $backDateloanChargeBalance = CommanController::updateBackDateloanChargeBalance($loan_amount, $loanDetails->branch_id, $request['date']);
		        $mlResult = Memberloans::find($loanId);
		$lData['insurance_charge'] =$insurance_amount;
		$mlResult->update($lData);
        /************* Head Implement ****************/
            }
            else
            {
                $mlResult = Memberloans::find($loanId);
                $lData['deposite_amount'] = $loanDetails->amount;
                $lData['due_amount'] = $loanDetails->amount;
                $lData['status'] = 4;
		        $lData['insurance_charge'] =$insurance_amount;
                $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $mlResult->update($lData);
            }
            if($loanDetails->loan_type != 4 && ($request->payment_mode == 1 || $request->payment_mode == 0) ){
                $text = 'Dear Member, Loan of Rs.'. $loanDetails->amount. ' is transferred to your '.$transferMode.' on '. date('d/m/Y',strtotime(convertDate($request['date']))).' Loan A/C No ' .$loanDetails->account_number.' EMI Rs. '. $loanDetails->emi_amount.' '.$Mode.' Samraddh Bestwin Microfinance';;
                $temaplteId = 1207166308925961267;
                $contactNumber = array();
                $memberDetail = Member::find($loanDetails->applicant_id);
                $contactNumber[] = $memberDetail->mobile_no;
                $sendToMember = new Sms();
                $sendToMember->sendSms( $contactNumber, $text, $temaplteId);
            }
            if($loanDetails->loan_type == 4 && ($request->payment_mode == 1 || $request->payment_mode == 0) ){
                $text = 'Dear Member, Loan of Rs.'. $loanDetails->amount. ' is transferred to your '.$transferMode.' on '. date('d/m/Y',strtotime(convertDate($request['date']))).' Loan A/C No ' .$loanDetails->account_number.' Samraddh Bestwin Microfinance';
                $temaplteId = 1207166565670370650;
                $contactNumber = array();
                $memberDetail = Member::find($loanDetails->applicant_id);
                $contactNumber[] = $memberDetail->mobile_no;
                $sendToMember = new Sms();
                $sendToMember->sendSms( $contactNumber, $text, $temaplteId);
            }
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return redirect()
            ->route('admin.loan.request')
            ->with('success', 'Loan amount has been successfully transferred!');
        /*}else{
            return back()->with('alert', 'SSB Account does not exists!');
        }*/
    }
    /**
     * Transfer Loan amount.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    // public function transferGroupLoanAmount(Request $request)
    // {
    //     $loanId = $request->loan_id;
    //     $payment_mode = $request->payment_mode;
    //     $loanDetails = Grouploans::with('loanMember','loanSavingAccount2')->where('id',$loanId)->first();
    //     if($request->ssbaccount){
    //         $ssbAccountDetails = SavingAccount::select('id','balance','branch_id','branch_code','member_id')->where('account_no',$request->ssbaccount)->first();
    //         $ssb_account_number = $request->ssbaccount;
    //     }else{
    //         $ssb_account_number = 0;
    //     }
    //     $countSsbResult = SavingAccount::where('account_no',$ssb_account_number)->count();
    //     if($payment_mode == 0){
    //         if($loanDetails['loanSavingAccount2']->account_no != $ssb_account_number){
    //             return back()->with('alert', 'Applicant SSB Account Number does not exists!');
    //         }
    //         if($countSsbResult == 0){
    //             return back()->with('alert', 'SSB Account does not exists!');
    //         }
    //     }
    //     if($payment_mode == 1){
    //         $bank_id=$request['company_bank'];
    //         $bank_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //         $bankBla=SamraddhBankClosing::where('bank_id',$bank_id)->where('account_id',$bank_ac_id)->whereDate('entry_date','<=',date("Y-m-d", strtotime(convertDate($request['date']))))->orderby('entry_date','desc')->first();
    //         if($bankBla){
    //             if($request['total_online_amount'] > $bankBla->balance)
    //             {
    //                 return back()->with('alert', 'Sufficient amount not available in bank account!');
    //             }
    //         }
    //         else
    //         {
    //             return back()->with('alert', 'Sufficient amount not available in bank account!');
    //         }
    //     }
    //     if($loanDetails->deposite_amount > 0){
    //         return back()->with('alert', 'Loan amount already transferred to user’s SSB account!');
    //     }
    //     /*if($countSsbResult > 0){*/
    //     DB::beginTransaction();
    //     try {
    //             $entryTime = date("H:i:s");
    //             Session::put('created_at', date("Y-m-d", strtotime(convertDate($request['date']))));
    //             $amountArraySsb = array('1'=>$loanDetails->amount);
    //             if($payment_mode == 0){
    //                 $paymentMode = 4;
    //                 $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name.' '.$ssbAccountDetails['ssbMember']->last_name;
    //                 $record1=SavingAccountTranscation::where('account_no',$ssb_account_number)->whereDate('created_at','<',date("Y-m-d", strtotime(convertDate($request['date']))))->first();
    //                 $ssb['saving_account_id']=$ssbAccountDetails->id;
    //                 $ssb['account_no']=$ssb_account_number;
    //                 if($record1){
    //                     if($request['pay_file_charge'] == 0){
    //                         $ssb['opening_balance']=($loanDetails->amount-$request['file_charge'])+$record1->opening_balance;
    //                         $ssb['deposit']=$loanDetails->amount-$request['file_charge'];
    //                     }else{
    //                         $ssb['opening_balance']=$loanDetails->amount+$record1->opening_balance;
    //                         $ssb['deposit']=$loanDetails->amount;
    //                     }
    //                 }else{
    //                     if($request['pay_file_charge'] == 0){
    //                         $ssb['opening_balance']=($loanDetails->amount-$request['file_charge']);
    //                         $ssb['deposit']=$loanDetails->amount-$request['file_charge'];
    //                     }else{
    //                         $ssb['opening_balance']=$loanDetails->amount;
    //                         $ssb['deposit']=$loanDetails->amount;
    //                     }
    //                 }
    //                 $ssb['branch_id']=$loanDetails->branch_id;
    //                 $ssb['type']=6;
    //                 $ssb['withdrawal']=0;
    //                 $ssb['description']='Transferred loan amount to SSB';
    //                 $ssb['currency_code']='INR';
    //                 $ssb['payment_type']='CR';
    //                 $ssb['payment_mode']=3;
    //                 $ssb['created_at']=date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //                 $saTranctionId = $ssbAccountTran->id;
    //                 if($request['pay_file_charge'] == 0){
    //                     $balance_update=($loanDetails->amount-$request['file_charge'])+$ssbAccountDetails->balance;
    //                 }else{
    //                     $balance_update=$loanDetails->amount+$ssbAccountDetails->balance;
    //                 }
    //                 $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //                 $ssbBalance->balance=$balance_update;
    //                 $ssbBalance->save();
    //                 $record2=SavingAccountTranscation::where('account_no',$ssb_account_number)->whereDate('created_at','>',date("Y-m-d", strtotime(convertDate($request['date']))))->get();
    //                 foreach ($record2 as $key => $value) {
    //                     $nsResult = SavingAccountTranscation::find($value->id);
    //                     if($request['pay_file_charge'] == 0){
    //                         $nsResult['opening_balance']=($loanDetails->amount-$request['file_charge'])+$value->opening_balance;
    //                     }else{
    //                         $nsResult['opening_balance']=$loanDetails->amount+$value->opening_balance;
    //                     }
    //                     $nsResult['updated_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['date'])));
    //                     $nsResult->save();
    //                 }
    //                 $data['saving_account_transaction_id']=$saTranctionId;
    //                 $data['loan_id']=$loanId;
    //                 $data['created_at']=date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $satRef = TransactionReferences::create($data);
    //                 $satRefId = $satRef->id;
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,1,$loanId,$ssbAccountDetails->member_id,$ssbAccountDetails->branch_id,$ssbAccountDetails->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name=NULL,$ssbAccountDetails->member_id,$ssb_account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $description = 'Loan amount to ssb';
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$loanId,$loanDetails->associate_member_id,$ssbAccountDetails->member_id,$loanDetails->amount+$ssbAccountDetails->balance,$loanDetails->amount,$withdrawal=0,$description,$ssb_account_number,$ssbAccountDetails->branch_id,$ssbAccountDetails->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name=NULL,$ssbAccountDetails->member_id,$ssb_account_number,0,NULL,NULL,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /*$chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loanDetails->amount);
    //                 $memberTransaction = CommanController::createMemberTransaction($dayBookRef,4,48,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loanDetails->amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             }elseif($payment_mode == 1){
    //                 $satRefId = NULL;
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 3;
    //                 }
    //                 $saTranctionId = '';
    //             }elseif($payment_mode == 2){
    //                 $satRefId = NULL;
    //                 $paymentMode = 2;
    //                 $saTranctionId = '';
    //             }
    //             $amount_deposit_by_name = $loanDetails['loanMember']->first_name.' '.$loanDetails['loanMember']->last_name;
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,8,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,8,$loanId,0,$loanDetails->applicant_id,$loanDetails->amount,$loanDetails->amount,0,'Loan EMI deposite',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$amountArraySsb,$paymentMode,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //             if($payment_mode == 0){
    //                 /************* Head Implement ****************/
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$saTranctionId,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,66,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchName($loanDetails->branch_id),$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL,$cheque_type=NULL,$cheque_id=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_from_id=NULL,$cheque_bank_ac_from_id=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_from_id=NULL,$transction_bank_from_ac_id=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch=NULL,$transction_bank_to_ifsc=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,56,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchName($loanDetails->branch_id),$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL,$cheque_type=NULL,$cheque_id=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_from_id=NULL,$cheque_bank_ac_from_id=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_from_id=NULL,$transction_bank_from_ac_id=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch=NULL,$transction_bank_to_ifsc=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),1,Auth::user()->id);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,66,$head5=NULL,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);
    //                 $allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$saTranctionId,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /************* Head Implement ****************/
    //             }elseif($payment_mode == 1){
    //                 $loan_head_id = 66;
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $payment_type = 1;
    //                     $amount_from_id = $request['company_bank'];
    //                     $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
    //                     $cheque_id = getSamraddhChequeData($request['cheque_id'])->id;
    //                     $cheque_no = $request['cheque_id'];
    //                     $cheque_date = getSamraddhChequeData($request['cheque_id'])->cheque_create_date;
    //                     $cheque_bank_from = $request['company_bank'];
    //                     $cheque_bank_ac_from = $request['company_bank_account_number'];
    //                     $cheque_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $cheque_bank_ac_from_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $cheque_bank_branch_from=NULL;
    //                     $cheque_bank_to=NULL;
    //                     $cheque_bank_ac_to=$request['customer_bank_account_number'];
    //                     $cheque_type = 0;
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_no = NULL;
    //                     $transction_bank_from = $request['company_bank'];
    //                     $transction_bank_ac_from = $request['company_bank_account_number'];
    //                     $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = $request['customer_bank_account_number'];
    //                     $transction_bank_to_name = $request['customer_bank_name'];
    //                     $transction_bank_to_ac_no = $request['customer_bank_account_number'];
    //                     $transction_bank_to_branch = $request['customer_branch_name'];
    //                     $transction_bank_to_ifsc = $request['customer_ifsc_code'];
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $payment_type = 2;
    //                     $amount_from_id = $request['company_bank'];
    //                     $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
    //                     $cheque_type = NULL;
    //                     $cheque_id = NULL;
    //                     $cheque_no = NULL;
    //                     $cheque_date = NULL;
    //                     $cheque_bank_from = NULL;
    //                     $cheque_bank_ac_from = NULL;
    //                     $cheque_bank_ac_from_id = NULL;
    //                     $cheque_bank_ifsc_from = NULL;
    //                     $cheque_bank_branch_from = NULL;
    //                     $cheque_bank_to = NULL;
    //                     $cheque_bank_ac_to = NULL;
    //                     $transction_no = $request['utr_transaction_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_bank_from = $request['company_bank'];
    //                     $transction_bank_ac_from = $request['company_bank_account_number'];
    //                     $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
    //                     $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = $request['customer_bank_account_number'];
    //                     $transction_bank_to_name = $request['customer_bank_name'];
    //                     $transction_bank_to_ac_no = $request['customer_bank_account_number'];
    //                     $transction_bank_to_branch = $request['customer_branch_name'];
    //                     $transction_bank_to_ifsc = $request['customer_ifsc_code'];
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,$loan_head_id,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,getSamraddhBank($request['company_bank'])->account_head_id,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,($loan_amount+$request['rtgs_neft_charge']),($loan_amount+$request['rtgs_neft_charge']),($loan_amount+$request['rtgs_neft_charge']),'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name=NULL,$transction_bank_to_ac_no=NULL,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
    //                 $allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBank($request['company_bank'])->account_head_id,$head5=NULL,5,51,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 if($request['bank_transfer_mode'] == 1){
    //                     $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,92,5,522,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],'NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','DR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$cheque_type,$cheque_id,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_from,$cheque_bank_ac_from_id,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_to_name=NULL,$cheque_bank_to_branch=NULL,$cheque_bank_to_ac_no=NULL,$cheque_bank_to_ifsc=NULL,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_from,$transction_bank_from_ac_id,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,1,Auth::user()->id);
    //                     /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,4,86,92,$head4=NULL,$head5=NULL,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],$request['rtgs_neft_charge'],'NEFT Charge A/c Cr '.$loanDetails->account_number.'','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                     $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount,$request['company_bank'],getSamraddhBankAccount($request['company_bank_account_number'])->id,$request['date'],$request['rtgs_neft_charge'],1);
    //                 }
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id);
    //                 $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($dayBookRef,$amount_from_id,getSamraddhBankAccount($request['company_bank_account_number'])->id,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],$loan_amount+$request['rtgs_neft_charge'],'Payment transfer for Loan Sanction','Cash A/c Dr '.($loan_amount+$request['rtgs_neft_charge']).'','NEFT Charge A/c Dr '.$request['rtgs_neft_charge'].'','CR',$payment_type,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$jv_unique_id=NULL,$cheque_type,$cheque_id,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL);
    //                 $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount,$request['company_bank'],getSamraddhBankAccount($request['company_bank_account_number'])->id,$request['date'],0,1);
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     SamraddhCheque::where('cheque_no',$request['cheque_id'])->update(['status' => 3,'is_use'=>1]);
    //                     SamraddhChequeIssue::create([
    //                         'cheque_id' => getSamraddhChequeData($request['cheque_id'])->id,
    //                         'type' =>3,
    //                         'sub_type' =>33,
    //                         'type_id' =>$loanId,
    //                         'cheque_issue_date' => date("Y-m-d", strtotime(convertDate($request['date']))),
    //                         'status' => 1,
    //                     ]);
    //                 }
    //             }elseif($payment_mode == 2){
    //                 $v_no = NULL;
    //                 if($loanDetails->loan_type == '1'){
    //                     $loan_head_id = 64;
    //                 }elseif($loanDetails->loan_type == '2'){
    //                     $loan_head_id = 65;
    //                 }elseif($loanDetails->loan_type == '3'){
    //                     $loan_head_id = 66;
    //                 }elseif($loanDetails->loan_type == '4'){
    //                     $loan_head_id = 67;
    //                 }
    //                 if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$v_no,NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,1,$dayBookRef,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,$loan_head_id,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,28,5,54,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$dayBookRef,$ssb_account_tran_id_from=NULL);
    //                 $allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$dayBookRef,$ssb_account_tran_id_from=NULL);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$dayBookRef,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $updateBranchCash = $this->checkCreateBranchCashDR($loanDetails->branch_id,date("Y-m-d H:i:s", strtotime(convertDate($request['date']))),$loan_amount,0);
    //                 $updateBranchClosingCash = $this->checkCreateBranchClosingDR($loanDetails->branch_id,date("Y-m-d H:i:s", strtotime(convertDate($request['date']))),$loan_amount,0);
    //             }
    //             if($request['pay_file_charge'] == 0){
    //                 $glResult = Grouploans::find($loanId);
    //                 $glData['deposite_amount'] = $loanDetails->amount-$request['file_charge'];
    //                 $glData['due_amount'] = $loanDetails->amount;
    //                 $glData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 if($loanDetails->emi_option == 1){
    //                     $glData['closing_date'] = date('Y-m-d', strtotime("+".$loanDetails->emi_period." months", strtotime($glData['approve_date'])));
    //                 }elseif($loanDetails->emi_option == 2){
    //                     $days = $loanDetails->emi_period*7;
    //                     $start_date = $glData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $glData['closing_date'] = date('Y-m-d', $date);
    //                 }elseif($loanDetails->emi_option == 3){
    //                     $days = $loanDetails->emi_period;
    //                     $start_date = $glData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $glData['closing_date'] = date('Y-m-d', $date);
    //                 }
    //                 $glData['status'] = 4;
    //                 $glResult->update($glData);
    //                 $mgLoan = Memberloans::where('id',$loanDetails->member_loan_id)->first();
    //                 $mLoanAmount = $mgLoan->deposite_amount+$loanDetails->amount;
    //                 $mlResult = Memberloans::find($loanDetails->member_loan_id);
    //                 $lData['deposite_amount'] = $mLoanAmount-$request['file_charge'];
    //                 $lData['due_amount'] = $mgLoan->due_amount+$loanDetails->amount;
    //                 $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $lData['status'] = 4;
    //                 $mlResult->update($lData);
    //                 $fileamountArraySsb = array('1'=>$request['file_charge']);
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,10,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,5,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,10,$loanId,0,$loanDetails->applicant_id,$request['file_charge'],$request['file_charge'],0,'Loan File Charges',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,5,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,date("Y-m-d", strtotime(convertDate($request['date']))),$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /************* Head Implement ****************/
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 /*if($request['pay_file_charge'] == 0){
    //                     $loan_amount=$loanDetails->amount-$request['file_charge'];
    //                 }else{
    //                     $loan_amount=$loanDetails->amount;
    //                 }*/
    //                 $loan_amount=$request['file_charge'];
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,90,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,''.$loanDetails->account_number.' file charge','DR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /************* Head Implement ****************/
    //             }elseif($request['pay_file_charge'] == 1){
    //                 $glResult = Grouploans::find($loanId);
    //                 $glData['deposite_amount'] = $loanDetails->amount;
    //                 $glData['due_amount'] = $loanDetails->amount;
    //                 $glData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 if($loanDetails->emi_option == 1){
    //                     $glData['closing_date'] = date('Y-m-d', strtotime("+".$loanDetails->emi_period." months", strtotime($glData['approve_date'])));
    //                 }elseif($loanDetails->emi_option == 2){
    //                     $days = $loanDetails->emi_period*7;
    //                     $start_date = $glData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $glData['closing_date'] = date('Y-m-d', $date);
    //                 }elseif($loanDetails->emi_option == 3){
    //                     $days = $loanDetails->emi_period;
    //                     $start_date = $glData['approve_date'];
    //                     $date = strtotime($start_date);
    //                     $date = strtotime("+".$days." day", $date);
    //                     $glData['closing_date'] = date('Y-m-d', $date);
    //                 }
    //                 $glData['status'] = 4;
    //                 $glResult->update($glData);
    //                 $mgLoan = Memberloans::where('id',$loanDetails->member_loan_id)->first();
    //                 $mLoanAmount = $mgLoan->deposite_amount+$loanDetails->amount;
    //                 $mlResult = Memberloans::find($loanDetails->member_loan_id);
    //                 $lData['deposite_amount'] = $mLoanAmount;
    //                 $lData['due_amount'] = $mgLoan->due_amount+$loanDetails->amount;
    //                 $lData['status'] = 4;
    //                 $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
    //                 $mlResult->update($lData);
    //                 $fileamountArraySsb = array('1'=>$request['file_charge']);
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,10,$loanId,$loanDetails->applicant_id,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,0,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no=NULL,$bank_name=NULL,$branch_name=NULL,$request['created_at'],$online_payment_id=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,10,$loanId,0,$loanDetails->applicant_id,$request['file_charge'],$request['file_charge'],0,'Loan File Charges',$loanDetails->account_number,$loanDetails->branch_id,getBranchCode($loanDetails->branch_id)->branch_code,$fileamountArraySsb,0,$amount_deposit_by_name,$loanDetails->applicant_id,$loanDetails->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$request['created_at'],$online_payment_by=NULL,$online_payment_by=NULL,$ssb_account_number,'CR');
    //                 /************* Head Implement ****************/
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 //$loan_amount=$loanDetails->amount;
    //                 $loan_amount=$request['file_charge'];
    //                 $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
    //                 $branchDayBook = CommanController::branchDayBookNew($dayBookRef,$loanDetails->branch_id,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','To Bank A/C Cr '.$loanDetails->account_number.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,90,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,28,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,''.$loanDetails->account_number.' file charge','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$loanDetails->branch_id,getBranchDetail($loanDetails->branch_id)->name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);
    //                 $cashTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*/
    //                 $memberTransaction = CommanController::memberTransactionNew($dayBookRef,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loan_amount,''.$loanDetails->account_number.' file charge','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $backDateloanChargeBalance = CommanController::updateBackDateloanChargeBalance($loan_amount,$loanDetails->branch_id,$request['date']);
    //                 /************* Head Implement ****************/
    //             }
    //     DB::commit();
    //     } catch (\Exception $ex) {
    //         DB::rollback();
    //         return back()->with('alert', $ex->getMessage());
    //     }
    //     return redirect()->route('admin.grouploan.request')->with('success', 'Loan amount has been successfully transferred!');
    //     /*}else{
    //         return back()->with('alert', 'SSB Account does not exists!');
    //     }*/
    // }
   public function transferGroupLoanAmount(Request $request)
    {
        $loanId = $request->loan_id;
        $payment_mode = $request->payment_mode;
	    $insurance_amount = $request->insurance_amount1;
        $loanDetails = Grouploans::with('loanMember', 'loanSavingAccount2','loanBranch')->where('id', $loanId)->first();
        if($loanDetails->emi_option == 1)
        {
            $Mode = 'Monthly';
        }
        elseif($loanDetails->emi_option == 2)
        {
            $Mode = 'Weekly';
        }
        elseif($loanDetails->emi_option == 3)
        {
            $Mode = 'Daily';
        }
        if ($request->ssbaccount)
        {
            $ssbAccountDetails = SavingAccount::select('id', 'balance', 'branch_id', 'branch_code', 'member_id')->where('account_no', $request->ssbaccount)
                ->first();
            $ssb_account_number = $request->ssbaccount;
        }
        else
        {
            $ssb_account_number = 0;
        }
        $stateid = getBranchState($loanDetails['loanBranch']->name);
        $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
        $getHeadSetting = \App\Models\HeadSetting::where('head_id',294)->first();
        $getHeadSettingFileCHrage = \App\Models\HeadSetting::where('head_id',90)->first();
        $getGstSetting = \App\Models\GstSetting::where('state_id',$loanDetails['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
        $getGstSettingno = \App\Models\GstSetting::select('id','gst_no')->where('state_id',$loanDetails['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->first();
        $countSsbResult = SavingAccount::where('account_no', $ssb_account_number)->count();
        $gstAmount = 0;
        $gstAmountFileChrage = 0;
        //Gst Insuramce
        if(isset($getHeadSetting->gst_percentage) &&  $getGstSetting )
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmount =  ceil(($insurance_amount*$getHeadSetting->gst_percentage)/100)/2;
                $cgstHead = 171;
                $sgstHead = 172;
                $IntraState = true;
            }
            else{
                $gstAmount =  ceil($insurance_amount*$getHeadSetting->gst_percentage)/100;
                $cgstHead = 170;
                $IntraState = false;
            }
        }
        if(isset($getHeadSettingFileCHrage->gst_percentage) &&  $getGstSetting )
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmountFileChrage =  ceil(($request['file_charge']*$getHeadSettingFileCHrage->gst_percentage)/100)/2;
                $cgstHead = 171;
                $sgstHead = 172;
                $IntraStateFile = true;
            }
            else{
                $gstAmountFileChrage =  ceil($request['file_charge']*$getHeadSettingFileCHrage->gst_percentage)/100;
                $cgstHead = 170;
                $IntraStateFile = false;
            }
        }
        if ($payment_mode == 0)
        {
            if ($loanDetails['loanSavingAccount2']->account_no != $ssb_account_number)
            {
                return back()->with('alert', 'Applicant SSB Account Number does not exists!');
            }
            if ($countSsbResult == 0)
            {
                return back()->with('alert', 'SSB Account does not exists!');
            }
        }
        if ($payment_mode == 1)
        {
            $bank_id = $request['company_bank'];
            $bank_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
            $bankBla = SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $bank_ac_id)->whereDate('entry_date', '<=', date("Y-m-d", strtotime(convertDate($request['date']))))->orderby('entry_date', 'desc')
                ->first();
            if ($bankBla)
            {
                // Changes By Anup SIr = 01-09-2022  && $bank_id != 2 (Aman jain )
            //https://pm.w3care.com/projects/1892/tasks/45618
                if ($request['total_online_amount'] > $bankBla->balance && $bank_id != 2)
                {
                    return back()
                        ->with('alert', 'Sufficient amount not available in bank account!');
                }
            }
            else
            {
                return back()
                    ->with('alert', 'Sufficient amount not available in bank account!');
            }
        }
        if ($loanDetails->deposite_amount > 0)
        {
            return back()
                ->with('alert', 'Loan amount already transferred to user’s SSB account!');
        }
        /*if($countSsbResult > 0){*/
        DB::beginTransaction();
        try
        {
            $entryTime = date("H:i:s");
            Session::put('created_at', date("Y-m-d", strtotime(convertDate($request['date']))));
            $amountArraySsb = array(
                '1' => $loanDetails->amount
            );
            if ($payment_mode == 0)
            {
                $paymentMode = 4;
                $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name . ' ' . $ssbAccountDetails['ssbMember']->last_name;
                $transDate = date("Y-m-d ".$entryTime."",strtotime(convertDate($request['date'])));
                $record1 = SavingAccountTranscation::where('account_no', $ssb_account_number)->where('created_at','<=',$transDate)->where('is_deleted',0)->orderby('id','desc')->first();
                // $record1 = SavingAccountTranscation::where('account_no', $ssb_account_number)->whereDate('created_at', '<', date("Y-m-d", strtotime(convertDate($request['date']))))->first();
                $ssb['saving_account_id'] = $ssbAccountDetails->id;
                $ssb['account_no'] = $ssb_account_number;
                if ($record1)
                {
                    if ($request['pay_file_charge'] == 0)
                    {
                        $ssb['opening_balance'] = ($loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage) + $record1->opening_balance;
                        $ssb['deposit'] = $loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    }
                    else
                    {
                        $ssb['opening_balance'] = $loanDetails->amount + $record1->opening_balance;
                        $ssb['deposit'] = $loanDetails->amount;
                    }
                }
                else
                {
                    if ($request['pay_file_charge'] == 0)
                    {
                        $ssb['opening_balance'] = ($loanDetails->amount - $request['file_charge']- $insurance_amount - $gstAmount - $gstAmountFileChrage);
                        $ssb['deposit'] = $loanDetails->amount - $request['file_charge']- $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    }
                    else
                    {
                        $ssb['opening_balance'] = $loanDetails->amount;
                        $ssb['deposit'] = $loanDetails->amount;
                    }
                }
                $ssb['branch_id'] = $loanDetails->branch_id;
                $ssb['type'] = 6;
                $ssb['withdrawal'] = 0;
                $ssb['description'] = 'Transferred loan amount to SSB';
                $ssb['currency_code'] = 'INR';
                $ssb['payment_type'] = 'CR';
                $ssb['payment_mode'] = 3;
                $ssb['created_at'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $ssbAccountTran = SavingAccountTranscation::create($ssb);
                $saTranctionId = $ssbAccountTran->id;
                $transferMode = 'SSB';
                if ($request['pay_file_charge'] == 0)
                {
                    $balance_update = ($loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage) + $ssbAccountDetails->balance ;
                }
                else
                {
                    $balance_update = $loanDetails->amount + $ssbAccountDetails->balance;
                }
                $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
                $ssbBalance->balance = $balance_update;
                $ssbBalance->save();
                $record2 = SavingAccountTranscation::where('account_no', $ssb_account_number)->whereDate('created_at', '>', date("Y-m-d", strtotime(convertDate($request['date']))))->get();
                foreach ($record2 as $key => $value)
                {
                    $nsResult = SavingAccountTranscation::find($value->id);
                    if ($request['pay_file_charge'] == 0)
                    {
                        $nsResult['opening_balance'] = ($loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage) + $value->opening_balance;
                    }
                    else
                    {
                        $nsResult['opening_balance'] = $loanDetails->amount + $value->opening_balance;
                    }
                    $nsResult['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['date'])));
                    $nsResult->save();
                }
                $data['saving_account_transaction_id'] = $saTranctionId;
                $data['loan_id'] = $loanId;
                $data['created_at'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $satRef = TransactionReferences::create($data);
                $satRefId = $satRef->id;
                $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $loanId, $ssbAccountDetails->member_id, $ssbAccountDetails->branch_id, $ssbAccountDetails->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name = NULL, $ssbAccountDetails->member_id, $ssb_account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $description = 'Loan amount to ssb';
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $loanId, $loanDetails->associate_member_id, $ssbAccountDetails->member_id, $loanDetails->amount + $ssbAccountDetails->balance, $loanDetails->amount, $withdrawal = 0, $description, $ssb_account_number, $ssbAccountDetails->branch_id, $ssbAccountDetails->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name = NULL, $ssbAccountDetails->member_id, $ssb_account_number, 0, NULL, NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                /*$chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    $v_no = "";
                    for ($i = 0; $i < 10; $i++) {
                        $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
                    }
                    $dayBookRef = CommanController::createBranchDayBookReference($loanDetails->amount);
                    $memberTransaction = CommanController::createMemberTransaction($dayBookRef,4,48,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$loanDetails->branch_id,$bank_id=NULL,$account_id=NULL,$loanDetails->amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
            }
            elseif ($payment_mode == 1)
            {
                $satRefId = NULL;
                $transferMode = 'BANK';
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $paymentMode = 1;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $paymentMode = 3;
                }
                $saTranctionId = '';
            }
            elseif ($payment_mode == 2)
            {
                $satRefId = NULL;
                $paymentMode = 2;
                $saTranctionId = '';
            }
            $amount_deposit_by_name = $loanDetails['loanMember']->first_name . ' ' . $loanDetails['loanMember']->last_name;
            $ssbCreateTran = CommanController::createTransaction($satRefId, 8, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
            $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 8, $loanId, 0, $loanDetails->applicant_id, $loanDetails->amount, $loanDetails->amount, 0, 'Loan Amount Sanction', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $amountArraySsb, $paymentMode, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
            if ($payment_mode == 0)
            {
                /************* Head Implement ****************/
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                if ($request['pay_file_charge'] == 0)
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge'] - $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    $totalLoanAmount = $loanDetails->amount ;
                    $tAmount = $loan_amount;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 54, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $totalLoanAmount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 2, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $saTranctionId, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                //............................. Optimization code...........................//
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 66, 5, 54, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchName($loanDetails->branch_id) , $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $ssbAccountDetails->id, $saTranctionId, $ssb_account_tran_id_from = NULL, $cheque_type = NULL, $cheque_id = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_from_id = NULL, $cheque_bank_ac_from_id = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_from_id = NULL, $transction_bank_from_ac_id = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch = NULL, $transction_bank_to_ifsc = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , 1, Auth::user()->id);
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 56, 5, 54, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchName($loanDetails->branch_id) , $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $ssbAccountDetails->id, $saTranctionId, $ssb_account_tran_id_from = NULL, $cheque_type = NULL, $cheque_id = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_from_id = NULL, $cheque_bank_ac_from_id = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_from_id = NULL, $transction_bank_from_ac_id = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch = NULL, $transction_bank_to_ifsc = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , 1, Auth::user()->id);
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,66,$head5=NULL,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);
                    $allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,54,$loanId,$saTranctionId,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',3,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$saTranctionId,$ssb_account_tran_id_from=NULL);*/
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 54, $loanId, $saTranctionId, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 3, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $saTranctionId, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /************* Head Implement ****************/
            }
            elseif ($payment_mode == 1)
            {
                $loan_head_id = 66;
                if ($request['pay_file_charge'] == 0)
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge'] - $gstAmount - $gstAmountFileChrage - $insurance_amount;
                    $totalLoanAmount =$loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                    $tAmount = $loan_amount;
                }
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $payment_type = 1;
                    $amount_from_id = $request['company_bank'];
                    $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
                    $cheque_id = getSamraddhChequeData($request['cheque_id'])->id;
                    $cheque_no = $request['cheque_id'];
                    $cheque_date = getSamraddhChequeData($request['cheque_id'])->cheque_create_date;
                    $cheque_bank_from = $request['company_bank'];
                    $cheque_bank_ac_from = $request['company_bank_account_number'];
                    $cheque_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $cheque_bank_ac_from_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = $request['customer_bank_account_number'];
                    $cheque_type = 0;
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_no = NULL;
                    $transction_bank_from = $request['company_bank'];
                    $transction_bank_ac_from = $request['company_bank_account_number'];
                    $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = NULL;
                    $transction_bank_ac_to = $request['customer_bank_account_number'];
                    $transction_bank_to_name = $request['customer_bank_name'];
                    $transction_bank_to_ac_no = $request['customer_bank_account_number'];
                    $transction_bank_to_branch = $request['customer_branch_name'];
                    $transction_bank_to_ifsc = $request['customer_ifsc_code'];
                    $transferAccount = $request['customer_bank_account_number'];
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $payment_type = 2;
                    $amount_from_id = $request['company_bank'];
                    $amount_from_name = getSamraddhBank($request['company_bank'])->bank_name;
                    $cheque_type = NULL;
                    $cheque_id = NULL;
                    $cheque_no = NULL;
                    $cheque_date = NULL;
                    $cheque_bank_from = NULL;
                    $cheque_bank_ac_from = NULL;
                    $cheque_bank_ac_from_id = NULL;
                    $cheque_bank_ifsc_from = NULL;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = NULL;
                    $transction_no = $request['utr_transaction_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_bank_from = $request['company_bank'];
                    $transction_bank_ac_from = $request['company_bank_account_number'];
                    $transction_bank_ifsc_from = getSamraddhBankAccount($request['company_bank_account_number'])->ifsc_code;
                    $transction_bank_from_ac_id = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = NULL;
                    $transction_bank_ac_to = $request['customer_bank_account_number'];
                    $transction_bank_to_name = $request['customer_bank_name'];
                    $transction_bank_to_ac_no = $request['customer_bank_account_number'];
                    $transction_bank_to_branch = $request['customer_branch_name'];
                    $transction_bank_to_ifsc = $request['customer_ifsc_code'];
                    $transferAccount = $request['customer_bank_account_number'];
                }
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id);
                //............................. Optimization code...........................//
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, $loan_head_id, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, getSamraddhBank($request['company_bank'])->account_head_id, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, ($loan_amount + $request['rtgs_neft_charge']) , ($loan_amount + $request['rtgs_neft_charge']) , ($loan_amount + $request['rtgs_neft_charge']) , 'Payment transfer for Loan Sanction', 'CR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name = NULL, $transction_bank_to_ac_no = NULL, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                if ($request['bank_transfer_mode'] == 1)
                {
                    $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 92, 5, 522, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], $request['rtgs_neft_charge'], 'NEFT Charge A/c Dr ' . $request['rtgs_neft_charge'] . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $cheque_type, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from, $cheque_bank_ac_from_id, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_to_name = NULL, $cheque_bank_to_branch = NULL, $cheque_bank_to_ac_no = NULL, $cheque_bank_to_ifsc = NULL, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, 1, Auth::user()->id);
                    $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount, $request['company_bank'], getSamraddhBankAccount($request['company_bank_account_number'])->id, $request['date'], $request['rtgs_neft_charge'], 1);
                }
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id);
                $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($dayBookRef, $amount_from_id, getSamraddhBankAccount($request['company_bank_account_number'])->id, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $loan_amount + $request['rtgs_neft_charge'], $loan_amount + $request['rtgs_neft_charge'], $loan_amount + $request['rtgs_neft_charge'], 'Payment transfer for Loan Sanction', 'Cash A/c Dr ' . ($loan_amount + $request['rtgs_neft_charge']) . '', 'NEFT Charge A/c Dr ' . $request['rtgs_neft_charge'] . '', 'DR', $payment_type, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $amount_from_name, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $created_at = NULL, $jv_unique_id = NULL, $cheque_type, $cheque_id, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                $updateBackDateloanBankBalance = CommanController::updateBackDateloanBankBalance($loan_amount, $request['company_bank'], getSamraddhBankAccount($request['company_bank_account_number'])->id, $request['date'], 0, 1);
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    SamraddhCheque::where('cheque_no', $request['cheque_id'])->update(['status' => 3, 'is_use' => 1]);
                    SamraddhChequeIssue::create([
                    'cheque_id' => getSamraddhChequeData($request['cheque_id'])->id,
                    'type' => 3,
                    'sub_type' => 33,
                    'type_id' => $loanId,
                    'cheque_issue_date' => date("Y-m-d", strtotime(convertDate($request['date']))) ,
                    'status' => 1,
                    ]);
                }
            }
            elseif ($payment_mode == 2)
            {
                $v_no = NULL;
                if ($loanDetails->loan_type == '1')
                {
                    $loan_head_id = 64;
                }
                elseif ($loanDetails->loan_type == '2')
                {
                    $loan_head_id = 65;
                }
                elseif ($loanDetails->loan_type == '3')
                {
                    $loan_head_id = 66;
                }
                elseif ($loanDetails->loan_type == '4')
                {
                    $loan_head_id = 67;
                }
                if ($request['pay_file_charge'] == 0)
                {
                    $loan_amount = $loanDetails->amount - $request['file_charge']- $insurance_amount - $gstAmount - $gstAmountFileChrage;
                    $totalLoanAmount =$loanDetails->amount;
                }
                else
                {
                    $loan_amount = $loanDetails->amount;
                    $totalLoanAmount = $loanDetails->amount;
                }
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                //............................. Optimization code...........................//
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 54, $loanId, $dayBookRef, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $totalLoanAmount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $v_no, NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, 1, $dayBookRef, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                //............................. Optimization code...........................//
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $loan_head_id, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $totalLoanAmount, $totalLoanAmount, $totalLoanAmount, 'Payment transfer for Loan Sanction', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                //............................. Optimization code...........................//
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 54, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$dayBookRef,$ssb_account_tran_id_from=NULL);
                    $allTransaction = $this->createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,54,$loanId,$dayBookRef,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'Payment transfer for Loan Sanction','DR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date'],$ssbAccountDetails->id,$dayBookRef,$ssb_account_tran_id_from=NULL);*/
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 54, $loanId, $dayBookRef, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, 'Payment transfer for Loan Sanction', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $dayBookRef, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $updateBranchCash = $this->checkCreateBranchCashDR($loanDetails->branch_id, date("Y-m-d H:i:s", strtotime(convertDate($request['date']))) , $loan_amount, 0);
                $updateBranchClosingCash = $this->checkCreateBranchClosingDR($loanDetails->branch_id, date("Y-m-d H:i:s", strtotime(convertDate($request['date']))) , $loan_amount, 0);
            }
            if ($request['pay_file_charge'] == 0)
            {
                $glResult = Grouploans::find($loanId);
                $glData['deposite_amount'] = $loanDetails->amount - $request['file_charge']-$insurance_amount;
                $glData['due_amount'] = $loanDetails->amount;
                $glData['file_charge_type'] = '1';
                $glData['transfer_amount'] = $loan_amount;
                $glData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                if ($loanDetails->emi_option == 1)
                {
                    $glData['closing_date'] = date('Y-m-d', strtotime("+" . $loanDetails->emi_period . " months", strtotime($glData['approve_date'])));
                }
                elseif ($loanDetails->emi_option == 2)
                {
                    $days = $loanDetails->emi_period * 7;
                    $start_date = $glData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $glData['closing_date'] = date('Y-m-d', $date);
                }
                elseif ($loanDetails->emi_option == 3)
                {
                    $days = $loanDetails->emi_period;
                    $start_date = $glData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $glData['closing_date'] = date('Y-m-d', $date);
                }
                $glData['insurance_charge'] =$insurance_amount;
                $glData['status'] = 4;
                $glResult->update($glData);
                $mgLoan = Memberloans::where('id', $loanDetails->member_loan_id)
                    ->first();
                $mLoanAmount = $mgLoan->deposite_amount + $loanDetails->amount;
                $mlResult = Memberloans::find($loanDetails->member_loan_id);
                $lData['deposite_amount'] = $mLoanAmount - $request['file_charge'];
                $lData['due_amount'] = $mgLoan->due_amount + $loanDetails->amount;
                $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $lData['status'] = 4;
                $mlResult->update($lData);
                $fileamountArraySsb = array(
                    '1' => $request['file_charge']
                );
                $ssbCreateTran = CommanController::createTransaction($satRefId, 10, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 10, $loanId, 0, $loanDetails->applicant_id, $request['file_charge'], $request['file_charge'], 0, 'Loan File Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 24, $loanId, 0, $loanDetails->applicant_id, $insurance_amount, $insurance_amount, 0, ' Group Loan Insurance Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                /************* Head Implement ****************/
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                /*if($request['pay_file_charge'] == 0){
                        $loan_amount=$loanDetails->amount-$request['file_charge'];
                    }else{
                        $loan_amount=$loanDetails->amount;
                    }*/
                $loan_amount = $request['file_charge'];
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount . '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 90, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 294, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                 //Gst Charge Foir Branch DayBook
                 if($gstAmount > 0 )
                 {
                     $mlResult =  Grouploans::find($loanId);;
                     if($IntraState)
                     {
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP CGST INSURANCE CHARGE ' . $loanDetails->account_number . '','GROUP CGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP SGST INSURANCE CHARGE ' . $loanDetails->account_number . '','GROUP SGST INSURANCE CHARGE' . $loanDetails->account_number . '', 'GROUP SGST INSURANCE CHARGE' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'GROUP CGST INSURANCE charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . ' GROUP SGST INSURANCE charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP CGST INSURANCE charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP SGST INSURANCE charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP CGST INSURANCE charge', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP SGST INSURANCE charge', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 533, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . 'Group Cgst Insurance  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 534, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . 'Group Sgst Insurance  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $lData['insurance_cgst'] = $gstAmount;
                         $lData['insurance_sgst'] = $gstAmount;
                     }
                     else{
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP IGST INSURANCE CHARGE ' . $loanDetails->account_number . '','IGST CHARGE ' . $loanDetails->account_number . '', 'GROUP IGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'GROUP IGST INSURANCE CHARGE', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP IGST INSURANCE CHARGE', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 25, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP IGST INSURANCE CHARGE', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 5, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                         $lData['insurance_charge_igst'] = $gstAmount;
                     }
                         $mlResult->update($lData);
                         $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$insurance_amount,$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState== true ? $gstAmount : 0),($IntraState == true) ? $insurance_amount + $gstAmount + $gstAmount :$insurance_amount + $gstAmount,294,$request['date'],'IC294',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                 }
                 if($gstAmountFileChrage > 0 )
                 {
                     $mlResult = Grouploans::find($loanId);
                     if($IntraStateFile)
                     {
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP File Charge CGST ' . $loanDetails->account_number . '','GROUP File Charge CGST  ' . $loanDetails->account_number . '', 'GROUP File Charge CGST ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP File Charge SGST ' . $loanDetails->account_number . '','GROUP File Charge SGST ' . $loanDetails->account_number . '', 'GROUP File Charge SGST' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Charge CGST ', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Charge SGST ', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Charge SGST', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP SGST charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 28, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 5, 'GROUP Loan File Chrage CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 29, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 5, 'GROUP Loan File Chrage CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP Loan File Charge Cgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP Loan File Charge Sgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $lData['filecharge_sgst'] = $gstAmountFileChrage;
                         $lData['filecharge_cgst'] = $gstAmountFileChrage;
                     }
                     else{
                         $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP File Charge IGST CHARGE' . $loanDetails->account_number . '','GROUP File Charge IGST CHARGE' . $loanDetails->account_number . '', 'GROUP File Charge IGST CHARGE ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                         $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Charge IGST CHARGE', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                         $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Charge IGST CHARGE', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        //  $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 30, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 5, 'GROUP File Charge IGST CHARGE', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                         $lData['filecharge_igst'] = $gstAmountFileChrage;
                     }
                     $mlResult->update($lData);
                     $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$request['file_charge'],$getHeadSettingFileCHrage->gst_percentage,($IntraStateFile == false ? $gstAmountFileChrage : 0 ) ,($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage : 0),($IntraStateFile == true ? $gstAmountFileChrage+ $request['file_charge'] + $gstAmountFileChrage  : $request['file_charge'] + $gstAmountFileChrage),90,$request['date'],'FC90',$loanDetails['loanMember']->id,$loanDetails->branch_id);
                 }
                /************* Head Implement ****************/
            }
            elseif ($request['pay_file_charge'] == 1)
            {
                $glResult = Grouploans::find($loanId);
                $glData['deposite_amount'] = $loanDetails->amount;
                $glData['due_amount'] = $loanDetails->amount;
                $glData['file_charge_type'] = '1';
                $glData['transfer_amount'] = $loan_amount;
                $glData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                if ($loanDetails->emi_option == 1)
                {
                    $glData['closing_date'] = date('Y-m-d', strtotime("+" . $loanDetails->emi_period . " months", strtotime($glData['approve_date'])));
                }
                elseif ($loanDetails->emi_option == 2)
                {
                    $days = $loanDetails->emi_period * 7;
                    $start_date = $glData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $glData['closing_date'] = date('Y-m-d', $date);
                }
                elseif ($loanDetails->emi_option == 3)
                {
                    $days = $loanDetails->emi_period;
                    $start_date = $glData['approve_date'];
                    $date = strtotime($start_date);
                    $date = strtotime("+" . $days . " day", $date);
                    $glData['closing_date'] = date('Y-m-d', $date);
                }
                $glData['status'] = 4;
                $glData['insurance_charge'] =$insurance_amount;
                $glResult->update($glData);
                $mgLoan = Memberloans::where('id', $loanDetails->member_loan_id)
                    ->first();
                $mLoanAmount = $mgLoan->deposite_amount + $loanDetails->amount;
                $mlResult = Memberloans::find($loanDetails->member_loan_id);
                $lData['deposite_amount'] = $mLoanAmount;
                $lData['due_amount'] = $mgLoan->due_amount + $loanDetails->amount;
                $lData['status'] = 4;
                $lData['approve_date'] = date("Y-m-d", strtotime(convertDate($request['date'])));
                $mlResult->update($lData);
                $fileamountArraySsb = array(
                    '1' => $request['file_charge']
                );
                $ssbCreateTran = CommanController::createTransaction($satRefId, 10, $loanId, $loanDetails->applicant_id, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no = NULL, $bank_name = NULL, $branch_name = NULL, $request['created_at'], $online_payment_id = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 10, $loanId, 0, $loanDetails->applicant_id, $request['file_charge'], $request['file_charge'], 0, 'Loan File Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $request['created_at'], $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 24, $loanId, 0, $loanDetails->applicant_id, $insurance_amount, $insurance_amount, 0, 'Loan Insurance Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $request['created_at'], $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
  if($gstAmount > 0)
  {
        $mlResult =  Grouploans::find($loanId);
      if($IntraState)
      {
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP CGST INSURANCE CHARGE ' . $loanDetails->account_number . '','GROUP CGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'GROUP CGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP SGST INSURANCE CHARGE ' . $loanDetails->account_number . '','GROUP SGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'GROUP SGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'GROUP CGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'GROUP SGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP CGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP SGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP Loan CGST INSURANCE Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP Loan SGST INSURANCE  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 536, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . 'GROUP Cgst INSURANCE  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 537, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . 'GROUP Sgst INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $lData['filecharge_sgst'] = $gstAmount;
          $lData['filecharge_cgst'] = $gstAmount;
      }
      else{
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'GROUP IGST INSURANCE CHARGE ' . $loanDetails->account_number . '','IGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'IGST INSURANCE CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount,$gstAmount, '' . $loanDetails->account_number . 'GROUP IGST INSURANCE charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmount, '' . $loanDetails->account_number . 'GROUP IGST INSURANCE charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 25, $loanId, 0, $loanDetails->applicant_id, $gstAmount, $gstAmount, 0, 'GROUP IGST INSURANCE  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 538, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, '' . $loanDetails->account_number . 'GROUP Igst INSURANCE  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $lData['filecharge_igst'] = $gstAmount;
      }
        $mlResult->update($lData);
      $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$insurance_amount,$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState== true ? $gstAmount : 0),($IntraState == true) ? $insurance_amount + $gstAmount + $gstAmount :$insurance_amount + $gstAmount,294,$request['date'],'IC294',$loanDetails['loanMember']->id,$loanDetails->branch_id);
  }
  //File Charge Gst Charge Transaction
  if($gstAmountFileChrage > 0 )
  {
        $mlResult =  Grouploans::find($loanId);
      if($IntraStateFile)
      {
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP File CGST CHARGE ' . $loanDetails->account_number . '','GROUP File CGST CHARGE ' . $loanDetails->account_number . '', 'GROUP File CGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP File SGST CHARGE ' . $loanDetails->account_number . '','GROUP File SGST CHARGE ' . $loanDetails->account_number . '', 'GROUP File sGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File CGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $sgstHead,5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . ' GROUP File SGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File CGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File SGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 26, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 0, ' GROUP Loan File CGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 27, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmount, 0, 'GROUP Loan File SGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 539, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Cgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 540, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Sgst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $lData['filecharge_sgst'] = $gstAmountFileChrage;
      }
      else{
          $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, 'GROUP FILE IGST CHARGE ' . $loanDetails->account_number . '','GROUP FILE IGST CHARGE ' . $loanDetails->account_number . '', 'GROUP File IGST CHARGE ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, $cgstHead,5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage,$gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File IGST charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File IGST charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
        //   $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 30, $loanId, 0, $loanDetails->applicant_id, $gstAmountFileChrage, $gstAmountFileChrage, 0, 'GROUP Loan File IGST  Charges', $loanDetails->account_number, $loanDetails->branch_id, getBranchCode($loanDetails->branch_id)->branch_code, $fileamountArraySsb, 0, $amount_deposit_by_name, $loanDetails->applicant_id, $loanDetails->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, date("Y-m-d", strtotime(convertDate($request['date']))) , $online_payment_by = NULL, $online_payment_by = NULL, $ssb_account_number, 'CR');
          $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 541, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $gstAmountFileChrage, $gstAmountFileChrage, $gstAmountFileChrage, '' . $loanDetails->account_number . 'GROUP File Igst  charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
          $lData['filecharge_igst'] = $gstAmountFileChrage;
      }
      $mlResult->update($lData);
      $createdGstTransaction = CommanController::gstTransaction($dayBookId = $dayBookRef,$getGstSettingno->gst_no,(!isset($loanDetails['loanMember']->gst_no)) ? NULL : $loanDetails['loanMember']->gst_no,$request['file_charge'],$getHeadSettingFileCHrage->gst_percentage,($IntraStateFile == false ? $gstAmountFileChrage : 0 ) ,($IntraStateFile == true ? $gstAmountFileChrage/2 : 0),($IntraStateFile == true ? $gstAmountFileChrage/2 : 0),($IntraStateFile == true ? $gstAmountFileChrage+ $request['file_charge'] + $gstAmountFileChrage  : $request['file_charge'] + $gstAmountFileChrage),90,$request['date'],'FC90',$loanDetails['loanMember']->id,$loanDetails->branch_id);
      //DD( $createdGstTransaction);
  }
                /************* Head Implement ****************/
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                //$loan_amount=$loanDetails->amount;
                $loan_amount = $request['file_charge'];
                $dayBookRef = CommanController::createBranchDayBookReference($loan_amount + $insurance_amount);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $loan_amount . '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $branchDayBook = CommanController::branchDayBookNew($dayBookRef, $loanDetails->branch_id, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount. '', 'To ' . $loanDetails->account_number . ' A/C Dr ' . $insurance_amount. '', 'To Bank A/C Cr ' . $loanDetails->account_number . '', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $created_at = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 90, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'CR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
	            $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL,294, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $insurance_amount, $insurance_amount, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'CR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($dayBookRef, $loanDetails->branch_id, $bank_id = NULL, $bank_ac_id = NULL, 28, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $branch_id_to = NULL, $loanDetails->branch_id, $loan_amount, $loan_amount, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $loanDetails->branch_id, getBranchDetail($loanDetails->branch_id)->name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,3,13,90,$head4=NULL,$head5=NULL,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',0,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);
                    $cashTransaction = CommanController::createAllTransaction($dayBookRef,$loanDetails->branch_id,$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,58,$loanId,$createDayBook,$associate_id=NULL,$loanDetails->applicant_id,$branch_id_to=NULL,$loanDetails->branch_id,$loan_amount,$loan_amount,$loan_amount,'To '.$loanDetails->account_number.' A/C Dr '.$loan_amount.'','CR',5,'INR',$loanDetails->applicant_id,getMemberData($loanDetails->applicant_id)->first_name.' '.getMemberData($loanDetails->applicant_id)->last_name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['date']))),$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$request['date']);*///
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 58, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $loan_amount, '' . $loanDetails->account_number . ' file charge', 'DR', 0, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $memberTransaction = CommanController::memberTransactionNew($dayBookRef, 5, 526, $loanId, $createDayBook, $associate_id = NULL, $loanDetails->applicant_id, $loanDetails->branch_id, $bank_id = NULL, $account_id = NULL, $insurance_amount, '' . $loanDetails->account_number . ' insurance charge', 'DR', 5, 'INR', $loanDetails->applicant_id, getMemberData($loanDetails->applicant_id)->first_name . ' ' . getMemberData($loanDetails->applicant_id)->last_name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['date']))) , $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $backDateloanChargeBalance = CommanController::updateBackDateloanChargeBalance($loan_amount, $loanDetails->branch_id, $request['date']);
                /************* Head Implement ****************/
            }
            if($request->payment_mode == 1 || $request->payment_mode == 0){
                $text = 'Dear Member, Loan of Rs.'. $loanDetails->amount. ' is transferred to your '.$transferMode.'  on '. date('d/m/Y',strtotime(convertDate($request['date']))).' Loan A/C No ' .$loanDetails->account_number.' EMI Rs. '. $loanDetails->emi_amount.' '.$Mode.' Samraddh Bestwin Microfinance';;
                $temaplteId = 1207166308925961267;
                $contactNumber = array();
                $memberDetail = Member::find($loanDetails->member_id);
                $contactNumber[] = $memberDetail->mobile_no;
                $sendToMember = new Sms();
                $sendToMember->sendSms( $contactNumber, $text, $temaplteId);
            }
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return redirect()
            ->route('admin.grouploan.request')
            ->with('success', 'Loan amount has been successfully transferred!');
        /*}else{
            return back()->with('alert', 'SSB Account does not exists!');
        }*/
    }
    public static function checkCreateBranchCashDR($branch_id, $date, $amount, $type)
    {
        $entryDate = date("Y-m-d", strtotime(convertDate($date)));
        $entryTime = date("H:i:s");
        $currentDateRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($currentDateRecord)
        {
            $Result = \App\Models\BranchCash::find($currentDateRecord->id);
            $data['balance'] = $currentDateRecord->balance - $amount;
            /*if($type == 0){
                $data['balance']=$currentDateRecord->balance-$amount;
            }elseif($type == 1){
                $data['loan_balance']=$currentDateRecord->loan_balance-$amount;
            }*/
            $data['updated_at'] = $date;
            $Result->update($data);
            $insertid = $currentDateRecord->id;
        }
        else
        {
            $oldDateRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', '<', $entryDate)->orderby('entry_date', 'DESC')
                ->first();
            if ($oldDateRecord)
            {
                $Result1 = \App\Models\BranchCash::find($oldDateRecord->id);
                $data1['closing_balance'] = $oldDateRecord->balance;
                //$data1['loan_closing_balance']=$oldDateRecord->loan_balance;
                $Result1->update($data1);
                $insertid1 = $oldDateRecord->id;
                $data['balance'] = $oldDateRecord->balance - $amount;
                /*if($type == 0){
                    $data['balance']=$oldDateRecord->balance-$amount;
                }else{
                    $data['balance']=$oldDateRecord->balance;
                }
                if($type == 1){
                    $data['loan_balance']=$oldDateRecord->loan_balance-$amount;
                }
                else{
                    $data['loan_balance']=$oldDateRecord->loan_balance;
                }*/
                $data['opening_balance'] = $oldDateRecord->balance;
                $data['closing_balance'] = 0;
                //$data['loan_opening_balance']=$oldDateRecord->loan_balance;
                //$data['loan_closing_balance']=0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = $type;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($date)));
                $transcation = \App\Models\BranchCash::create($data);
                $insertid = $transcation->id;
            }
            else
            {
                $data['balance'] = 0 - $amount;
                /*if($type == 0){
                    $data['balance']=0-$amount;
                }
                else                {
                    $data['balance']=0;
                }
                if($type == 1){
                    $data['loan_balance']=0-$amount;
                }
                else{
                   $data['loan_balance']=0;
                }*/
                $data['opening_balance'] = 0;
                $data['closing_balance'] = 0;
                //$data['loan_opening_balance']=0;
                //$data['loan_closing_balance']=0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = $type;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($date)));
                $transcation = \App\Models\BranchCash::create($data);
                $insertid = $transcation->id;
            }
        }
        return true;
    }
    public static function checkCreateBranchClosingDR($branch_id, $date, $amount, $type)
    {
        $entryDate = date("Y-m-d", strtotime(convertDate($date)));
        $entryTime = date("H:i:s");
        $currentDateRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($currentDateRecord)
        {
            $Result = \App\Models\BranchClosing::find($currentDateRecord->id);
            $data['balance'] = $currentDateRecord->balance - $amount;
            $data['updated_at'] = $date;
            $Result->update($data);
            $insertid = $currentDateRecord->id;
        }
        else
        {
            $oldDateRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', '<', $entryDate)->orderby('entry_date', 'DESC')
                ->first();
            if ($oldDateRecord)
            {
                $Result1 = \App\Models\BranchClosing::find($oldDateRecord->id);
                $data1['closing_balance'] = $oldDateRecord->balance;
                //$data1['loan_closing_balance']=$oldDateRecord->loan_balance;
                $Result1->update($data1);
                $insertid1 = $oldDateRecord->id;
                $data['balance'] = $oldDateRecord->balance - $amount;
                /*if($type == 0){
                    $data['balance']=$oldDateRecord->balance-$amount;
                }else{
                    $data['balance']=$oldDateRecord->balance;
                }
                if($type == 1){
                    $data['loan_balance']=$oldDateRecord->loan_balance-$amount;
                }
                else{
                    $data['loan_balance']=$oldDateRecord->loan_balance;
                }*/
                $data['opening_balance'] = $oldDateRecord->balance;
                $data['closing_balance'] = 0;
                //$data['loan_opening_balance']=$oldDateRecord->loan_balance;
                //$data['loan_closing_balance']=0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = $type;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($date)));
                $transcation = \App\Models\BranchClosing::create($data);
                $insertid = $transcation->id;
            }
            else
            {
                $data['balance'] = 0 - $amount;
                /*if($type == 0){
                    $data['balance']=0-$amount;
                }
                else                {
                    $data['balance']=0;
                }
                if($type == 1){
                    $data['loan_balance']=0-$amount;
                }
                else{
                   $data['loan_balance']=0;
                }*/
                $data['opening_balance'] = 0;
                $data['closing_balance'] = 0;
                //$data['loan_opening_balance']=0;
                //$data['loan_closing_balance']=0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = $type;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($date)));
                $transcation = \App\Models\BranchClosing::create($data);
                $insertid = $transcation->id;
            }
        }
        return true;
    }
    /**
     * Loan recovery listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function recovery()
    {
        if (check_my_permission(Auth::user()->id, "28") != "1")
        {
            return redirect()
                ->route('admin.dashboard');
        }
        $data['title'] = 'Loan Recovery';
        $data['cBanks'] = SamraddhBank::select('id','bank_name')->with(['bankAccount'=>function($query){
            $query->select('id','bank_id');
        }])->get();
        $data['cheques'] = ReceivedCheque::select('cheque_no', 'deposit_account_id')->where('status', 2)
            ->get();
        return view('templates.admin.loan.loan_recovery', $data);
    }
    /**
     *Group loan recovery listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function groupLoanRecovery()
    {
        if (check_my_permission(Auth::user()->id, "29") != "1")
        {
            return redirect()
                ->route('admin.dashboard');
        }
        $data['title'] = 'Group Loan Recovery';
        $data['cBanks'] = SamraddhBank::select('id','bank_name')->with(['bankAccount'=>function($query){
            $query->select('id','bank_id');
        }])->get();
        $data['cheques'] = ReceivedCheque::select('cheque_no', 'deposit_account_id')->where('status', 2)
            ->get();
        return view('templates.admin.loan.group_loan_recovery', $data);
    }
    /**
     * Loan recovery ajax listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function recoveryListAjax(Request $request)
    {
        if ($request->ajax())
        {
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $data = Memberloans::select('id','insurance_charge','branch_id','applicant_id','loan_type','emi_option','file_charges','file_charge_type','deposite_amount','emi_amount','amount','emi_period','received_emi_amount','approve_date','account_number','approve_date','created_at','associate_member_id','status' ,'approved_date','insurance_cgst','insurance_charge_igst','insurance_sgst','filecharge_cgst','filecharge_sgst','filecharge_igst','transfer_amount'
                )->with(['CollectorAccount'=> function ($q){
                    $q->with(['member_collector']);
                 }])->with(['loanMember'=>function($query){
                $query->select('id','member_id','first_name','last_name')->with(['savingAccount_Custom'=>function($q){
                    $q->select('id','member_id','balance','account_no');
                }]);
            }])->with(['loanMemberAssociate'=>function($query){
                $query->select('id','first_name','last_name','associate_no');
            }])->with(['loanBranch'=>function($q){
                $q->select('id','name','branch_code','sector','regan','zone');
            }])->with(['loanMemberCustom' => function ($q)
            {
                $q->select('id', 'member_id', 'first_name', 'last_name', 'associate_no');
            }
            ])->with(['loanTransaction'=>function($query){
                $query->select('id','account_number','deposit');
            }])->where('loan_type', '!=', 3)->whereIn('status',[3,4]);
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['date_from'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if ($arrFormData['date_to'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(approve_date)') , [$startDate, $endDate]);
                }
                if ($arrFormData['plan'] != '')
                {
                    $planId = $arrFormData['plan'];
                    $data = $data->where('loan_type', '=', $planId);
                }
                if ($arrFormData['loan_account_number'] != '')
                {
                    $loan_account_number = $arrFormData['loan_account_number'];
                    $data = $data->where('account_number', '=', $loan_account_number);
                }
                if ($arrFormData['member_name'] != '')
                {
                    $name = $arrFormData['member_name'];
                    $data = $data->whereHas('loanMember', function ($query) use ($name)
                    {
                        $query->where('members.first_name', 'LIKE', '%' . $name . '%')->orWhere('members.last_name', 'LIKE', '%' . $name . '%')->orWhere(DB::raw('concat(members.first_name," ",members.last_name)') , 'LIKE', "%$name%");
                    });
                }
                if ($arrFormData['member_id'] != '')
                {
                    $meid = $arrFormData['member_id'];
                    $data = $data->whereHas('loanMember', function ($query) use ($meid)
                    {
                        $query->where('members.member_id', 'LIKE', '%' . $meid . '%');
                    });
                }
                if ($arrFormData['associate_code'] != '')
                {
                    $associateCode = $arrFormData['associate_code'];
                    $data = $data->whereHas('loanMemberAssociate', function ($query) use ($associateCode)
                    {
                        $query->where('members.associate_no', 'LIKE', '%' . $associateCode . '%');
                    });
                }
                if ($arrFormData['status'] != '')
                {
                    $status = $arrFormData['status'];
                    $data = $data->where('status', '=', $status);
                }
            }
            // else
            // {
            //     $data = $data->where('status', '=', 3);
            // }
            $count = $data->count('id');
            $data = $data->orderby('id', 'DESC')
                ->offset($_POST['start'])->limit($_POST['length'])->get();
            $totalCount = $count;
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $row)
            {
                $sno++;
                $val['DT_RowIndex'] = $sno;
                $val['branch'] = $row['loanBranch']->name;
                $val['branch_code'] = $row['loanBranch']->branch_code;
                $val['sector_name'] = $row['loanBranch']->sector;
                $val['region_name'] = $row['loanBranch']->regan;
                $val['zone_name'] = $row['loanBranch']->zone;
                $val['account_number'] = $row->account_number;
                $val['member_name'] = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                $val['member_id'] = $row['loanMember']->member_id;
                if ($row->loan_type == 1)
                {
                    $plan_name = 'Personal Loan';
                }
                elseif ($row->loan_type == 2)
                {
                    $plan_name = 'Staff Loan(SL)';
                }
                elseif ($row->loan_type == 3)
                {
                    $plan_name = 'Group Loan';
                }
                elseif ($row->loan_type == 4)
                {
                    $plan_name = 'Loan against Investment plan(DL) ';
                }
                $val['plan_name'] = $plan_name;
                if ($row->emi_option == 1)
                {
                    $tenure = $row->emi_period . ' Months';
                }
                elseif ($row->emi_option == 2)
                {
                    $tenure = $row->emi_period . ' Weeks';
                }
                elseif ($row->emi_option == 3)
                {
                    $tenure = $row->emi_period . ' Days';
                }
                $val['tenure'] = $tenure;
                if ($row->file_charges)
                {
                    $file_charge = $row->file_charges . ' <i class="fa fa-inr"></i>';
                }
                else
                {
                    $file_charge = 'N/A';
                }
                $val['file_charge'] = $file_charge;
		        $val['insurance_charge'] = $row->insurance_charge. ' <i class="fa fa-inr"></i>';;
                $file_charges_payment_mode = 'N/A';
                if ($row->file_charge_type)
                {
                    $file_charges_payment_mode = 'Loan';
                }
                else
                {
                    $file_charges_payment_mode = 'Cash';
                }
                if (isset($row->insurance_cgst) || isset($row->filecharge_cgst))
                {
                    $insurance_cgst = $row->insurance_cgst . ' <i class="fa fa-inr"></i>';
                    $insurance_sgst = $row->insurance_sgst . ' <i class="fa fa-inr"></i>';
                    $insurance_igst = 'N/A';
                    $filecharge_cgst = $row->filecharge_cgst . ' <i class="fa fa-inr"></i>';
                    $filecharge_sgst = $row->filecharge_sgst . ' <i class="fa fa-inr"></i>';
                    $filecharge_igst = 'N/A';
                }
                elseif (isset($row->insurance_charge_igst) || isset($row->filecharge_igst))
                {
                    $insurance_igst = $row->insurance_charge_igst . ' <i class="fa fa-inr"></i>';
                    $insurance_cgst = 'N/A';
                    $insurance_sgst = 'N/A';
                    $filecharge_igst = $row->filecharge_igst . ' <i class="fa fa-inr"></i>';
                    $filecharge_cgst = 'N/A' . ' <i class="fa fa-inr"></i>';
                    $filecharge_sgst = 'N/A';
                }
                else
                {
                    $insurance_cgst = 'N/A';
                    $insurance_sgst = 'N/A';
                    $insurance_igst='N/A';
                    $filecharge_igst = 'N/A';
                    $filecharge_sgst = 'N/A';
                    $filecharge_cgst='N/A';
                }
                $val['cgst_insurance_charge'] = $insurance_cgst;
                $val['sgst_insurance_charge'] = $insurance_sgst;
                $val['igst_insurance_charge'] = $insurance_igst;
                $val['igst_file_charge'] = $filecharge_igst;
                $val['cgst_file_charge'] = $filecharge_cgst;
                $val['sgst_file_charge'] = $filecharge_sgst;
                $val['file_charges_payment_mode'] = $file_charges_payment_mode;
                $totalbalance = $row->emi_period * $row->emi_amount;
                if(isset($row->transfer_amount) && !empty($row->transfer_amount)){
                    $val['transfer_amount'] = $row->transfer_amount . ' <i class="fas fa-rupee-sign"></i>';
                }else{
                    $val['transfer_amount'] ='N/A';
                }
                $val['loan_amount'] = $row->amount . ' <i class="fas fa-rupee-sign"></i>';
                $totalbalance = $row->emi_period * $row->emi_amount;
                $Finaloutstanding_amount = $totalbalance - $row->received_emi_amount;
                $val['outstanding_amount'] = $Finaloutstanding_amount . ' <i class="fa fa-inr"></i>';
                if ($row->approve_date)
                {
                    if ($row->emi_option == 1)
                    {
                        $last_recovery_date = date('d/m/Y', strtotime("+" . $row->emi_period . " months", strtotime($row->approve_date)));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                }
                else
                {
                    $last_recovery_date = 'N/A';
                }
                $val['last_recovery_date'] = $last_recovery_date;
                if (isset($row['loanMemberCustom']->id))
                { // getMemberData($row->associate_member_id)
                    $associate_code = $row['loanMemberCustom']; //getMemberData($row->associate_member_id);
                    $val['associate_code'] = $associate_code->associate_no;
                }
                else
                {
                    $val['associate_code'] = 'N/A';
                }
                //$val['associate_code'] = $row['loanBranch']->name;
                if (isset($row['loanMemberCustom']->id))
                {
                    $associate_name = $row['loanMemberCustom']->first_name . ' ' . $row['loanMemberCustom']->last_name;
                    $val['associate_name'] = $associate_name;
                }
                else{
                    $val['associate_name'] ='N/A';
                }
                $url2 =URL::to("admin/loan/deposit/emi-transactions/".$row->id."/".$row->loan_type."");
                if (isset($row->account_number))
                {
                     $btn = '<a class=" " href="'.$url2.'" title="View Statement" target="_blank">' .$row['loanTransaction']->sum('deposit').'</a>';
                    $val['total_payment'] =$btn.' <i class="fa fa-inr"></i>';
                }
                else
                {
                    $val['total_payment'] = 'N/A';
                }
                if ($row['approved_date']){
                    $val['approved_date'] = date("d/m/Y", strtotime($row['approved_date']));
                }
                else
                {
                    $val['approved_date'] = 'N/A';
                }
                if ($row['approve_date']){
                    $val['sanction_date'] = date("d/m/Y", strtotime($row['approve_date']));
                }
                else
                {
                    $val['sanction_date'] = 'N/A';
                }
                $val['application_date'] = date("d/m/Y", strtotime($row['created_at']));
                if ($row->status == 0)
                {
                    $status = 'Pending';
                }
                else if ($row->status == 1)
                {
                    $status = 'Approved';
                }
                else if ($row->status == 2)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 3)
                {
                    $status = 'Clear';
                }
                else if ($row->status == 4)
                {
                    $status = 'Due';
                }
                $val['status'] = $status;
                if(isset($row['CollectorAccount']['member_collector']['associate_no'])) {
                    $val['collectorcode']=$row['CollectorAccount']['member_collector']['associate_no'];
                }
                else{
                $val['collectorcode']= "N/A";
                }
                if(isset($row['CollectorAccount']['member_collector']['first_name'])) {
                $val['collectorname']=$row['CollectorAccount']['member_collector']['first_name'].' '.$row['CollectorAccount']['member_collector']['last_name'];
                }
                else{
                $val['collectorname'] = "N/A";
                }
                if ($row->emi_option == 1)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 1200;
                }
                elseif ($row->emi_option == 2)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 5200;
                }
                elseif ($row->emi_option == 3)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 36500;
                }
                $closingAmount = round($row->due_amount + $closingAmountROI);
                if ($row['loanMember']['savingAccount_Custom'])
                {
                    $ssbBalance =$row['loanMember']['savingAccount_Custom']->balance;
                    $ssbId =$row['loanMember']['savingAccount_Custom']->id;
                    $ssbAccount =$row['loanMember']['savingAccount_Custom']->account_no;
                }
                else
                {
                    $ssbBalance = 0;
                    $ssbId = 0;
                    $ssbAccount = 0;
                }
                $viewUrl = URL::to("admin/loan/view/" . $row->id . "/" . $row->loan_type . "");
                $purl = URL::to("admin/loan/print/" . $row->id . "/" . $row->loan_type . "");
                $turl = URL::to("admin/loan/emi-transactions/" . $row->id . "/" . $row->loan_type . "");
                $urlCom = URL::to("admin/loan/commission/" . $row->id . "");
                $pdf = URL::to("admin/loan/download-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
                $print = URL::to("admin/loan/print-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9"></i></a><div class="dropdown-menu dropdown-menu-right">';
                $btn .= '<a class="dropdown-item" href="' . $viewUrl . '" title="View"><i class="icon-pencil5  mr-2"></i>View</a>  ';
                if ($row->status == 4)
                {
                    if ($row->emi_option == 1)
                    {
                        $closingDate = date('Y-m-d', strtotime("+" . $row->emi_period . " months", strtotime($row['created_at'])));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $row['created_at'];
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $closingDate = date('Y-m-d', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $row['created_at'];
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $closingDate = date('Y-m-d', $date);
                    }
                    if (date('Y-m-d') > $closingDate)
                    {
                        if ($row->emi_option == 1)
                        {
                            $loanStartDate = $closingDate;
                            $loanComplateDate = date('Y-m-d');
                            $ts1 = strtotime($loanStartDate);
                            $ts2 = strtotime($loanComplateDate);
                            $year1 = date('Y', $ts1);
                            $year2 = date('Y', $ts2);
                            $month1 = date('m', $ts1);
                            $month2 = date('m', $ts2);
                            $penaltyTime = (($year2 - $year1) * 12) + ($month2 - $month1);
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 2)
                        {
                            $loanStartDate = $closingDate;
                            $startDate = date("m/d/Y", strtotime(convertDate($loanStartDate)));
                            $endDate = date('m/d/Y');
                            $first = DateTime::createFromFormat('m/d/Y', $startDate);
                            $second = DateTime::createFromFormat('m/d/Y', $endDate);
                            $penaltyTime = floor($first->diff($second)->days / 7);
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 3)
                        {
                            $startDate = strtotime($closingDate);
                            $endDate = strtotime(date('Y-m-d'));
                            $datediff = $endDate - $startDate;
                            $penaltyTime = round($datediff / (60 * 60 * 24));
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 4)
                        {
                            $penaltyTime = '';
                            $penaltyAmount = '';
                        }
                    }
                    else
                    {
                        $penaltyTime = '';
                        $penaltyAmount = '';
                    }
                    if ($row->emi_option == 1)
                    {
                        $loanComplateDate = date('Y-m-d');
                        $dueStartDate = $row->approve_date;
                        $dts1 = strtotime($dueStartDate);
                        $dts2 = strtotime($loanComplateDate);
                        $dyear1 = date('Y', $dts1);
                        $dyear2 = date('Y', $dts2);
                        $dmonth1 = date('m', $dts1);
                        $dmonth2 = date('m', $dts2);
                        $dueTime = (($dyear2 - $dyear1) * 12) + ($dmonth2 - $dmonth1);
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $loanStartDate = $row->approve_date;
                        $startDate = date("m/d/Y", strtotime(convertDate($loanStartDate)));
                        $endDate = date('m/d/Y');
                        $first = DateTime::createFromFormat('m/d/Y', $startDate);
                        $second = DateTime::createFromFormat('m/d/Y', $endDate);
                        $dueTime = floor($first->diff($second)->days / 7);
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $startDate = strtotime($row->approve_date);
                        $endDate = strtotime(date('Y-m-d'));
                        $datediff = $endDate - $startDate;
                        $dueTime = round($datediff / (60 * 60 * 24));
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 4)
                    {
                        $dueAmount = 0;
                    }
                    $LoanCreatedDate = date('Y-m-d',strtotime($row->approve_date));
                    $LoanCreatedYear = date('Y',strtotime($row->approve_date));
                    $LoanCreatedMonth = date('m',strtotime($row->approve_date));
                    $LoanCreateDate = date('d',strtotime($row->approve_date));
                    $currentDate = date('Y-m-d');
                    $CurrentDate= date('d');
                    $CurrentDateYear = date('Y');
                    $CurrentDateMonth = date('m');
                    if ($row->emi_option == 1){
                        $daysDiff =(($CurrentDateYear - $LoanCreatedYear) * 12) + ($CurrentDateMonth - $LoanCreatedMonth);
                    }
                    if ($row->emi_option == 2){
                        $daysDiff =today()->diffInDays($LoanCreatedDate);
                        $daysDiff = $daysDiff/7;
                    }
                    if ($row->emi_option == 3){
                        $daysDiff =today()->diffInDays($LoanCreatedDate);
                    }
                    $nextEmiDates = $this->nextEmiDates($daysDiff,$LoanCreatedDate);
                    $EmiDates = $this->emiDates($LoanCreatedDate,$row->emi_period);
                    $emi_date = $nextEmiDates;
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item pay-emi" href="javascript:void(0);" title="Pay EMI" data-loan-id="' . $row->id . '" data-loan-emi="' . $row->emi_amount . '" data-ssb-amount="' . $ssbBalance . '" data-ssb-id="' . $ssbId . '" data-recovered-amount="' . loanOutsandingAmount($row->id, $row->account_number) . '"  data-last-recovered-amount="' . lastLoanRecoveredAmount($row->id, 'loan_id') . '" data-closing-amount="' . $closingAmount . '" data-due-amount="' . $dueAmount . '" data-penalty-amount="' . $penaltyAmount . '" data-penalty-time="' . $penaltyTime . '" data-toggle="modal" data-target="#pay-loan-emi" data-ssb-account="' . $ssbAccount . '"  data-emiDate = "'.implode(',',$emi_date).'" data-AllemiDate = "'.implode(',',$EmiDates).'" data-emiOption = "'.$row->emi_option.'"><i class="icon-pencil5  mr-2" ></i>Pay EMI</a>  ';
                        // if($row->emi_option ==1)
                        // {
                        //     $btn .= '<a class="dropdown-item pay-emi" href="javascript:void(0);" title="Pay Advanced EMI" data-loan-id="' . $row->id . '" data-loan-emi="' . $row->emi_amount . '" data-ssb-amount="' . $ssbBalance . '" data-ssb-id="' . $ssbId . '" data-recovered-amount="' . loanOutsandingAmount($row->id, $row->account_number) . '"  data-last-recovered-amount="' . lastLoanRecoveredAmount($row->id, 'loan_id') . '" data-closing-amount="' . $closingAmount . '" data-due-amount="' . $dueAmount . '" data-penalty-amount="' . $penaltyAmount . '" data-penalty-time="' . $penaltyTime . '" data-toggle="modal" data-target="#pay-loan-emi"  data-emiDate = "'.implode(',',$emi_date).'" data-AllemiDate = "'.implode(',',$EmiDates).'" data-emiOption = "'.$row->emi_option.'"><i class="icon-pencil5  mr-2"></i>Pay  Advanced EMI</a>  ';
                        // }
                    }
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item close-loan" href="javascript:void(0);" data-id="' . $row->id . '"><i class="far fa-calendar-check"></i>Close Loan</a>';
                    }
                }
                if (Auth::user()->id != "13")
                {
                    $btn .= '<a class="dropdown-item" href="' . $purl . '" target="_blank"><i class="fa fa-print mr-2" aria-hidden="true"></i>Print</a>';
                }
                $btn .= '<a class="dropdown-item" href="' . $turl . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>Transactions</a>';
                $btn .= '<a class="dropdown-item" href="' . $urlCom . '"><i class="fas fa-percent text-default mr-2"></i>Loan Commission</a>';
                if ($row->status == 3)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $pdf . '"><i class="fas fa-download text-default mr-2"></i>Download No Dues</a>';
                        $btn .= '<a class="dropdown-item" href="' . $print . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>print No Dues</a>';
                    }
                }
                $btn .= '</div></div></div>';
                $val['action'] = $btn;
                $rowReturn[] = $val;
            }
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Loan recovery ajax listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function groupLoanRecoveryListAjax(Request $request)
    {
        if ($request->ajax())
        {
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $data = Grouploans::with(['loanMember' => function($q){ $q->select('id','member_id','first_name','last_name')->with(['savingAccountGroupLoanCustom'=>function($q){
                $q->select('id','member_id','account_no','balance');
            }]); }])
            ->with(['CollectorAccount'=> function ($q){
                    $q->with(['member_collector']);
            }])
            ->with(['loanMemberAssociate'=>function($query){
                $query->select('id','first_name','last_name','associate_no');
            }])->with(['gloanBranch'=>function($q){
                $q->select('id','name','branch_code','sector','regan','zone');
            }])->with(['loanTransaction'=>function($query){
                $query->select('id','deposit','group_loan_id','account_number');
            }]);
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['date_from'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if ($arrFormData['date_to'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(approve_date)') , [$startDate, $endDate]);
                }
                if ($arrFormData['loan_account_number'] != '')
                {
                    $loan_account_number = $arrFormData['loan_account_number'];
                    $data = $data->where('account_number', '=', $loan_account_number);
                }
                if ($arrFormData['member_name'] != '')
                {
                    $name = $arrFormData['member_name'];
                    $data = $data->whereHas('loanMember', function ($query) use ($name)
                    {
                        $query->where('members.first_name', 'LIKE', '%' . $name . '%')->orWhere('members.last_name', 'LIKE', '%' . $name . '%')->orWhere(DB::raw('concat(members.first_name," ",members.last_name)') , 'LIKE', "%$name%");
                    });
                }
                if ($arrFormData['member_id'] != '')
                {
                    $meid = $arrFormData['member_id'];
                    $data = $data->whereHas('loanMember', function ($query) use ($meid)
                    {
                        $query->where('members.member_id', 'LIKE', '%' . $meid . '%');
                    });
                }
                if ($arrFormData['associate_code'] != '')
                {
                    $associateCode = $arrFormData['associate_code'];
                    $data = $data->whereHas('loanMemberAssociate', function ($query) use ($associateCode)
                    {
                        $query->where('members.associate_no', 'LIKE', '%' . $associateCode . '%');
                    });
                }
				if ($arrFormData['group_loan_common_id'] != '')
                {
                    $group_loan_common_id = $arrFormData['group_loan_common_id'];
                    $data = $data->where('group_loan_common_id', '=', $group_loan_common_id);
                }
                if ($arrFormData['status'] != '')
                {
                    $status = $arrFormData['status'];
                    $data = $data->where('status', '=', $status);
                }
            }
            else
            {
                $data = $data->where('status', '=', 3);
            }
            $count = $data->count('id');
            $data = $data->orderby('id', 'DESC')
                ->offset($_POST['start'])->limit($_POST['length'])->get();
            $totalCount = $count;
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $row)
            {
                $sno++;
                $val['DT_RowIndex'] = $sno;
                $val['branch'] = $row['gloanBranch']->name;
                $val['branch_code'] = $row['gloanBranch']->branch_code;
                $val['sector_name'] = $row['gloanBranch']->sector;
                $val['region_name'] = $row['gloanBranch']->regan;
                $val['zone_name'] = $row['gloanBranch']->zone;
                $val['group_loan_id'] = $row->group_loan_common_id;
                $val['account_number'] = $row->account_number;
                $val['member_name'] = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                $val['member_id'] = $row['loanMember']->member_id;
                $val['plan_name'] = 'Group Loan';
                if (isset($row->insurance_cgst) || isset($row->filecharge_cgst))
                {
                    $insurance_cgst = $row->insurance_cgst . ' <i class="fa fa-inr"></i>';
                    $insurance_sgst = $row->insurance_sgst . ' <i class="fa fa-inr"></i>';
                    $insurance_igst = 'N/A';
                    $filecharge_cgst = $row->filecharge_cgst . ' <i class="fa fa-inr"></i>';
                    $filecharge_sgst = $row->filecharge_sgst . ' <i class="fa fa-inr"></i>';
                    $filecharge_igst = 'N/A';
                }
                elseif (isset($row->insurance_charge_igst) || isset($row->filecharge_igst))
                {
                    $insurance_igst = $row->insurance_charge_igst . ' <i class="fa fa-inr"></i>';
                    $insurance_cgst = 'N/A';
                    $insurance_sgst = 'N/A';
                    $filecharge_igst = $row->filecharge_igst . ' <i class="fa fa-inr"></i>';
                    $filecharge_cgst = 'N/A';
                    $filecharge_sgst = 'N/A';
                }
                else
                {
                    $insurance_cgst = 'N/A';
                    $insurance_sgst = 'N/A';
                    $insurance_igst='N/A';
                    $filecharge_igst = 'N/A';
                    $filecharge_sgst = 'N/A';
                    $filecharge_cgst='N/A';
                }
                $val['cgst_insurance_charge'] = $insurance_cgst;
                $val['sgst_insurance_charge'] = $insurance_sgst;
                $val['igst_insurance_charge'] = $insurance_igst;
                $val['igst_file_charge'] = $filecharge_igst;
                $val['cgst_file_charge'] = $filecharge_cgst;
                $val['sgst_file_charge'] = $filecharge_sgst;
                if ($row->emi_option == 1)
                {
                    $tenure = $row->emi_period . ' Months';
                }
                elseif ($row->emi_option == 2)
                {
                    $tenure = $row->emi_period . ' Weeks';
                }
                elseif ($row->emi_option == 3)
                {
                    $tenure = $row->emi_period . ' Days';
                }
                $val['tenure'] = $tenure;
                if ($row->file_charges)
                {
                    $file_charge = $row->file_charges . ' <i class="fa fa-inr"></i>';
                }
                else
                {
                    $file_charge = 'N/A';
                }
	            $val['insurance_charge'] = $row->insurance_charge. ' <i class="fa fa-inr"></i>';;
                $val['file_charge'] = $file_charge;
                $file_charges_payment_mode = 'N/A';
                if ($row->file_charge_type)
                {
                    $file_charges_payment_mode = 'Loan';
                }
                else
                {
                    $file_charges_payment_mode = 'Cash';
                }
                $val['file_charges_payment_mode'] = $file_charges_payment_mode;
                $val['loan_amount'] = $row->transfer_amount . ' <i class="fa fa-inr"></i>';
                $val['amount'] = $row->amount . ' <i class="fas fa-rupee-sign"></i>';
                $totalbalance = $row->emi_period * $row->emi_amount;
                $Finaloutstanding_amount = $totalbalance - $row->received_emi_amount;
                $outstanding_amount = $Finaloutstanding_amount . ' <i class="fa fa-inr"></i>';
                $val['outstanding_amount'] = $outstanding_amount;
                if ($row->approve_date)
                {
                    if ($row->emi_option == 1)
                    {
                        $last_recovery_date = date('d/m/Y', strtotime("+" . $row->emi_period . " months", strtotime($row->approve_date)));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $row->approve_date;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $last_recovery_date = date('d/m/Y', $date);
                    }
                }
                else
                {
                    $last_recovery_date = 'N/A';
                }
                $val['last_recovery_date'] = $last_recovery_date;
                $val['associate_code'] = $row['loanMemberAssociate']->associate_no;
                $val['associate_name'] = $row['loanMemberAssociate']->first_name . ' ' . $row['loanMemberAssociate']->last_name;
                $url2 =URL::to("admin/loan/deposit/emi-transactions/".$row->id."/".$row->loan_type."");
                if (isset($row->account_number))
                {
                     $btn = '<a class=" " href="'.$url2.'" title="View Statement" target="_blank">' .$row['loanTransaction']->sum('deposit').'</a>';
                    $val['total_payment'] =$btn.' <i class="fa fa-inr"></i>';
                }
                else
                {
                    $val['total_payment'] = 'N/A';
                }
                // $val['total_payment'] = $row['loanTransaction']->sum('deposit'). ' <i class="fa fa-inr"></i>';
                if ($row['approved_date']){
                    $val['approved_date'] = date("d/m/Y", strtotime($row['approved_date']));
                }
                else
                {
                    $val['approved_date'] = 'N/A';
                }
                if ($row['approve_date']){
                    $val['sanction_date'] = date("d/m/Y", strtotime($row['approve_date']));
                }
                else
                {
                    $val['sanction_date'] = 'N/A';
                }
                $val['application_date'] = date("d/m/Y", strtotime($row['created_at']));
                if ($row->status == 0)
                {
                    $status = 'Pending';
                }
                else if ($row->status == 1)
                {
                    $status = 'Approved';
                }
                else if ($row->status == 2)
                {
                    $status = 'Rejected';
                }
                else if ($row->status == 3)
                {
                    $status = 'Clear';
                }
                else if ($row->status == 4)
                {
                    $status = 'Due';
                }
                $val['status'] = $status;
                if(isset($row['CollectorAccount']['member_collector']['associate_no'])) {
                    $val['collectorcode']=$row['CollectorAccount']['member_collector']['associate_no'];
                }
                else{
                $val['collectorcode']= "N/A";
                }
                if(isset($row['CollectorAccount']['member_collector']['first_name'])) {
                $val['collectorname']=$row['CollectorAccount']['member_collector']['first_name'].' '.$row['CollectorAccount']['member_collector']['last_name'];
                }
                else{
                $val['collectorname'] = "N/A";
                }
                if ($row->emi_option == 1)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 1200;
                }
                elseif ($row->emi_option == 2)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 5200;
                }
                elseif ($row->emi_option == 3)
                {
                    $closingAmountROI = $row->due_amount * $row->ROI / 36500;
                }
                $closingAmount = round($row->due_amount + $closingAmountROI);
                $ssbAmount = $row->loanSavingAccount2; //getMemberSsbAccountDetail($row['loanMember']->id);
                if ($ssbAmount)
                {
                    $ssbBalance = $ssbAmount->balance;
                    $ssbId = $ssbAmount->id;
                    $ssbAccount =$ssbAmount->account_no;
                }
                else
                {
                    $ssbBalance = 0;
                    $ssbId = 0;
                    $ssbAccount =0;
                }
                $viewUrl = URL::to("admin/loan/view/" . $row->member_loan_id . "/3");
                $purl = URL::to("admin/loan/print/" . $row->id . "/3");
                $turl = URL::to("admin/loan/emi-transactions/" . $row->id . "/3");
                $urlCom = URL::to("admin/loan/commission-group/" . $row->id . "");
                $pdf = URL::to("admin/loan/download-recovery-clear/" . $row->id . "/3");
                $print = URL::to("admin/loan/print-recovery-clear/" . $row->id . "/3");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9"></i></a><div class="dropdown-menu dropdown-menu-right">';
                $btn .= '<a class="dropdown-item" href="' . $viewUrl . '" title="View"><i class="icon-pencil5  mr-2"></i>View</a>  ';
                $created_at = $row['created_at'];
                if ($row->status == 4)
                {
                    if ($row->emi_option == 1)
                    {
                        $closingDate = date('Y-m-d', strtotime("+" . $row->emi_period . " months", strtotime($created_at)));
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $days = $row->emi_period * 7;
                        $start_date = $created_at;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $closingDate = date('Y-m-d', $date);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $days = $row->emi_period;
                        $start_date = $created_at;
                        $date = strtotime($start_date);
                        $date = strtotime("+" . $days . " day", $date);
                        $closingDate = date('Y-m-d', $date);
                    }
                    if (date('Y-m-d') > $closingDate)
                    {
                        if ($row->emi_option == 1)
                        {
                            $loanStartDate = $closingDate;
                            $loanComplateDate = date('Y-m-d');
                            $ts1 = strtotime($loanStartDate);
                            $ts2 = strtotime($loanComplateDate);
                            $year1 = date('Y', $ts1);
                            $year2 = date('Y', $ts2);
                            $month1 = date('m', $ts1);
                            $month2 = date('m', $ts2);
                            $penaltyTime = (($year2 - $year1) * 12) + ($month2 - $month1);
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 2)
                        {
                            $loanStartDate = $closingDate;
                            $startDate = date("m/d/Y", strtotime(convertDate($loanStartDate)));
                            $endDate = date('m/d/Y');
                            $first = DateTime::createFromFormat('m/d/Y', $startDate);
                            $second = DateTime::createFromFormat('m/d/Y', $endDate);
                            $penaltyTime = floor($first->diff($second)->days / 7);
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 3)
                        {
                            $startDate = strtotime($closingDate);
                            $endDate = strtotime(date('Y-m-d'));
                            $datediff = $endDate - $startDate;
                            $penaltyTime = round($datediff / (60 * 60 * 24));
                            $penaltyAmount = round($penaltyTime * $closingAmountROI);
                        }
                        elseif ($row->emi_option == 4)
                        {
                            $penaltyTime = '';
                            $penaltyAmount = '';
                        }
                    }
                    else
                    {
                        $penaltyTime = '';
                        $penaltyAmount = '';
                    }
                    if ($row->emi_option == 1)
                    {
                        $loanComplateDate = date('Y-m-d');
                        $dueStartDate = $row->approve_date;
                        $dts1 = strtotime($dueStartDate);
                        $dts2 = strtotime($loanComplateDate);
                        $dyear1 = date('Y', $dts1);
                        $dyear2 = date('Y', $dts2);
                        $dmonth1 = date('m', $dts1);
                        $dmonth2 = date('m', $dts2);
                        $dueTime = (($dyear2 - $dyear1) * 12) + ($dmonth2 - $dmonth1);
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 2)
                    {
                        $loanStartDate = $row->approve_date;
                        $startDate = date("m/d/Y", strtotime(convertDate($loanStartDate)));
                        $endDate = date('m/d/Y');
                        $first = DateTime::createFromFormat('m/d/Y', $startDate);
                        $second = DateTime::createFromFormat('m/d/Y', $endDate);
                        $dueTime = floor($first->diff($second)->days / 7);
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 3)
                    {
                        $startDate = strtotime($row->approve_date);
                        $endDate = strtotime(date('Y-m-d'));
                        $datediff = $endDate - $startDate;
                        $dueTime = round($datediff / (60 * 60 * 24));
                        $cAmount = round($dueTime * $row->emi_amount);
                        $dueAmount = round($cAmount - $row->received_emi_amount);
                    }
                    elseif ($row->emi_option == 4)
                    {
                        $dueAmount = 0;
                    }
                    $LoanCreatedDate = date('Y-m-d',strtotime($row->approve_date));
                    $LoanCreatedYear = date('Y',strtotime($row->approve_date));
                    $LoanCreatedMonth = date('m',strtotime($row->approve_date));
                    $LoanCreateDate = date('d',strtotime($row->approve_date));
                    $currentDate = date('Y-m-d');
                    $CurrentDate= date('d');
                    $CurrentDateYear = date('Y');
                    $CurrentDateMonth = date('m');
                    if ($row->emi_option == 1){
                        $daysDiff =(($CurrentDateYear - $LoanCreatedYear) * 12) + ($CurrentDateMonth - $LoanCreatedMonth);
                    }
                    if ($row->emi_option == 2){
                        $daysDiff =today()->diffInDays($LoanCreatedDate);
                        $daysDiff = $daysDiff/7;
                    }
                    if ($row->emi_option == 3){
                        $daysDiff =today()->diffInDays($LoanCreatedDate);
                    }
                    $nextEmiDates = $this->nextEmiDates($daysDiff,$LoanCreatedDate);
                    $EmiDates = $this->emiDates($LoanCreatedDate,$row->emi_period);
                    $emi_date = $nextEmiDates;
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item pay-emi" href="javascript:void(0);" title="Pay EMI" data-loan-id="' . $row->id . '" data-loan-emi="' . $row->emi_amount . '" data-ssb-amount="' . $ssbBalance . '" data-ssb-id="' . $ssbId . '" data-recovered-amount="' . loanGroupOutsandingAmount($row->id) . '"  data-last-recovered-amount="' . lastLoanRecoveredAmount($row->id, 'group_loan_id') . '" data-closing-amount="' . $closingAmount . '" data-due-amount="' . $dueAmount . '" data-penalty-amount="' . $penaltyAmount . '" data-penalty-time="' . $penaltyTime . '" data-toggle="modal" data-target="#pay-loan-emi" data-ssb-account="' . $ssbAccount . '"  data-emiDate = "'.implode(',',$emi_date).'" data-AllemiDate = "'.implode(',',$EmiDates).'" data-emiOption = "'.$row->emi_option.'"><i class="icon-pencil5  mr-2" ></i>Pay EMI</a>  ';
                        $btn .= '<a class="dropdown-item close-group-loan" href="javascript:void(0);" data-id="' . $row->id . '"><i class="far fa-calendar-check"></i>Close Loan</a>';
                    }
                }
                if (Auth::user()->id != "13")
                {
                    $btn .= '<a class="dropdown-item" href="' . $purl . '" target="_blank"><i class="fa fa-print mr-2" aria-hidden="true"></i>Print</a>';
                }
                $btn .= '<a class="dropdown-item" href="' . $turl . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>Transactions</a>';
                $btn .= '<a class="dropdown-item" href="' . $urlCom . '"><i class="fas fa-percent text-default mr-2"></i>Loan Commission</a>';
                $grpCount = Grouploans::where('member_loan_id', $row->member_loan_id)
                    ->count('id');
                $grpCountStatus = Grouploans::where('member_loan_id', $row->member_loan_id)
                    ->where('status', 3)
                    ->count('id');
                if ($grpCount == $grpCountStatus)
                {
                    if (Auth::user()->id != "13")
                    {
                        $btn .= '<a class="dropdown-item" href="' . $pdf . '"><i class="fas fa-download text-default mr-2"></i>Download No Dues</a>';
                        $btn .= '<a class="dropdown-item" href="' . $print . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>print No Dues</a>';
                    }
                }
                if (Auth::user()->id != "13")
                {
                    $btn .= '<a class="dropdown-item close-group-loan" href="javascript:void(0);" data-id="' . $row->id . '"><i class="far fa-calendar-check"></i>Close Loan</a>';
                }
                $btn .= '</div></div></div>';
                $val['action'] = $btn;
                $rowReturn[] = $val;
            }
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Display loan details.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function View($id, $type)
    {
        $data['title'] = "Loan Details";
        $data['loanDetails'] = Memberloans::with('loan', 'LoanApplicants', 'LoanCoApplicants', 'LoanGuarantor', 'Loanotherdocs', 'GroupLoanMembers', 'loanInvestmentPlans')->findOrFail($id);
        $data['id'] = $id;
        return view('templates.admin.loan.view', $data);
    }
    /**
     * Deposite loan EMI.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return JSON
     */
    // public function depositeLoanEmi(Request $request)
    // {
    //     DB::beginTransaction();
    //     try {
    //         $entryTime = date("H:i:s");
    //         Session::put('created_at', date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //         $ssbAccountDetails = SavingAccount::with('ssbMember')->where('id',$request['ssb_id'])->first();            if($request['loan_emi_payment_mode'] == 0){
    //             if($ssbAccountDetails->balance < $request['deposite_amount']){
    //                 return back()->with('error', 'Insufficient balance in ssb account!');
    //             }
    //         }
    //         $loanId = $request['loan_id'];
    //         $branchId = $request['branch'];
    //         $mLoan = Memberloans::with('loanMember')->where('id',$request['loan_id'])->first();
    //         if($mLoan->emi_option == 1){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/1200;
    //         }elseif($mLoan->emi_option == 2){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/5200;
    //         }elseif($mLoan->emi_option == 3){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/36500;
    //         }
    //         $principal_amount = $request['deposite_amount']-$roi;
    //         $amountArraySsb=array('1'=>$request['deposite_amount']);
    //         $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name.' '.$ssbAccountDetails['ssbMember']->last_name;
    //         $dueAmount = $mLoan->due_amount-round($principal_amount);
    //         $mlResult = Memberloans::find($request['loan_id']);
    //         $lData['credit_amount'] = $mLoan->credit_amount+$principal_amount;
    //         $lData['due_amount'] = $dueAmount;
    //         if($dueAmount == 0){
    //             //$lData['status'] = 3;
    //             //$lData['clear_date'] = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //         }
    //         $lData['received_emi_amount'] = $mLoan->received_emi_amount+$request['deposite_amount'];
    //         $mlResult->update($lData);
    //         // add log
    //         $postData = $_POST;
    //         $enData = array("post_data" => $postData, "lData" => $lData);
    //         $encodeDate = json_encode($enData);
    //         $arrs = array("load_id" => $loanId, "type" => "7", "account_head_id" => 0, "user_id" => Auth::user()->id, "message" => "Loan Recovery   - Loan EMI payment", "data" => $encodeDate);
    //         DB::table('user_log')->insert($arrs);
    //         // end log
    //         if($request['loan_emi_payment_mode'] == 0){
    //             $cheque_dd_no=NULL;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $bank_name=NULL;
    //             $cheque_date=NULL;
    //             $account_number=NULL;
    //             $paymentMode=4;
    //             $ssbpaymentMode=3;
    //             $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['created_date'])));
    //             $record1=SavingAccountTranscation::where('account_no',$ssbAccountDetails->account_no)->whereDate('created_at','<',date("Y-m-d", strtotime(convertDate($request['application_date']))))->orderby('id','desc')->first();
    //             $ssb['saving_account_id']=$ssbAccountDetails->id;
    //             $ssb['account_no']=$ssbAccountDetails->account_no;
    //             $ssb['opening_balance']=$record1->opening_balance-$request['deposite_amount'];
    //             $ssb['branch_id']=$request['branch'];
    //             $ssb['type']=9;
    //             $ssb['deposit']=0;
    //             $ssb['withdrawal']=$request['deposite_amount'];
    //             $ssb['description']='Loan EMI Payment';
    //             $ssb['currency_code']='INR';
    //             $ssb['payment_type']='DR';
    //             $ssb['payment_mode']=$ssbpaymentMode;
    //             $ssb['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //             $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
    //             // update saving account current balance
    //             $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //             $ssbBalance->balance=$request['ssb_account']-$request['deposite_amount'];
    //             $ssbBalance->save();
    //             $record2=SavingAccountTranscation::where('account_no',$ssbAccountDetails->account_no)->whereDate('created_at','>',date("Y-m-d", strtotime(convertDate($request['application_date']))))->get();
    //             foreach ($record2 as $key => $value) {
    //                 $nsResult = SavingAccountTranscation::find($value->id);
    //                 $nsResult['opening_balance']=$value->opening_balance-$request['deposite_amount'];
    //                 $nsResult['updated_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //                  $nsResult->save();
    //             }
    //             $data['saving_account_transaction_id']=$ssb_transaction_id;
    //             $data['loan_id']=$request['loan_id'];
    //             $data['created_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $satRef = TransactionReferences::create($data);
    //             $satRefId = $satRef->id;
    //             $updateSsbDayBook = $this->updateSsbDayBookAmount($request['deposite_amount'],$request['ssb_account_number'],date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,1,$ssbAccountDetails->id,$ssbAccountDetails->member_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'DR');
    //             $totalbalance = $request['ssb_account']-$request['deposite_amount'];
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$ssbAccountDetails->member_investments_id,0,$ssbAccountDetails->member_id,$totalbalance,0,$request['deposite_amount'],'Withdrawal from SSB',$request['account_number'],$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,NULL,NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'DR');
    //         }elseif($request['loan_emi_payment_mode'] == 1){
    //             if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                 $cheque_dd_no=$request['customer_cheque'];
    //                 $paymentMode=1;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //             }elseif($request['bank_transfer_mode'] == 1){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=3;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id=$request['utr_transaction_number'];
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //             }
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }elseif($request['loan_emi_payment_mode'] == 2){
    //             $cheque_dd_no=NULL;
    //             $cheque_date=NULL;
    //             $account_number=NULL;
    //             $paymentMode=0;
    //             $ssbpaymentMode=0;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $satRefId = NULL;
    //             $bank_name=NULL;
    //             $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }elseif($request['loan_emi_payment_mode'] == 3){
    //             $cheque_dd_no=$request['cheque_number'];
    //             $cheque_date=$request['cheque_date'];
    //             $bank_name=$request['bank_name'];
    //             $account_number=$request['account_number'];
    //             $paymentMode=1;
    //             $ssbpaymentMode=1;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $satRefId = NULL;
    //             $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }
    //         $ssbCreateTran = CommanController::createTransaction($satRefId,5,$request['loan_id'],$mLoan->applicant_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //         $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,5,$request['loan_id'],0,$mLoan->applicant_id,$dueAmount,$request['deposite_amount'],0,'Loan EMI deposit',$mLoan->account_number,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //         if($request['loan_emi_payment_mode'] == 3){
    //             $checkData['type']=4;
    //             $checkData['branch_id']=$request['branch'];
    //             $checkData['loan_id']=$request['loan_id'];
    //             $checkData['day_book_id']=$createDayBook;
    //             $checkData['cheque_id']=$cheque_dd_no;
    //             $checkData['status']=1;
    //             $checkData['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssbAccountTran = ReceivedChequePayment::create($checkData);
    //             $dataRC['status']=3;
    //             $receivedcheque = ReceivedCheque::find($cheque_dd_no);
    //             $receivedcheque->update($dataRC);
    //         }
    //         /************* Head Implement ****************/
    //         if($request['loan_emi_payment_mode'] == 0){
    //             $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //             $v_no = "";
    //             for ($i = 0; $i < 10; $i++) {
    //                 $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //             }
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','CR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$ssbAccountDetails->id,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],date("H:i:s"),2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_id_from,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalbranchDayBook = $this->createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,523,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,56,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
    //             $roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             if($mLoan->loan_type == '1'){
    //                 $loan_head_id = 64;
    //             }elseif($mLoan->loan_type == '2'){
    //                 $loan_head_id = 65;
    //             }elseif($mLoan->loan_type == '3'){
    //                 $loan_head_id = 66;
    //             }elseif($mLoan->loan_type == '4'){
    //                 $loan_head_id = 67;
    //             }
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //            /* $principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,56,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             $roimemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$ssbAccountDetails->id,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],date("H:i:s"),2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_id_from,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$roimemberTransaction = $this->createMemberTransaction($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //         }elseif($request['loan_emi_payment_mode'] == 2){
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,523,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,28,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             if($mLoan->loan_type == '1'){
    //                 $loan_head_id = 64;
    //             }elseif($mLoan->loan_type == '2'){
    //                 $loan_head_id = 65;
    //             }elseif($mLoan->loan_type == '3'){
    //                 $loan_head_id = 66;
    //             }elseif($mLoan->loan_type == '4'){
    //                 $loan_head_id = 67;
    //             }
    //             $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalbranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,28,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $createRoiBranchCash = $this->updateBranchCashFromBackDate($roi+$principal_amount,$request['branch'],date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))));
    //         }elseif($request['loan_emi_payment_mode'] == 1){
    //             if($mLoan->loan_type == '1'){
    //                 $loan_head_id = 64;
    //             }elseif($mLoan->loan_type == '2'){
    //                 $loan_head_id = 65;
    //             }elseif($mLoan->loan_type == '3'){
    //                 $loan_head_id = 66;
    //             }elseif($mLoan->loan_type == '4'){
    //                 $loan_head_id = 67;
    //             }
    //             if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                 $payment_type = 1;
    //                 $amount_from_id =$request['associate_member_id'];
    //                 $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                 $cheque_no = $request['customer_cheque'];
    //                 $cheque_type = 1;
    //                 $cheque_date = NULL;
    //                 $cheque_bank_from = $request['customer_bank_name'];
    //                 $cheque_bank_ac_from = $request['customer_bank_account_number'];
    //                 $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
    //                 $cheque_bank_branch_from=NULL;
    //                 $cheque_bank_to=$request['company_bank'];
    //                 $cheque_bank_ac_to=$request['bank_account_number'];
    //                 $v_no=NULL;
    //                 $v_date=NULL;
    //                 $ssb_account_id_from=NULL;
    //                 $transction_no = NULL;
    //                 $transction_bank_from = NULL;
    //                 $transction_bank_ac_from = NULL;
    //                 $transction_bank_ifsc_from = NULL;
    //                 $transction_bank_branch_from = NULL;
    //                 $transction_bank_to = $request['company_bank'];
    //                 $transction_bank_ac_to = $request['bank_account_number'];
    //             }elseif($request['bank_transfer_mode'] == 1){
    //                 $payment_type = 2;
    //                 $amount_from_id =$request['associate_member_id'];
    //                 $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                 $cheque_type = NULL;
    //                 $cheque_no = NULL;
    //                 $cheque_date = NULL;
    //                 $cheque_bank_from = NULL;
    //                 $cheque_bank_ac_from = NULL;
    //                 $cheque_bank_ifsc_from = NULL;
    //                 $cheque_bank_branch_from = NULL;
    //                 $cheque_bank_to = NULL;
    //                 $cheque_bank_ac_to = NULL;
    //                 $transction_no = $request['utr_transaction_number'];
    //                 $v_no=NULL;
    //                 $v_date=NULL;
    //                 $ssb_account_id_from=NULL;
    //                 $transction_bank_from = $request['customer_bank_name'];
    //                 $transction_bank_ac_from = $request['customer_bank_account_number'];
    //                 $transction_bank_ifsc_from = $request['customer_ifsc_code'];
    //                 $transction_bank_branch_from = $request['customer_branch_name'];
    //                 $transction_bank_to = $request['company_bank'];
    //                 $transction_bank_ac_to = $request['bank_account_number'];
    //             }
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,523,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //             /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,5,52,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //             /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalbranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             $principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branch_id=NULL,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
    //             $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'EMI collection','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,$request['application_date'],$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL);
    //             /*$samraddhBankDaybook = CommanController::createSamraddhBankDaybook($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'EMI collection','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($roi+$principal_amount,$request['company_bank'],getSamraddhBankAccount($request['bank_account_number'])->id,date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))),0,0);
    //         }
    //         /************* Head Implement ****************/
    //         /*---------- commission script  start  ---------*/
    //         $daybookId=$createDayBook;
    //         $total_amount=$request['deposite_amount'];
    //         $percentage=2;
    //         $month=NULL;
    //         $type_id=$request['loan_id'];
    //         $type=4;
    //         $associate_id=$request['associate_member_id'];
    //         $branch_id=$request['branch'];
    //         $commission_type=0;
    //         $associateDetail=Member::where('id',$associate_id)->first();
    //         $carder=$associateDetail->current_carder_id;
    //         $associate_exist=0;
    //         $percentInDecimal = $percentage / 100;
    //         $commission_amount = round($percentInDecimal * $total_amount,4);
    //         $associateCommission['member_id'] = $associate_id;
    //         $associateCommission['branch_id'] = $branch_id;
    //         $associateCommission['type'] = $type;
    //         $associateCommission['type_id'] = $type_id;
    //         $associateCommission['day_book_id'] = $daybookId;
    //         $associateCommission['total_amount'] = $total_amount;
    //         $associateCommission['month'] = $month;
    //         $associateCommission['commission_amount'] = $commission_amount;
    //         $associateCommission['percentage'] = $percentage;
    //         $associateCommission['commission_type'] = $commission_type;
    //         $date =\App\Models\Daybook::where('id',$daybookId)->first();
    //         $associateCommission['created_at'] = $date->created_at;
    //         $associateCommission['pay_type'] = 4;
    //         $associateCommission['carder_id'] = $carder;
    //         $associateCommission['associate_exist'] = $associate_exist;
    //         $associateCommissionInsert = \App\Models\CommissionEntryLoan::create($associateCommission);
    //         // Collection start
    //        /* $collection_percentage=5;
    //         $collection_type=6;
    //         $Collection_associate_id=$mLoan->associate_member_id;
    //         $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
    //         $Collection_carder=$collection_associateDetail->current_carder_id;
    //         $collection_percentInDecimal = $collection_percentage / 100;
    //         $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
    //         $coll_associateCommission['member_id'] = $Collection_associate_id;
    //         $coll_associateCommission['branch_id'] = $branch_id;
    //         $coll_associateCommission['type'] = $collection_type;
    //         $coll_associateCommission['type_id'] = $type_id;
    //         $coll_associateCommission['day_book_id'] = $daybookId;
    //         $coll_associateCommission['total_amount'] = $total_amount;
    //         $coll_associateCommission['month'] = $month;
    //         $coll_associateCommission['commission_amount'] = $collection_commission_amount;
    //         $coll_associateCommission['percentage'] = $collection_percentage;
    //         $coll_associateCommission['commission_type'] = $commission_type;
    //         $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
    //         $coll_associateCommission['created_at'] = $coll_date->created_at;
    //         $coll_associateCommission['pay_type'] = 4;
    //         $coll_associateCommission['carder_id'] = $Collection_carder;
    //         $coll_associateCommission['associate_exist'] = $associate_exist;
    //         $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);*/
    //         /*---------- commission script  end  ---------*/
    //         $createLoanDayBook = CommanController::createLoanDayBook($daybookId,$mLoan->loan_type,0,$loanId,$lId=NULL,$mLoan->account_number,$mLoan->applicant_id,$roi,$principal_amount,$dueAmount,$request['deposite_amount'],'Loan EMI deposit',$request['branch'],getBranchCode($request['branch'])->branch_code,'CR','INR',$paymentMode,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,1,1,$cheque_date,$account_number,NULL,$request['loan_associate_name'],$request['associate_member_id'],$request['branch']);
    //         if($request['penalty_amount'] != '' && $request['penalty_amount'] > 0){
    //             $amountArray=array('1'=>$request['penalty_amount']);
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $cheque_dd_no=NULL;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentMode=4;
    //                 $ssbpaymentMode=3;
    //                 $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //                 $ssb['saving_account_id']=$ssbAccountDetails->id;
    //                 $ssb['account_no']=$ssbAccountDetails->account_no;
    //                 $ssb['opening_balance']=$request['ssb_account']-$request['penalty_amount'];
    //                 $ssb['deposit']=0;
    //                 $ssb['withdrawal']=$request['penalty_amount'];
    //                 $ssb['description']='Loan EMI Penalty';
    //                 $ssb['currency_code']='INR';
    //                 $ssb['payment_type']='DR';
    //                 $ssb['payment_mode']=$ssbpaymentMode;
    //                 $ssb['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //                 $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
    //                 // update saving account current balance
    //                 $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //                 $ssbBalance->balance=$request['ssb_account']-$request['penalty_amount'];
    //                 $ssbBalance->save();
    //                 $data['saving_account_transaction_id']=$ssb_transaction_id;
    //                 $data['loan_id']=$request['loan_id'];
    //                 $data['created_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $satRef = TransactionReferences::create($data);
    //                 $satRefId = $satRef->id;
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,1,$ssbAccountDetails->id,$ssbAccountDetails->member_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'DR');
    //                 $totalbalance = $request['ssb_account']-$request['penalty_amount'];
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$ssbAccountDetails->member_investments_id,0,$ssbAccountDetails->member_id,$totalbalance,0,$request['penalty_amount'],'Withdrawal from SSB',$request['account_number'],$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,NULL,NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'DR');
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                     $cheque_dd_no = $request['customer_cheque'];
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = NULL;
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 2;
    //                     $cheque_dd_no = NULL;
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = $request['utr_transaction_number'];
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }
    //                 $ssb_transaction_id = '';
    //                 $ssb_account_id_from = '';
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=0;
    //                 $ssbpaymentMode=0;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $ssb_transaction_id = '';
    //                 $ssb_account_id_from = '';
    //             }
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,11,$request['loan_id'],$mLoan->applicant_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,11,$request['loan_id'],0,$mLoan->applicant_id,$dueAmount,$request['penalty_amount'],0,'Loan EMI penalty',$mLoan->account_number,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //             if($request['loan_emi_payment_mode'] == 3){
    //                 $checkData['type']=4;
    //                 $checkData['branch_id']=$request['branch'];
    //                 $checkData['loan_id']=$request['loan_id'];
    //                 $checkData['day_book_id']=$createDayBook;
    //                 $checkData['cheque_id']=$cheque_dd_no;
    //                 $checkData['status']=1;
    //                 $checkData['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $ssbAccountTran = ReceivedChequePayment::create($checkData);
    //                 $dataRC['status']=3;
    //                 $receivedcheque = ReceivedCheque::find($cheque_dd_no);
    //                 $receivedcheque->update($dataRC);
    //             }
    //             /************* Head Implement ****************/
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_id_from,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roibranchDayBook = $this->createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,56,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],date("H:i:s"),2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$$ssb_account_id_from,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roimemberTransaction = $this->createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,53,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,28,5,53,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roimemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($request['penalty_amount'],$request['branch'],date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $payment_type = 1;
    //                     $amount_from_id =$request['associate_member_id'];
    //                     $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                     $cheque_no = $request['customer_cheque'];
    //                     $cheque_type = 1;
    //                     $cheque_date = NULL;
    //                     $cheque_bank_from = $request['customer_bank_name'];
    //                     $cheque_bank_ac_from = $request['customer_bank_account_number'];
    //                     $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
    //                     $cheque_bank_branch_from=NULL;
    //                     $cheque_bank_to=$request['company_bank'];
    //                     $cheque_bank_ac_to=$request['bank_account_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_no = NULL;
    //                     $transction_bank_from = NULL;
    //                     $transction_bank_ac_from = NULL;
    //                     $transction_bank_ifsc_from = NULL;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = NULL;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $payment_type = 2;
    //                     $amount_from_id =$request['associate_member_id'];
    //                     $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                     $cheque_no = NULL;
    //                     $cheque_type = NULL;
    //                     $cheque_date = NULL;
    //                     $cheque_bank_from = NULL;
    //                     $cheque_bank_ac_from = NULL;
    //                     $cheque_bank_ifsc_from = NULL;
    //                     $cheque_bank_branch_from = NULL;
    //                     $cheque_bank_to = NULL;
    //                     $cheque_bank_ac_to = NULL;
    //                     $transction_no = $request['utr_transaction_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_bank_from = $request['customer_bank_name'];
    //                     $transction_bank_ac_from = $request['customer_bank_account_number'];
    //                     $transction_bank_ifsc_from = $request['customer_ifsc_code'];
    //                     $transction_bank_branch_from = $request['customer_branch_name'];
    //                     $transction_bank_to = $request['company_bank'];
    //                     $transction_bank_ac_to = $request['bank_account_number'];
    //                 }
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,53,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,5,53,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //                 $principalmemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$principalmemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$jv_unique_id,$cheque_type,$cheque_id,$ssb_account_tran_id_to,$ssb_account_tran_id_from);
    //                 /*$samraddhBankDaybook = CommanController::createSamraddhBankDaybook($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($request['penalty_amount'],$request['company_bank'],getSamraddhBankAccount($request['bank_account_number'])->id,date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))),0,0);
    //             }
    //             /************* Head Implement ****************/
    //             /*---------- penalty commission script  start  ---------*/
    //            /* $daybookId=$createDayBook;
    //             $total_amount=$request['penalty_amount'];
    //             $month=NULL;
    //             $type_id=$request['loan_id'];
    //             $branch_id=$request['branch'];
    //             $associate_exist=0;
    //             $commission_type=0;
    //             // Collection start
    //             $collection_percentage=5;
    //             $collection_type=6;
    //             $Collection_associate_id=$mLoan->associate_member_id;
    //             $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
    //             $Collection_carder=$collection_associateDetail->current_carder_id;
    //             $collection_percentInDecimal = $collection_percentage / 100;
    //             $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
    //             $coll_associateCommission['member_id'] = $Collection_associate_id;
    //             $coll_associateCommission['branch_id'] = $branch_id;
    //             $coll_associateCommission['type'] = $collection_type;
    //             $coll_associateCommission['type_id'] = $type_id;
    //             $coll_associateCommission['day_book_id'] = $daybookId;
    //             $coll_associateCommission['total_amount'] = $total_amount;
    //             $coll_associateCommission['month'] = $month;
    //             $coll_associateCommission['commission_amount'] = $collection_commission_amount;
    //             $coll_associateCommission['percentage'] = $collection_percentage;
    //             $coll_associateCommission['commission_type'] = $commission_type;
    //             $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
    //             $coll_associateCommission['created_at'] = $coll_date->created_at;
    //             $coll_associateCommission['pay_type'] = 4;
    //             $coll_associateCommission['carder_id'] = $Collection_carder;
    //             $coll_associateCommission['associate_exist'] = $associate_exist;
    //             $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);*/
    //             /*---------- penalty commission script  end  ---------*/
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $paymentMode = 4;
    //                 $cheque_dd_no = NULL;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id = NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                     $cheque_dd_no = $request['customer_cheque'];
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = NULL;
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 2;
    //                     $cheque_dd_no = NULL;
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = $request['utr_transaction_number'];
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=0;
    //                 $ssbpaymentMode=0;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //             }
    //             $createLoanDayBook = CommanController::createLoanDayBook($createDayBook,$mLoan->loan_type,1,$mLoan->id,$lId=NULL,$mLoan->account_number,$mLoan->applicant_id,$request['penalty_amount'],$request['penalty_amount'],$opening_balance=NULL,$request['penalty_amount'],'Loan EMI penalty',$request['branch'],getBranchCode($request['branch'])->branch_code,'CR','INR',$paymentMode,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,1,1,$cheque_date,$account_number,NULL,$request['loan_associate_name'],$request['associate_member_id'],$request['branch']);
    //         }
    //     DB::commit();
    //     } catch (\Exception $ex) {
    //         DB::rollback();
    //         return back()->with('alert', $ex->getMessage());
    //     }
    //     return back()->with('success', 'Loan EMI Successfully submitted!');
    // }
    //  public function depositeGroupLoanEmi(Request $request)
    // {
    //     // DB::beginTransaction();
    //     // try {
    //         $entryTime = date("h:i:s");
    //         Session::put('created_at', date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //         $ssbAccountDetails = SavingAccount::with('ssbMember')->where('id',$request['ssb_id'])->first();
    //         if($request['loan_emi_payment_mode'] == 0){
    //             if($ssbAccountDetails->balance < $request['deposite_amount']){
    //                 return back()->with('error', 'Insufficient balance in ssb account!');
    //             }
    //         }
    //         $loanId = $request['loan_id'];
    //         $branchId = $request['branch'];
    //         $mLoan = Grouploans::with('loanMember')->where('id',$request['loan_id'])->first();
    //         if($mLoan->emi_option == 1){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/1200;
    //         }elseif($mLoan->emi_option == 2){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/5200;
    //         }elseif($mLoan->emi_option == 3){
    //             $roi = $mLoan->due_amount*$mLoan->ROI/36500;
    //         }
    //         $principal_amount = $request['deposite_amount']-$roi;
    //         $amountArraySsb=array('1'=>$request['deposite_amount']);
    //         $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name.' '.$ssbAccountDetails['ssbMember']->last_name;
    //         $dueAmount = $mLoan->due_amount-round($principal_amount);
    //         $glResult = Grouploans::find($request['loan_id']);
    //         $glData['credit_amount'] = $mLoan->credit_amount+$principal_amount;
    //         $glData['due_amount'] = $dueAmount;
    //         if($dueAmount == 0){
    //             $glData['status'] = 3;
    //         }
    //         $glResult['received_emi_amount'] = $mLoan->received_emi_amount+$request['deposite_amount'];
    //         $glResult->update($glData);
    //         $gmLoan = Memberloans::with('loanMember')->where('id',$mLoan->member_loan_id)->first();
    //         $gmDueAmount = $gmLoan->due_amount-$principal_amount;
    //         $mlResult = Memberloans::find($mLoan->member_loan_id);
    //         $lData['credit_amount'] = $mLoan->credit_amount+$principal_amount;
    //         $lData['due_amount'] = $gmDueAmount;
    //         if($dueAmount == 0){
    //             //$lData['status'] = 3;
    //             //$lData['clear_date'] = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //         }
    //         $mlResult->update($lData);
    //         // add log
    //         $postData = $_POST;
    //         $enData = array("post_data" => $postData, "lData" => $lData);
    //         $encodeDate = json_encode($enData);
    //         $arrs = array("load_id" => $loanId, "type" => "7", "account_head_id" => 0, "user_id" => Auth::user()->id, "message" => "Group Loan Recovery - Loan EMI payment", "data" => $encodeDate);
    //         DB::table('user_log')->insert($arrs);
    //         // end log
    //         if($request['loan_emi_payment_mode'] == 0){
    //             $cheque_dd_no=NULL;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $bank_name=NULL;
    //             $cheque_date=NULL;
    //             $account_number=NULL;
    //             $paymentMode=4;
    //             $ssbpaymentMode=3;
    //             $paymentDate = date("Y-m-d", strtotime(convertDate($request['created_date'])));;
    //             $record1=SavingAccountTranscation::where('account_no',$ssbAccountDetails->account_no)->whereDate('created_at','<',date("Y-m-d", strtotime(convertDate($request['application_date']))))->orderby('id','desc')->first();
    //             $ssb['saving_account_id']=$ssbAccountDetails->id;
    //             $ssb['account_no']=$ssbAccountDetails->account_no;
    //             $ssb['opening_balance']=$record1->opening_balance-$request['deposite_amount'];
    //             $ssb['branch_id']=$request['branch'];
    //             $ssb['type']=9;
    //             $ssb['deposit']=0;
    //             $ssb['withdrawal']=$request['deposite_amount'];
    //             $ssb['description']='Loan EMI Payment';
    //             $ssb['currency_code']='INR';
    //             $ssb['payment_type']='DR';
    //             $ssb['payment_mode']=$ssbpaymentMode;
    //             $ssb['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //             $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
    //             // update saving account current balance
    //             $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //             $ssbBalance->balance=$request['ssb_account']-$request['deposite_amount'];
    //             $ssbBalance->save();
    //             $record2=SavingAccountTranscation::where('account_no',$ssbAccountDetails->account_no)->whereDate('created_at','>',date("Y-m-d", strtotime(convertDate($request['application_date']))))->get();
    //             foreach ($record2 as $key => $value) {
    //                 $nsResult = SavingAccountTranscation::find($value->id);
    //                 $nsResult['opening_balance']=$value->opening_balance-$request['deposite_amount'];
    //                 $nsResult['updated_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //                 $sResult->update($nsResult);
    //             }
    //             $data['saving_account_transaction_id']=$ssb_transaction_id;
    //             $data['loan_id']=$request['loan_id'];
    //             $data['created_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $satRef = TransactionReferences::create($data);
    //             $satRefId = $satRef->id;
    //             $updateSsbDayBook = $this->updateSsbDayBookAmount($request['deposite_amount'],$request['ssb_account_number'],date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,1,$ssbAccountDetails->id,$ssbAccountDetails->member_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'DR');
    //             $totalbalance = $request['ssb_account']-$request['deposite_amount'];
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$ssbAccountDetails->member_investments_id,0,$ssbAccountDetails->member_id,$totalbalance,0,$request['deposite_amount'],'Withdrawal from SSB',$request['account_number'],$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,NULL,NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'DR');
    //         }elseif($request['loan_emi_payment_mode'] == 1){
    //             if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                 $cheque_dd_no=$request['customer_cheque'];
    //                 $paymentMode=1;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             }elseif($request['bank_transfer_mode'] == 1){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=3;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id=$request['utr_transaction_number'];
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //             }
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }elseif($request['loan_emi_payment_mode'] == 2){
    //             $cheque_dd_no=NULL;
    //             $paymentMode=0;
    //             $ssbpaymentMode=0;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $satRefId = NULL;
    //             $bank_name=NULL;
    //             $cheque_date=NULL;
    //             $account_number=NULL;
    //             $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }elseif($request['loan_emi_payment_mode'] == 3){
    //             $cheque_dd_no=$request['cheque_number'];
    //             $cheque_date=$request['cheque_date'];
    //             $bank_name=$request['bank_name'];
    //             $account_number=$request['account_number'];
    //             $paymentMode=1;
    //             $ssbpaymentMode=1;
    //             $online_payment_id=NULL;
    //             $online_payment_by=NULL;
    //             $satRefId = NULL;
    //             $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssb_transaction_id = '';
    //             $ssb_account_id_from = '';
    //         }
    //         $ssbCreateTran = CommanController::createTransaction($satRefId,9,$request['loan_id'],$mLoan->applicant_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //         $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,9,$request['loan_id'],0,$mLoan->applicant_id,$dueAmount,$request['deposite_amount'],0,'Loan EMI deposite',$mLoan->account_number,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArraySsb,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'CR');
    //         if($request['loan_emi_payment_mode'] == 3){
    //             $checkData['type']=5;
    //             $checkData['branch_id']=$request['branch'];
    //             $checkData['loan_id']=$request['loan_id'];
    //             $checkData['day_book_id']=$createDayBook;
    //             $checkData['cheque_id']=$cheque_dd_no;
    //             $checkData['status']=1;
    //             $checkData['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //             $ssbAccountTran = ReceivedChequePayment::create($checkData);
    //             $dataRC['status']=3;
    //             $receivedcheque = ReceivedCheque::find($cheque_dd_no);
    //             $receivedcheque->update($dataRC);
    //         }
    //         /*************** Head Implement ************/
    //         if($request['loan_emi_payment_mode'] == 0){
    //             $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //             $v_no = "";
    //             for ($i = 0; $i < 10; $i++) {
    //                 $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //             }
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','CR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_id_from,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$roibranchDayBook = $this->createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,524,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,56,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
    //             $roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             $loan_head_id = 66;
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,56,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
    //             $principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //             $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalmemberTransaction = $this->createMemberTransaction($roidayBookRef,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //         }elseif($request['loan_emi_payment_mode'] == 2){
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$roibranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,524,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,28,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $loan_head_id = 66;
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,28,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($roi+$principal_amount,$request['branch'],date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //         }elseif($request['loan_emi_payment_mode'] == 1){
    //             $loan_head_id = 66;
    //             if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                 $payment_type = 1;
    //                 $amount_from_id =$request['associate_member_id'];
    //                 $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //               $cheque_no = $request['customer_cheque'];
    //                 $cheque_date = NULL;
    //                 $cheque_type = 1;
    //                 $cheque_bank_from = $request['customer_bank_name'];
    //                 $cheque_bank_ac_from = $request['customer_bank_account_number'];
    //                 $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
    //                 $cheque_bank_branch_from=NULL;
    //                 $cheque_bank_to=$request['company_bank'];
    //                 $cheque_bank_ac_to=$request['bank_account_number'];
    //                 $v_no=NULL;
    //                 $v_date=NULL;
    //                 $ssb_account_id_from=NULL;
    //                 $transction_no = NULL;
    //                 $transction_bank_from = NULL;
    //                 $transction_bank_ac_from = NULL;
    //                 $transction_bank_ifsc_from = NULL;
    //                 $transction_bank_branch_from = NULL;
    //                 $transction_bank_to = $request['company_bank'];
    //                 $transction_bank_ac_to = $request['bank_account_number'];
    //                  $company_name = $request['cheque_company_bank'];
    //                 $ifsc = NULL;
    //                 $head_id = getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id;
    //                 $bankId = getSamraddhBankAccount($request['company_bank_account_number'])->id;
    //                 $company_bankId = getSamraddhBankAccount($request['company_bank_account_number'])->bank_id;
    //             }elseif($request['bank_transfer_mode'] == 1){
    //                 $payment_type = 2;
    //                 $amount_from_id =$request['associate_member_id'];
    //                 $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                 $cheque_no = NULL;
    //                 $cheque_type = NULL;
    //                 $cheque_date = NULL;
    //                 $cheque_bank_from = NULL;
    //                 $cheque_bank_ac_from = NULL;
    //                 $cheque_bank_ifsc_from = NULL;
    //                 $cheque_bank_branch_from = NULL;
    //                 $cheque_bank_to = NULL;
    //                 $cheque_bank_ac_to = NULL;
    //                 $transction_no = $request['utr_transaction_number'];
    //                 $v_no=NULL;
    //                 $v_date=NULL;
    //                 $ssb_account_id_from=NULL;
    //                 $transction_bank_from = $request['customer_bank_name'];
    //                 $transction_bank_ac_from = $request['customer_bank_account_number'];
    //                 $transction_bank_ifsc_from = $request['customer_ifsc_code'];
    //                 $transction_bank_branch_from = $request['customer_branch_name'];
    //                 $transction_bank_to = $request['company_bank'];
    //                 $transction_bank_ac_to = $request['bank_account_number'];
    //                 $company_name = getSamraddhBank($request['company_bank'])->bank_name;
    //                 $ifsc = getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code;
    //                 $bankId = getSamraddhBankAccount($request['bank_account_number'])->id;
    //                 $head_id = getSamraddhBankAccount($request['bank_account_number'])->account_head_id;
    //                 $company_bankId = getSamraddhBank($request['company_bank'])->id;
    //             }
    //             $roidayBookRef = CommanController::createBranchDayBookReference($roi+$principal_amount);
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,31,5,524,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,$ifsc,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,$company_name,$transction_bank_ac_to,NULL,$ifsc,NULL,1,Auth::user()->id);
    //             /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$head_id,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,$ifsc,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,$company_name,$transction_bank_ac_to,NULL,$ifsc,NULL,1,Auth::user()->id);
    //             /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$loan_head_id,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,$ifsc,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,$company_name,$transction_bank_ac_to,NULL,$ifsc,NULL,1,Auth::user()->id);
    //             /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef,$request['branch'],NULL,NULL,$head_id,5,55,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,$ifsc,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,$company_name,$transction_bank_ac_to,NULL,$ifsc,NULL,1,Auth::user()->id);
    //             /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
    //             $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef,$branchId,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             /*$roibranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //             $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //             $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'Loan Panelty Charge','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$company_name,$transction_bank_ac_to,NULL,$ifsc,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL);
    //             /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
    //             $samraddhBankDaybook = CommanController::createSamraddhBankDaybook($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'Loan Panelty Charge','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //             $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($roi+$principal_amount,$company_bankId,$bankId,date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))),0,0);
    //             $dataRC['status']=3;
    //             $receivedcheque = \App\Models\ReceivedCheque::find($request['customer_cheque']);
    //             $receivedcheque->update($dataRC);
    //         }
    //         /*************** Head Implement ************/
    //         /*---------- commission script  start  ---------*/
    //         $daybookId=$createDayBook;
    //         $total_amount=$request['deposite_amount'];
    //         $percentage=2;
    //         $month=NULL;
    //         $type_id=$request['loan_id'];
    //         $type=7;
    //         $associate_id=$request['associate_member_id'];
    //         $branch_id=$request['branch'];
    //         $commission_type=0;
    //         $associateDetail=Member::where('id',$associate_id)->first();
    //         $carder=$associateDetail->current_carder_id;
    //         $associate_exist=0;
    //         $percentInDecimal = $percentage / 100;
    //         $commission_amount = round($percentInDecimal * $total_amount,4);
    //         $associateCommission['member_id'] = $associate_id;
    //         $associateCommission['branch_id'] = $branch_id;
    //         $associateCommission['type'] = $type;
    //         $associateCommission['type_id'] = $type_id;
    //         $associateCommission['day_book_id'] = $daybookId;
    //         $associateCommission['total_amount'] = $total_amount;
    //         $associateCommission['month'] = $month;
    //         $associateCommission['commission_amount'] = $commission_amount;
    //         $associateCommission['percentage'] = $percentage;
    //         $associateCommission['commission_type'] = $commission_type;
    //         $date =\App\Models\Daybook::where('id',$daybookId)->first();
    //         $associateCommission['created_at'] = $date->created_at;
    //         $associateCommission['pay_type'] = 4;
    //         $associateCommission['carder_id'] = $carder;
    //         $associateCommission['associate_exist'] = $associate_exist;
    //         $associateCommissionInsert = \App\Models\CommissionEntryLoan::create($associateCommission);
    //         // Collection start
    //         /*$collection_percentage=5;
    //         $collection_type=8;
    //         $Collection_associate_id=$mLoan->associate_member_id;
    //         $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
    //         $Collection_carder=$collection_associateDetail->current_carder_id;
    //         $collection_percentInDecimal = $collection_percentage / 100;
    //         $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
    //         $coll_associateCommission['member_id'] = $Collection_associate_id;
    //         $coll_associateCommission['branch_id'] = $branch_id;
    //         $coll_associateCommission['type'] = $collection_type;
    //         $coll_associateCommission['type_id'] = $type_id;
    //         $coll_associateCommission['day_book_id'] = $daybookId;
    //         $coll_associateCommission['total_amount'] = $total_amount;
    //         $coll_associateCommission['month'] = $month;
    //         $coll_associateCommission['commission_amount'] = $collection_commission_amount;
    //         $coll_associateCommission['percentage'] = $collection_percentage;
    //         $coll_associateCommission['commission_type'] = $commission_type;
    //         $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
    //         $coll_associateCommission['created_at'] = $coll_date->created_at;
    //         $coll_associateCommission['pay_type'] = 4;
    //         $coll_associateCommission['carder_id'] = $Collection_carder;
    //         $coll_associateCommission['associate_exist'] = $associate_exist;
    //         $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);  */
    //         /*---------- commission script  end  ---------*/
    //         $createLoanDayBook = CommanController::createLoanDayBook($daybookId,3,0,$mLoan->id,$mLoan->id,$mLoan->account_number,$mLoan->applicant_id,$roi,$principal_amount,$dueAmount,$request['deposite_amount'],'Loan EMI deposite',$request['branch'],getBranchCode($request['branch'])->branch_code,'CR','INR',$paymentMode,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,1,1,$cheque_date,$account_number,NULL,$request['loan_associate_name'],$request['associate_member_id'],$request['branch']);
    //         if($request['penalty_amount'] != '' && $request['penalty_amount'] > 0){
    //             $amountArray=array('1'=>$request['penalty_amount']);
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $cheque_dd_no=NULL;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentMode=4;
    //                 $ssbpaymentMode=3;
    //                 $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
    //                 $ssb['saving_account_id']=$ssbAccountDetails->id;
    //                 $ssb['account_no']=$ssbAccountDetails->account_no;
    //                 $ssb['opening_balance']=$request['ssb_account']-$request['penalty_amount'];
    //                 $ssb['deposit']=0;
    //                 $ssb['withdrawal']=$request['penalty_amount'];
    //                 $ssb['description']='Loan EMI Penalty';
    //                 $ssb['currency_code']='INR';
    //                 $ssb['payment_type']='DR';
    //                 $ssb['payment_mode']=$ssbpaymentMode;
    //                 $ssb['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $ssbAccountTran = SavingAccountTranscation::create($ssb);
    //                 $ssb_transaction_id = $ssbAccountTran->id;
    //                 // update saving account current balance
    //                 $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
    //                 $ssbBalance->balance=$request['ssb_account']-$request['penalty_amount'];
    //                 $ssbBalance->save();
    //                 $data['saving_account_transaction_id']=$ssb_transaction_id;
    //                 $data['loan_id']=$request['loan_id'];
    //                 $data['created_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $satRef = TransactionReferences::create($data);
    //                 $satRefId = $satRef->id;
    //                 $ssbCreateTran = CommanController::createTransaction($satRefId,1,$ssbAccountDetails->id,$ssbAccountDetails->member_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'DR');
    //                 $totalbalance = $request['ssb_account']-$request['penalty_amount'];
    //                 $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,1,$ssbAccountDetails->member_investments_id,0,$ssbAccountDetails->member_id,$totalbalance,0,$request['penalty_amount'],'Withdrawal from SSB',$request['account_number'],$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$ssbAccountDetails->account_no,$cheque_dd_no,NULL,NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'DR');
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                     $cheque_dd_no = $request['customer_cheque'];
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = NULL;
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 3;
    //                     $cheque_dd_no = NULL;
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = $request['utr_transaction_number'];
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }
    //                 $ssb_transaction_id = '';
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=0;
    //                 $ssbpaymentMode=0;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 $ssb_transaction_id = '';
    //             }
    //             $ssbCreateTran = CommanController::createTransaction($satRefId,11,$request['loan_id'],$mLoan->applicant_id,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,$online_payment_by,$ssbAccountDetails->id,'CR');
    //             $createDayBook = CommanController::createDayBook($ssbCreateTran,$satRefId,11,$request['loan_id'],0,$mLoan->applicant_id,$dueAmount,$request['penalty_amount'],0,'Loan EMI penalty',$mLoan->account_number,$request['branch'],getBranchCode($request['branch'])->branch_code,$amountArray,$paymentMode,$request['loan_associate_name'],$request['associate_member_id'],$mLoan->account_number,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_by,$online_payment_by,$ssbAccountDetails->id,'CR');
    //             if($request['loan_emi_payment_mode'] == 3){
    //                 $checkData['type']=5;
    //                 $checkData['branch_id']=$request['branch'];
    //                 $checkData['loan_id']=$request['loan_id'];
    //                 $checkData['day_book_id']=$createDayBook;
    //                 $checkData['cheque_id']=$cheque_dd_no;
    //                 $checkData['status']=1;
    //                 $checkData['created_at'] = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));
    //                 $ssbAccountTran = ReceivedChequePayment::create($checkData);
    //                 $dataRC['status']=3;
    //                 $receivedcheque = ReceivedCheque::find($cheque_dd_no);
    //                 $receivedcheque->update($dataRC);
    //             }
    //             /************** Head Implement *************/
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    //                 $v_no = "";
    //                 for ($i = 0; $i < 10; $i++) {
    //                     $v_no .= $chars[mt_rand(0, strlen($chars)-1)];
    //                 }
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roibranchDayBook = $this->createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,56,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],NULL,$mLoan->branch_id,$ssbAccountDetails->branch_id,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],NULL,NULL,$ssb_transaction_id,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
    //                 $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$branchId,getBranchDetail($branchId)->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roimemberTransaction = $this->createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id); */
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,56,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,28,5,56,$loanId,$createDayBook,$request['associate_member_id'],NULL,$request['branch'],NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$jv_unique_id=NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 /*$roimemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($request['penalty_amount'],$request['branch'],date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date']))));
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $payment_type = 1;
    //                     $amount_from_id =$request['associate_member_id'];
    //                     $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                     $cheque_no = $request['customer_cheque'];
    //                     $cheque_date = NULL;
    //                     $cheque_type = 1;
    //                     $cheque_bank_from = $request['customer_bank_name'];
    //                     $cheque_bank_ac_from = $request['customer_bank_account_number'];
    //                     $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
    //                     $cheque_bank_branch_from=NULL;
    //                     $cheque_bank_to=$request['company_bank'];
    //                     $cheque_bank_ac_to=$request['bank_account_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_no = NULL;
    //                     $transction_bank_from = NULL;
    //                     $transction_bank_ac_from = NULL;
    //                     $transction_bank_ifsc_from = NULL;
    //                     $transction_bank_branch_from = NULL;
    //                     $transction_bank_to = NULL;
    //                     $transction_bank_ac_to = NULL;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $payment_type = 2;
    //                     $amount_from_id =$request['associate_member_id'];
    //                     $amount_from_name = getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name;
    //                     $cheque_no = NULL;
    //                     $cheque_type = NULL;
    //                     $cheque_date = NULL;
    //                     $cheque_bank_from = NULL;
    //                     $cheque_bank_ac_from = NULL;
    //                     $cheque_bank_ifsc_from = NULL;
    //                     $cheque_bank_branch_from = NULL;
    //                     $cheque_bank_to = NULL;
    //                     $cheque_bank_ac_to = NULL;
    //                     $transction_no = $request['utr_transaction_number'];
    //                     $v_no=NULL;
    //                     $v_date=NULL;
    //                     $ssb_account_id_from=NULL;
    //                     $transction_bank_from = $request['customer_bank_name'];
    //                     $transction_bank_ac_from = $request['customer_bank_account_number'];
    //                     $transction_bank_ifsc_from = $request['customer_ifsc_code'];
    //                     $transction_bank_branch_from = $request['customer_branch_name'];
    //                     $transction_bank_to = $request['company_bank'];
    //                     $transction_bank_ac_to = $request['bank_account_number'];
    //                 }
    //                 $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,33,5,56,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //                 /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge'.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
    //                 $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef,$request['branch'],NULL,NULL,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,5,56,$loanId,$createDayBook,$request['associate_member_id'],NULL,NULL,NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$jv_unique_id=NULL,$v_no,$v_date,$ssb_account_id_from,NULL,NULL,NULL,$cheque_type,NULL,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,NULL,NULL,$cheque_bank_to,$cheque_bank_ac_to,$cheque_bank_from,$request['branch'],$transction_bank_ac_to,getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,NULL,NULL,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,NULL,1,Auth::user()->id);
    //                 /*$allTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef,$branchId,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$branchId,getBranchDetail($branchId)->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $principalmemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$branchId,$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL,$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL);
    //                 $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$jv_unique_id=NULL,$cheque_type=NULL,$cheque_id=NULL,$ssb_account_tran_id_to=NULL,$ssb_account_tran_id_from=NULL);
    //                 /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);
    //                 $principalmemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
    //                 $samraddhBankDaybook = CommanController::createSamraddhBankDaybook($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
    //                 $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($request['penalty_amount'],$request['company_bank'],getSamraddhBankAccount($request['bank_account_number'])->id,date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))),0,0);
    //             }
    //             /************** Head Implement *************/
    //             /*---------- penalty commission script  start  ---------*/
    //            /* $daybookId=$createDayBook;
    //             $total_amount=$request['penalty_amount'];
    //             $month=NULL;
    //             $type_id=$request['loan_id'];
    //             $branch_id=$request['branch'];
    //             $associate_exist=0;
    //             $commission_type=0;
    //             // Collection start
    //             $collection_percentage=5;
    //             $collection_type=8;
    //             $Collection_associate_id=$mLoan->associate_member_id;
    //             $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
    //             $Collection_carder=$collection_associateDetail->current_carder_id;
    //             $collection_percentInDecimal = $collection_percentage / 100;
    //             $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
    //             $coll_associateCommission['member_id'] = $Collection_associate_id;
    //             $coll_associateCommission['branch_id'] = $branch_id;
    //             $coll_associateCommission['type'] = $collection_type;
    //             $coll_associateCommission['type_id'] = $type_id;
    //             $coll_associateCommission['day_book_id'] = $daybookId;
    //             $coll_associateCommission['total_amount'] = $total_amount;
    //             $coll_associateCommission['month'] = $month;
    //             $coll_associateCommission['commission_amount'] = $collection_commission_amount;
    //             $coll_associateCommission['percentage'] = $collection_percentage;
    //             $coll_associateCommission['commission_type'] = $commission_type;
    //             $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
    //             $coll_associateCommission['created_at'] = $coll_date->created_at;
    //             $coll_associateCommission['pay_type'] = 4;
    //             $coll_associateCommission['carder_id'] = $Collection_carder;
    //             $coll_associateCommission['associate_exist'] = $associate_exist;
    //             $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);*/
    //             /*---------- commission script  end  ---------*/
    //             if($request['loan_emi_payment_mode'] == 0){
    //                 $paymentMode = 4;
    //                 $cheque_dd_no = NULL;
    //                 $ssbpaymentMode=5;
    //                 $online_payment_id = NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //             }elseif($request['loan_emi_payment_mode'] == 1){
    //                 if($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != ''){
    //                     $paymentMode = 1;
    //                     $cheque_dd_no = $request['customer_cheque'];
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = NULL;
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }elseif($request['bank_transfer_mode'] == 1){
    //                     $paymentMode = 2;
    //                     $cheque_dd_no = NULL;
    //                     $ssbpaymentMode=5;
    //                     $online_payment_id = $request['utr_transaction_number'];
    //                     $online_payment_by=NULL;
    //                     $satRefId = NULL;
    //                     $bank_name=NULL;
    //                     $cheque_date=NULL;
    //                     $account_number=NULL;
    //                     $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //                 }
    //             }elseif($request['loan_emi_payment_mode'] == 2){
    //                 $cheque_dd_no=NULL;
    //                 $paymentMode=0;
    //                 $ssbpaymentMode=0;
    //                 $online_payment_id=NULL;
    //                 $online_payment_by=NULL;
    //                 $satRefId = NULL;
    //                 $bank_name=NULL;
    //                 $cheque_date=NULL;
    //                 $account_number=NULL;
    //                 $paymentDate = date("Y-m-d ".$entryTime."", strtotime(convertDate($request['application_date'])));;
    //             }
    //             $createLoanDayBook = CommanController::createLoanDayBook($createDayBook,$mLoan->loan_type,1,$mLoan->id,$mLoan->id,$mLoan->account_number,$mLoan->applicant_id,$request['penalty_amount'],$request['penalty_amount'],$opening_balance=NULL,$request['penalty_amount'],'Loan EMI penalty',$request['branch'],getBranchCode($request['branch'])->branch_code,'CR','INR',$paymentMode,$cheque_dd_no,$bank_name,$branch_name=NULL,$paymentDate,$online_payment_id,1,1,$cheque_date,$account_number,NULL,$request['loan_associate_name'],$request['associate_member_id'],$request['branch']);
    //         }
    //     // DB::commit();
    //     // } catch (\Exception $ex) {
    //     //     DB::rollback();
    //     //     return back()->with('alert', $ex->getMessage());
    //     // }
    //     return back()->with('success', 'Loan EMI Successfully submitted!');
    // }
    //Temporary
    public function depositeLoanEmi(Request $request)
    {
        DB::beginTransaction();
        try
        {
            $entryTime = date("H:i:s");
            if($request['penalty_amount']>0)
            {
                $penalty = $request['penalty_amount'];
            }
            else{
                $penalty = 0;
            }
            Session::put('created_at', date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $ssbAccountDetails = SavingAccount::with('ssbMember')->where('id', $request['ssb_id'])->first();
                if ($ssbAccountDetails->balance < $request['deposite_amount'])
                {
                    return back()->with('error', 'Insufficient balance in ssb account!');
                }
            }
            $loanId = $request['loan_id'];
            $branchId = $request['branch'];
            $mLoan = Memberloans::with('loanMember')->where('id', $request['loan_id'])->first();
            $stateid = getBranchState($mLoan['loanBranch']->name);
            // $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
            $globaldate = date('Y-m-d',strtotime(convertDate($request['application_date'])));
            $getHeadSetting = \App\Models\HeadSetting::where('head_id',33)->first();
            $getGstSetting = \App\Models\GstSetting::where('state_id',$mLoan['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
            $getGstSettingno = \App\Models\GstSetting::select('id','gst_no')->where('state_id',$mLoan['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->first();
            $gstAmount = 0;
            if($request['penalty_amount']>0 && $getGstSetting)
            {
                if($mLoan['loanBranch']->state_id == 33)
                {
                    $gstAmount =  (($request['penalty_amount']*$getHeadSetting->gst_percentage)/100)/2;
                    $cgstHead = 171;
                    $sgstHead = 172;
                    $IntraState = true;
                    $gstAmount = ceil($gstAmount);
                }
                else{
                    $gstAmount =  ($request['penalty_amount']*$getHeadSetting->gst_percentage)/100;
                    $cgstHead = 170;
                    $IntraState = false;
                    $gstAmount = ceil($gstAmount);
                }
                $penalty = $request['penalty_amount'];
            }
            else{
                $penalty = 0;
            }
            $LoanCreatedDate = date('Y-m-d',strtotime($mLoan->approve_date));
            $LoanCreatedYear = date('Y',strtotime($mLoan->approve_date));
            $LoanCreatedMonth = date('m',strtotime($mLoan->approve_date));
            $LoanCreateDate = date('d',strtotime($mLoan->approve_date));
            $currentDate = date('Y-m-d');
            $CurrentDate= date('d');
            $CurrentDateYear = date('Y');
            $CurrentDateMonth = date('m');
            $applicationDate = date('Y-m-d',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDate= date('d',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDateYear =date('Y',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDateMonth =date('m',strtotime(convertDate($request['application_date'])));
            if ($mLoan->emi_option == 1){ //Month
                $daysDiff =(($CurrentDateYear - $LoanCreatedYear) * 12) + ($CurrentDateMonth - $LoanCreatedMonth);
                $daysDiff2 =today()->diffInDays($LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDates($daysDiff,$LoanCreatedDate);
                $nextEmiDates2 = $this->nextEmiDatesDays($daysDiff2,$LoanCreatedDate);
                $nextEmiDates3 = $this->nextEmiDates($mLoan->emi_period,$LoanCreatedDate);
            }
            if ($mLoan->emi_option == 2){ //Week
                $daysDiff =today()->diffInDays($LoanCreatedDate);
                $daysDiff = $daysDiff/7;
                $nextEmiDates2 = $this->nextEmiDatesDays($daysDiff,$LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDatesWeek($daysDiff,$LoanCreatedDate);
            }
            if ($mLoan->emi_option == 3){  //Days
                $daysDiff =today()->diffInDays($LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDatesDays($daysDiff,$LoanCreatedDate);
            }
            // $currentEmiDate = $nextEmiDates[$CurrentDate.'_'.$CurrentDateMonth.'_'.$CurrentDateYear];
            $totalDayInterest =0;
            $totalDailyInterest = 0;
            $newApplicationDate = explode('-',$applicationDate);
            $StartnewDAte = $applicationCurrentDateYear.'-'. $applicationCurrentDateMonth.'-01';
            $EndnewDAte = $applicationCurrentDateYear.'-'. $applicationCurrentDateMonth.'-31';
            $dailyoutstandingAmount = 0;
            $lastOutstanding = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
            $lastOutstandingDate = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->where('is_deleted','0')->pluck('emi_date')->toArray();
                // $eniDateOutstandingArray = array_values($lastOutstandingDate);
            $newDate = array();
            //$checkDate = array_intersect($nextEmiDates,$lastOutstandingDate);
            $deposit = $request['deposite_amount'];
        if(isset($lastOutstanding->out_standing_amount) )
        {
            $checkDateMonth = date('m',strtotime($lastOutstanding->emi_date));
            $checkDateYear = date('Y',strtotime($lastOutstanding->emi_date));
            $newstartDate = $checkDateYear.'-'.  $checkDateMonth.'-01';
            $newEndDate = $checkDateYear.'-'.  $checkDateMonth.'-31';
            $gapDayes = Carbon::parse($lastOutstanding->emi_date)->diff(Carbon::parse($applicationDate))->format('%a');
            $lastOutstanding2 = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->whereBetween('emi_date',[$newstartDate,$newEndDate])->where('is_deleted','0')->sum('out_standing_amount');
            $roi = ((($mLoan->ROI) / 365) * $lastOutstanding->out_standing_amount) / 100;
            if($mLoan->emi_option == 1 || $mLoan->emi_option == 2)
            {
                $roi = $roi * $gapDayes;
                $principal_amount =$deposit - $roi;
                if(!array_key_exists($applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear,$nextEmiDates)){
                    $outstandingAmount = ($lastOutstanding->out_standing_amount - $deposit );
                }else{
                    $preDate =current($nextEmiDates);
                    $oldDate = $nextEmiDates[$applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear];
                    if($mLoan->emi_option == 1)
                    {
                        $previousDate = Carbon::parse($oldDate)->subMonth(1);
                    }
                    if($mLoan->emi_option == 2)
                    {
                        $previousDate = Carbon::parse($oldDate)->subDays(7);
                    }
                    $pDate = date('Y-m-d',strtotime("+1 day",strtotime($previousDate)))  ;
                    if($preDate == $applicationDate)
                    {
                        $aqmount = LoanEmisNew::where('loan_id',$mLoan->id)->whereBetween('emi_date',[$LoanCreatedDate,$applicationDate])->where('is_deleted','0')->sum('roi_amount');
                    }
                    else{
                        $aqmount = LoanEmisNew::where('loan_id',$mLoan->id)->whereBetween('emi_date',[$pDate,$applicationDate])->where('is_deleted','0')->sum('roi_amount');
                    }
                    if($aqmount > 0)
                    {
                        $outstandingAmount = ($lastOutstanding->out_standing_amount -$deposit + $roi   + $aqmount);
                    }else{
                        $outstandingAmount = ($lastOutstanding->out_standing_amount - $deposit + $roi );
                    }
                }
               $dailyoutstandingAmount = $outstandingAmount + $roi;
            }
            else{
                $principal_amount =$deposit - $roi;
                $outstandingAmount = ($lastOutstanding->out_standing_amount - $principal_amount );
            }
            $deposit =  $request['deposite_amount'];
        }
        else{
            $roi = ((($mLoan->ROI) / 365) * $mLoan->amount) / 100;
            $gapDayes = Carbon::parse($mLoan->approve_date)->diff(Carbon::parse($applicationDate))->format('%a');
            if($mLoan->emi_option == 1 || $mLoan->emi_option == 2) //Monthly
            {
                $roi = $roi * $gapDayes;
                $principal_amount =$deposit - $roi;
                if(!array_key_exists($applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear,$nextEmiDates)){
                    $outstandingAmount = ($mLoan->amount - $deposit );
                }else{
                    $outstandingAmount = ($mLoan->amount -$deposit + $roi );
                }
               $dailyoutstandingAmount = $outstandingAmount + $roi;
            }else{
            $principal_amount = $deposit- $roi;
            $outstandingAmount = ($mLoan->amount - $principal_amount );
            }
            $deposit =  $request['deposite_amount'];
            $dailyoutstandingAmount = $mLoan->amount + $roi;
        }
            $amountArraySsb = array(
                '1' => $request['deposite_amount']
            );
            if(isset(($ssbAccountDetails['ssbMember'])))
            {
                $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name . ' ' . $ssbAccountDetails['ssbMember']->last_name;
            }
            else{
                $amount_deposit_by_name = NULL;
            }
            $dueAmount = $mLoan->due_amount - round($principal_amount);
            $mlResult = Memberloans::find($request['loan_id']);
            $lData['credit_amount'] = $mLoan->credit_amount + $principal_amount;
            $lData['due_amount'] = $dueAmount;
            if ($dueAmount == 0)
            {
                //$lData['status'] = 3;
                //$lData['clear_date'] = date("Y-m-d", strtotime(convertDate($request['application_date'])));
            }
            $lData['received_emi_amount'] = $mLoan->received_emi_amount + $request['deposite_amount'];
            $mlResult->update($lData);
            // add log
            $postData = $_POST;
            $enData = array(
                "post_data" => $postData,
                "lData" => $lData
            );
            $encodeDate = json_encode($enData);
            $arrs = array(
                "load_id" => $loanId,
                "type" => "7",
                "account_head_id" => 0,
                "user_id" => Auth::user()->id,
                "message" => "Loan Recovery   - Loan EMI payment",
                "data" => $encodeDate
            );
            DB::table('user_log')->insert($arrs);
            // end log
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $cheque_dd_no = NULL;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentMode = 4;
                $ssbpaymentMode = 3;
                $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['created_date'])));
                // $record1 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
                //     ->whereDate('created_at', '<=', date("Y-m-d", strtotime(convertDate($request['application_date']))))->orderby('id', 'desc')
                //     ->first();
                $transDate = date("Y-m-d ".$entryTime."",strtotime(convertDate($request['application_date'])));
                $record1 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
                    ->whereDate('created_at', '<=',  $transDate)->orderby('id', 'desc')
                    ->first();
                $ssb['saving_account_id'] = $ssbAccountDetails->id;
                $ssb['account_no'] = $ssbAccountDetails->account_no;
                $ssb['opening_balance'] = $record1->opening_balance - $request['deposite_amount'];
                $ssb['branch_id'] = $request['branch'];
                $ssb['type'] = 9;
                $ssb['deposit'] = 0;
                $ssb['withdrawal'] = $request['deposite_amount'];
                $ssb['description'] = 'Loan EMI Payment'.$mLoan->account_number;
                $ssb['currency_code'] = 'INR';
                $ssb['payment_type'] = 'DR';
                $ssb['payment_mode'] = $ssbpaymentMode;
                $ssb['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                $ssbAccountTran = SavingAccountTranscation::create($ssb);
                $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
                // update saving account current balance
                $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
                $ssbBalance->balance = $request['ssb_account'] - $request['deposite_amount'];
                $ssbBalance->save();
                $record2 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
                    ->whereDate('created_at', '>', date("Y-m-d", strtotime(convertDate($request['application_date']))))->get();
                foreach ($record2 as $key => $value)
                {
                    $nsResult = SavingAccountTranscation::find($value->id);
                    $nsResult['opening_balance'] = $value->opening_balance - $request['deposite_amount'];
                    $nsResult['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                    $nsResult->save();
                }
                $data['saving_account_transaction_id'] = $ssb_transaction_id;
                $data['loan_id'] = $request['loan_id'];
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                $satRef = TransactionReferences::create($data);
                $satRefId = $satRef->id;
                $updateSsbDayBook = $this->updateSsbDayBookAmount($request['deposite_amount'], $request['ssb_account_number'], date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
                $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $ssbAccountDetails->id, $ssbAccountDetails->member_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, $ssbAccountDetails->id, 'DR');
                $totalbalance = $request['ssb_account'] - $request['deposite_amount'];
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $ssbAccountDetails->member_investments_id, 0, $ssbAccountDetails->member_id, $totalbalance, 0, $request['deposite_amount'], 'Withdrawal from SSB', $request['account_number'], $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, NULL, NULL, $paymentDate, $online_payment_by, $online_payment_by, $ssbAccountDetails->id, 'DR');
            }
            elseif ($request['loan_emi_payment_mode'] == 1)
            {
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $cheque_dd_no = $request['customer_cheque'];
                    $paymentMode = 1;
                    $ssbpaymentMode = 5;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = $request['customer_bank_name'];
                    $cheque_date = $request['cheque-date'];
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $cheque_dd_no = NULL;
                    $paymentMode = 3;
                    $ssbpaymentMode = 5;
                    $online_payment_id = $request['utr_transaction_number'];
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                }
                $ssb_transaction_id = '';
                $ssb_account_id_from = '';
            }
            elseif ($request['loan_emi_payment_mode'] == 2)
            {
                $cheque_dd_no = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentMode = 0;
                $ssbpaymentMode = 0;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                $ssb_transaction_id = '';
                $ssb_account_id_from = '';
            }
            elseif ($request['loan_emi_payment_mode'] == 3)
            {
                $cheque_dd_no = $request['cheque_number'];
                $cheque_date = $request['cheque_date'];
                $bank_name = $request['bank_name'];
                $account_number = $request['account_number'];
                $paymentMode = 1;
                $ssbpaymentMode = 1;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                $ssb_transaction_id = '';
                $ssb_account_id_from = '';
            }
            $ssbCreateTran = CommanController::createTransaction($satRefId, 5, $request['loan_id'], $mLoan->applicant_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by,NULL, 'CR');
            $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 5, $request['loan_id'], 0, $mLoan->applicant_id, $dueAmount, $request['deposite_amount'], 0, 'Loan EMI deposit', $mLoan->account_number, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, NULL, 'CR');
            if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
            {
                $checkData['type'] = 4;
                $checkData['branch_id'] = $request['branch'];
                // $checkData['loan_id']=$request['loan_id'];
                $checkData['day_book_id'] = $createDayBook;
                $checkData['cheque_id'] = $cheque_dd_no;
                $checkData['status'] = 1;
                $checkData['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                $ssbAccountTran = ReceivedChequePayment::create($checkData);
                $dataRC['status'] = 3;
                $receivedcheque = ReceivedCheque::find($cheque_dd_no);
                $receivedcheque->update($dataRC);
            }
            /************* Head Implement ****************/
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
                $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 52, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'SSB A/C Cr ' . ($roi + $principal_amount) . '', 'SSB A/C Cr ' . ($roi + $principal_amount) . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $ssbAccountDetails->id, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$principalbranchDayBook = $this->createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 523, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 56, 5, 52, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
                $roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                if ($mLoan->loan_type == '1')
                {
                    $loan_head_id = 64;
                }
                elseif ($mLoan->loan_type == '2')
                {
                    $loan_head_id = 65;
                }
                elseif ($mLoan->loan_type == '3')
                {
                    $loan_head_id = 66;
                }
                elseif ($mLoan->loan_type == '4')
                {
                    $loan_head_id = 67;
                }
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 52, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /* $principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 56, 5, 52, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,52,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $roimemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 52, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $ssbAccountDetails->id, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$roimemberTransaction = $this->createMemberTransaction($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
            }
            elseif ($request['loan_emi_payment_mode'] == 2)
            {
                $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 523, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 28, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                if ($mLoan->loan_type == '1')
                {
                    $loan_head_id = 64;
                }
                elseif ($mLoan->loan_type == '2')
                {
                    $loan_head_id = 65;
                }
                elseif ($mLoan->loan_type == '3')
                {
                    $loan_head_id = 66;
                }
                elseif ($mLoan->loan_type == '4')
                {
                    $loan_head_id = 67;
                }
                $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'Cash A/C Dr ' . ($roi + $principal_amount) . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . ($roi + $principal_amount) . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$principalbranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 28, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,52,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $createRoiBranchCash = $this->updateBranchCashFromBackDate($roi + $principal_amount, $request['branch'], date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))));
            }
            elseif ($request['loan_emi_payment_mode'] == 1)
            {
                if ($mLoan->loan_type == '1')
                {
                    $loan_head_id = 64;
                }
                elseif ($mLoan->loan_type == '2')
                {
                    $loan_head_id = 65;
                }
                elseif ($mLoan->loan_type == '3')
                {
                    $loan_head_id = 66;
                }
                elseif ($mLoan->loan_type == '4')
                {
                    $loan_head_id = 67;
                }
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $payment_type = 1;
                    $amount_from_id = $request['associate_member_id'];
                    $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                    $cheque_no = $request['customer_cheque'];
                    $cheque_type = 1;
                    $chequeDate = date("Y-m-d", strtotime($request['cheque-date']));
                    $cheque_date = $chequeDate;
                    $cheque_bank_from = $request['customer_bank_name'];
                    $cheque_bank_ac_from = $request['customer_bank_account_number'];
                    $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = $request['company_bank'];
                    $cheque_bank_ac_to = $request['company_bank_account_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_no = NULL;
                    $transction_bank_from = NULL;
                    $transction_bank_ac_from = NULL;
                    $transction_bank_ifsc_from = NULL;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = $request['company_bank'];
                    $transction_bank_ac_to = $request['company_bank_account_number'];
                    $company_name = $request['cheque_company_bank'];
                    $ifsc = NULL;
                    $head_id = getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id;
                    $bankId = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                    $company_bankId = getSamraddhBankAccount($request['company_bank_account_number'])->bank_id;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $payment_type = 2;
                    $amount_from_id = $request['associate_member_id'];
                    $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                    $cheque_type = NULL;
                    $cheque_no = NULL;
                    $cheque_date = NULL;
                    $cheque_bank_from = NULL;
                    $cheque_bank_ac_from = NULL;
                    $cheque_bank_ifsc_from = NULL;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = NULL;
                    $transction_no = $request['utr_transaction_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_bank_from = $request['customer_bank_name'];
                    $transction_bank_ac_from = $request['customer_bank_account_number'];
                    $transction_bank_ifsc_from = $request['customer_ifsc_code'];
                    $transction_bank_branch_from = $request['customer_branch_name'];
                    $transction_bank_to = $request['company_bank'];
                    $transction_bank_ac_to = $request['bank_account_number'];
                    $company_name = getSamraddhBank($request['company_bank'])->bank_name;
                    $ifsc = getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code;
                    $bankId = getSamraddhBankAccount($request['bank_account_number'])->id;
                    $head_id = getSamraddhBankAccount($request['bank_account_number'])->account_head_id;
                    $company_bankId = getSamraddhBank($request['company_bank'])->id;
                }
                $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 523, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, $cheque_no, NULL, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, $cheque_no, NULL, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, $cheque_no, NULL, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, $cheque_no, NULL, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $principalbranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'Online A/C Dr ' . ($roi + $principal_amount) . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . ($roi + $principal_amount) . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no, $cheque_date, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$principalbranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
                $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $request['branch'], $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                // $principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branch_id = NULL, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $created_at = NULL);
                $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($roidayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 52, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $request['branch'], $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, 'EMI collection', 'Online A/C Cr. ' . ($roi + $principal_amount) . '', 'Online A/C Cr. ' . ($roi + $principal_amount) . '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                /*$samraddhBankDaybook = CommanController::createSamraddhBankDaybook($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,52,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'EMI collection','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($roi + $principal_amount, $company_bankId, $bankId, date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))) , 0, 0);
            }
            /************* Head Implement ****************/
            /*---------- commission script  start  ---------*/
            $daybookId = $createDayBook;
            $total_amount = $request['deposite_amount'];
            $percentage = 2;
            $month = NULL;
            $type_id = $request['loan_id'];
            $type = 4;
            $associate_id = $request['associate_member_id'];
            $branch_id = $request['branch'];
            $commission_type = 0;
            $associateDetail = Member::where('id', $associate_id)->first();
            $carder = $associateDetail->current_carder_id;
            $associate_exist = 0;
            $percentInDecimal = $percentage / 100;
            $commission_amount = round($percentInDecimal * $total_amount, 4);
            $loan_associate_code = $request->loan_associate_code;
            $associateCommission['member_id'] = $associate_id;
            $associateCommission['branch_id'] = $branch_id;
            $associateCommission['type'] = $type;
            $associateCommission['type_id'] = $type_id;
            $associateCommission['day_book_id'] = $daybookId;
            $associateCommission['total_amount'] = $total_amount;
            $associateCommission['month'] = $month;
            $associateCommission['commission_amount'] = $commission_amount;
            $associateCommission['percentage'] = $percentage;
            $associateCommission['commission_type'] = $commission_type;
            $date = \App\Models\Daybook::where('id', $daybookId)->first();
            $associateCommission['created_at'] = $date->created_at;
            $associateCommission['pay_type'] = 4;
            $associateCommission['carder_id'] = $carder;
            $associateCommission['associate_exist'] = $associate_exist;
            if($loan_associate_code != 9999999)
            {
            $associateCommissionInsert = \App\Models\CommissionEntryLoan::create($associateCommission);
            }
            /*---------- commission script  end  ---------*/
            $createLoanDayBook = CommanController::createLoanDayBook($roidayBookRef, $daybookId, $mLoan->loan_type, 0, $loanId, $lId = NULL, $mLoan->account_number, $mLoan->applicant_id, $roi, $principal_amount, $dueAmount, $request['deposite_amount'], 'Loan EMI deposit', $request['branch'], getBranchCode($request['branch'])->branch_code, 'CR', 'INR', $paymentMode, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, 1, 1, $cheque_date, $account_number, NULL, $request['loan_associate_name'], $request['associate_member_id'], $request['branch'],$totalDailyInterest,$totalDayInterest,$penalty);
            if ($request['penalty_amount'] != '' && $request['penalty_amount'] > 0)
            {
                $amountArray = array(
                    '1' => $request['penalty_amount']
                );
                if ($request['loan_emi_payment_mode'] == 0)
                {
                    $cheque_dd_no = NULL;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentMode = 4;
                    $ssbpaymentMode = 3;
                    $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                    $ssb['saving_account_id'] = $ssbAccountDetails->id;
                    $ssb['account_no'] = $ssbAccountDetails->account_no;
                    $ssb['opening_balance'] = $request['ssb_account'] - $request['penalty_amount'];
                    $ssb['deposit'] = 0;
                    $ssb['withdrawal'] = $request['penalty_amount'];
                    $ssb['description'] = 'Loan EMI Penalty';
                    $ssb['currency_code'] = 'INR';
                    $ssb['payment_type'] = 'DR';
                    $ssb['payment_mode'] = $ssbpaymentMode;
                    $ssb['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    if($gstAmount > 0)
                    {
                         $ssbgst['saving_account_id'] = $ssbAccountDetails->id;
                    $ssbgst['account_no'] = $ssbAccountDetails->account_no;
                    $ssbgst['opening_balance'] = $request['ssb_account'] - $request['penalty_amount'];
                    $ssbgst['deposit'] = 0;
                    $ssbgst['withdrawal'] = $gstAmount;
                    $ssbgst['description'] = 'Loan EMI Penalty Gst Charge'.$mLoan->account_number;
                    $ssbgst['currency_code'] = 'INR';
                    $ssbgst['payment_type'] = 'DR';
                    $ssbgst['payment_mode'] = $ssbpaymentMode;
                    $ssbgst['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    $ssbAccountTranGst = SavingAccountTranscation::create($ssbgst);
                    }
                    $ssbAccountTran = SavingAccountTranscation::create($ssb);
                    $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
                    // update saving account current balance
                    $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
                    $ssbBalance->balance = $request['ssb_account'] - $request['penalty_amount'];
                    $ssbBalance->save();
                    $data['saving_account_transaction_id'] = $ssb_transaction_id;
                    $data['loan_id'] = $request['loan_id'];
                    $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    $satRef = TransactionReferences::create($data);
                    $satRefId = $satRef->id;
                    $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $ssbAccountDetails->id, $ssbAccountDetails->member_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, $ssbAccountDetails->id, 'DR');
                    $totalbalance = $request['ssb_account'] - $request['penalty_amount'];
                    $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $ssbAccountDetails->member_investments_id, 0, $ssbAccountDetails->member_id, $totalbalance, 0, $request['penalty_amount'], 'Withdrawal from SSB', $request['account_number'], $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, NULL, NULL, $paymentDate, $online_payment_by, $online_payment_by, $ssbAccountDetails->id, 'DR');
                }
                elseif ($request['loan_emi_payment_mode'] == 1)
                {
                    if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                    {
                        $paymentMode = 1;
                        $cheque_dd_no = $request['customer_cheque'];
                        $ssbpaymentMode = 5;
                        $online_payment_id = NULL;
                        $online_payment_by = NULL;
                        $satRefId = NULL;
                        $bank_name = NULL;
                        $cheque_date = NULL;
                        $account_number = NULL;
                        $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    }
                    elseif ($request['bank_transfer_mode'] == 1)
                    {
                        $paymentMode = 3;
                        $cheque_dd_no = NULL;
                        $ssbpaymentMode = 5;
                        $online_payment_id = $request['utr_transaction_number'];
                        $online_payment_by = NULL;
                        $satRefId = NULL;
                        $bank_name = NULL;
                        $cheque_date = NULL;
                        $account_number = NULL;
                        $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    }
                    $ssb_transaction_id = '';
                    $ssb_account_id_from = '';
                }
                elseif ($request['loan_emi_payment_mode'] == 2)
                {
                    $cheque_dd_no = NULL;
                    $paymentMode = 0;
                    $ssbpaymentMode = 0;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    $ssb_transaction_id = '';
                    $ssb_account_id_from = '';
                }
                $ssbCreateTran = CommanController::createTransaction($satRefId, 11, $request['loan_id'], $mLoan->applicant_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, NULL, 'CR');
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 11, $request['loan_id'], 0, $mLoan->applicant_id, $dueAmount, $request['penalty_amount'], 0, 'Loan EMI penalty', $mLoan->account_number, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, NULL, 'CR');
                if ($request['loan_emi_payment_mode'] == 3)
                {
                    $checkData['type'] = 4;
                    $checkData['branch_id'] = $request['branch'];
                    // $checkData['loan_id']=$request['loan_id'];
                    $checkData['day_book_id'] = $createDayBook;
                    $checkData['cheque_id'] = $cheque_dd_no;
                    $checkData['status'] = 1;
                    $checkData['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    $ssbAccountTran = ReceivedChequePayment::create($checkData);
                    $dataRC['status'] = 3;
                    $receivedcheque = ReceivedCheque::find($cheque_dd_no);
                    $receivedcheque->update($dataRC);
                }
                /************* Head Implement ****************/
                if ($request['loan_emi_payment_mode'] == 0)
                {
                    $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    $v_no = "";
                    for ($i = 0;$i < 10;$i++)
                    {
                        $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                    }
                    $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                    $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 53, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'SSB A/C Cr ' . $request['penalty_amount'] . '', 'SSB A/C Cr ' . $request['penalty_amount'] . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$roibranchDayBook = $this->createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 53, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                    /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 53, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                    /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                    $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 53, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$roimemberTransaction = $this->createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                    //Gst Penalty Transacvtion Cash
                    if($gstAmount > 0)
                    {
                        if($IntraState)
                        {
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 533, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 534, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 533, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty  CGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 534, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty  SGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 533, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 534, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 533, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty CGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 534, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty SGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        }
                        else{
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 535, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 535, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty  IGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 535, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          /* $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 535, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id); */
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 535, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty IGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        }
                        $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$mLoan->branch_id);
                    }
                }
                elseif ($request['loan_emi_payment_mode'] == 2)
                {
                    $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                    $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Dr ' . $request['penalty_amount'] . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $request['penalty_amount'] . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                    /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                    /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$roimemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    //Gst Penalty Transaction  Cash
                    if($gstAmount > 0)
                    {
                        if($IntraState)
                        {
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty CGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty SGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        }
                        else{
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty IGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        }
                        $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$request['branch']);
                    }
                    $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($request['penalty_amount'] + $gstAmount, $request['branch'], date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
                }
                elseif ($request['loan_emi_payment_mode'] == 1)
                {
                    if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                    {
                        $payment_type = 1;
                        $amount_from_id = $request['associate_member_id'];
                        $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                        $cheque_no = $request['customer_cheque'];
                        $cheque_type = 1;
                        $cheque_date = NULL;
                        $cheque_bank_from = $request['customer_bank_name'];
                        $cheque_bank_ac_from = $request['customer_bank_account_number'];
                        $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
                        $cheque_bank_branch_from = NULL;
                        $cheque_bank_to = $request['company_bank'];
                        $cheque_bank_ac_to = $request['bank_account_number'];
                        $v_no = NULL;
                        $v_date = NULL;
                        $ssb_account_id_from = NULL;
                        $transction_no = NULL;
                        $transction_bank_from = NULL;
                        $transction_bank_ac_from = NULL;
                        $transction_bank_ifsc_from = NULL;
                        $transction_bank_branch_from = NULL;
                        $transction_bank_to = NULL;
                        $transction_bank_ac_to = NULL;
                    }
                    elseif ($request['bank_transfer_mode'] == 1)
                    {
                        $payment_type = 2;
                        $amount_from_id = $request['associate_member_id'];
                        $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                        $cheque_no = NULL;
                        $cheque_type = NULL;
                        $cheque_date = NULL;
                        $cheque_bank_from = NULL;
                        $cheque_bank_ac_from = NULL;
                        $cheque_bank_ifsc_from = NULL;
                        $cheque_bank_branch_from = NULL;
                        $cheque_bank_to = NULL;
                        $cheque_bank_ac_to = NULL;
                        $transction_no = $request['utr_transaction_number'];
                        $v_no = NULL;
                        $v_date = NULL;
                        $ssb_account_id_from = NULL;
                        $transction_bank_from = $request['customer_bank_name'];
                        $transction_bank_ac_from = $request['customer_bank_account_number'];
                        $transction_bank_ifsc_from = $request['customer_ifsc_code'];
                        $transction_bank_branch_from = $request['customer_branch_name'];
                        $transction_bank_to = $request['company_bank'];
                        $transction_bank_ac_to = $request['bank_account_number'];
                    }
                    $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                    /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
                    $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                    /*$allTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Dr ' . $request['penalty_amount'] . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $request['penalty_amount'] . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
                    $principalmemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    /*$principalmemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,53,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    //Old Samraddh Bank daybook
                    // $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branchId,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$company_bankId,$company_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$request['application_date'],$request['application_date'],$entry_time=NULL,2,Auth::user()->id,$request['application_date'],$jv_unique_id,$cheque_type,$cheque_id,$ssb_account_tran_id_to,$ssb_account_tran_id_from);
                    $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 53, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Cr. ' . $request['penalty_amount'] . '', 'Cash A/C Cr. ' . $request['penalty_amount'] . '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                    /*$samraddhBankDaybook = CommanController::createSamraddhBankDaybook($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,53,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$amount_from_name,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_bank_to_name,$transction_bank_to_ac_no,$transction_bank_to_branch,$transction_bank_to_ifsc,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    //GSt Penalty Transaction BAnk
                    if($gstAmount > 0)
                    {
                        if($IntraState)
                        {
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'Bank A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'CR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'DR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'CR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'DR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty CGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty SGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 533, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty CGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount . '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = NULL, 5, 534, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty SGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount. '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                        }
                        else{
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'Cash A/C Dr ' . gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty Charge', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Loan Panelty IGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 535, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount. '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                        }
                        $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$request['branch']);
                    }
                    $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($request['penalty_amount'] + $gstAmount, $company_bankId, $bankId, date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))) , 0, 0);
                }
                /************* Head Implement ****************/
                /*---------- penalty commission script  start  ---------*/
                /* $daybookId=$createDayBook;
                $total_amount=$request['penalty_amount'];
                $month=NULL;
                $type_id=$request['loan_id'];
                $branch_id=$request['branch'];
                $associate_exist=0;
                $commission_type=0;
                // Collection start
                $collection_percentage=5;
                $collection_type=6;
                $Collection_associate_id=$mLoan->associate_member_id;
                $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
                $Collection_carder=$collection_associateDetail->current_carder_id;
                $collection_percentInDecimal = $collection_percentage / 100;
                $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
                $coll_associateCommission['member_id'] = $Collection_associate_id;
                $coll_associateCommission['branch_id'] = $branch_id;
                $coll_associateCommission['type'] = $collection_type;
                $coll_associateCommission['type_id'] = $type_id;
                $coll_associateCommission['day_book_id'] = $daybookId;
                $coll_associateCommission['total_amount'] = $total_amount;
                $coll_associateCommission['month'] = $month;
                $coll_associateCommission['commission_amount'] = $collection_commission_amount;
                $coll_associateCommission['percentage'] = $collection_percentage;
                $coll_associateCommission['commission_type'] = $commission_type;
                $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
                $coll_associateCommission['created_at'] = $coll_date->created_at;
                $coll_associateCommission['pay_type'] = 4;
                $coll_associateCommission['carder_id'] = $Collection_carder;
                $coll_associateCommission['associate_exist'] = $associate_exist;
                $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);*/
                /*---------- penalty commission script  end  ---------*/
                if ($request['loan_emi_payment_mode'] == 0)
                {
                    $paymentMode = 4;
                    $cheque_dd_no = NULL;
                    $ssbpaymentMode = 5;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
                elseif ($request['loan_emi_payment_mode'] == 1)
                {
                    if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                    {
                        $paymentMode = 1;
                        $cheque_dd_no = $request['customer_cheque'];
                        $ssbpaymentMode = 5;
                        $online_payment_id = NULL;
                        $online_payment_by = NULL;
                        $satRefId = NULL;
                        $bank_name = NULL;
                        $cheque_date = NULL;
                        $account_number = NULL;
                        $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    }
                    elseif ($request['bank_transfer_mode'] == 1)
                    {
                        $paymentMode = 2;
                        $cheque_dd_no = NULL;
                        $ssbpaymentMode = 5;
                        $online_payment_id = $request['utr_transaction_number'];
                        $online_payment_by = NULL;
                        $satRefId = NULL;
                        $bank_name = NULL;
                        $cheque_date = NULL;
                        $account_number = NULL;
                        $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    }
                }
                elseif ($request['loan_emi_payment_mode'] == 2)
                {
                    $cheque_dd_no = NULL;
                    $paymentMode = 0;
                    $ssbpaymentMode = 0;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
                $createLoanDayBook = CommanController::createLoanDayBook($penaltyDayBookRef, $createDayBook, $mLoan->loan_type, 1, $mLoan->id, $lId = NULL, $mLoan->account_number, $mLoan->applicant_id, $request['penalty_amount'], $request['penalty_amount'], $dueAmount, $request['penalty_amount'], 'Loan EMI penalty', $request['branch'], getBranchCode($request['branch'])->branch_code, 'CR', 'INR', $paymentMode, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, 1, 1, $cheque_date, $account_number, NULL, $request['loan_associate_name'], $request['associate_member_id'], $request['branch'],$totalDailyInterest,$totalDayInterest,$penalty);
                $record = LoanDaybooks::find($createLoanDayBook);
                if($gstAmount)
                {
                    if($IntraState)
                    {
                        $updateData =$record->update(['cgst_charge'=>$gstAmount,'sgst_charge'=>$gstAmount]);
                    }
                    else{
                        $updateData =$record->update(['igst_charge'=>$gstAmount]);
                    }
                }
            }
            $totalDepsoit = LoanDaybooks::where('account_number',$mLoan->account_number)->where('loan_sub_type',0)->where('is_deleted',0)->sum('deposit');
            $text = 'Dear Member,Received Rs.'.  $request['deposite_amount']. ' as EMI of Loan A/C '. $mLoan->account_number.' on '. date('d/m/Y',strtotime(convertDate($request['application_date']))).' Total recovery Rs. '.$totalDepsoit.' Thank You. Samraddh Bestwin Microfinance';;
            $temaplteId = 1207166308935249821;
            $contactNumber = array();
            $memberDetail = Member::find($mLoan->applicant_id);
            $contactNumber[] = $memberDetail->mobile_no;
            $sendToMember = new Sms();
            $sendToMember->sendSms( $contactNumber, $text, $temaplteId);
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return back()->with('success', 'Loan EMI Successfully submitted!');
    }
    public function depositeGroupLoanEmi(Request $request)
    {
        DB::beginTransaction();
        try {
        $entryTime = date("H:i:s");
        if($request['penalty_amount']>0)
        {
            $penalty = $request['penalty_amount'];
        }
        else{
            $penalty = 0;
        }
        Session::put('created_at', date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
        if ($request['loan_emi_payment_mode'] == 0)
        {
            $ssbAccountDetails = SavingAccount::with('ssbMember')->where('id', $request['ssb_id'])->first();
            if ($ssbAccountDetails->balance < $request['deposite_amount'])
            {
                return back()->with('error', 'Insufficient balance in ssb account!');
            }
        }
        $loanId = $request['loan_id'];
        $branchId = $request['branch'];
        $mLoan = Grouploans::with(['loanMember','loanBranch'])->where('id', $request['loan_id'])->first();
        $stateid = getBranchState($mLoan['loanBranch']->name);
        // $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
        $globaldate = date('Y-m-d',strtotime(convertDate($request['application_date'])));
        $getHeadSetting = \App\Models\HeadSetting::where('head_id',33)->first();
        $getGstSetting = \App\Models\GstSetting::where('state_id',$mLoan['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->exists();
        $getGstSettingno = \App\Models\GstSetting::select('id','gst_no')->where('state_id',$mLoan['loanBranch']->state_id)->where('applicable_date','<=',$globaldate)->first();
        $gstAmount = 0;
            if($request['penalty_amount']>0 && $getGstSetting)
            {
                if($mLoan['loanBranch']->state_id == 33)
                {
                    $gstAmount =  (($request['penalty_amount']*$getHeadSetting->gst_percentage)/100)/2;
                    $cgstHead = 171;
                    $sgstHead = 172;
                    $IntraState = true;
                    $gstAmount = ceil($gstAmount);
                }
                else{
                    $gstAmount =  ($request['penalty_amount']*$getHeadSetting->gst_percentage)/100;
                    $cgstHead = 170;
                    $IntraState = false;
                    $gstAmount = ceil($gstAmount);
                }
                $penalty = $request['penalty_amount'];
            }
            else{
                $penalty = 0;
            }
            $LoanCreatedDate = date('Y-m-d',strtotime($mLoan->approve_date));
            $LoanCreatedYear = date('Y',strtotime($mLoan->approve_date));
            $LoanCreatedMonth = date('m',strtotime($mLoan->approve_date));
            $LoanCreateDate = date('d',strtotime($mLoan->approve_date));
            $currentDate = date('Y-m-d');
            $CurrentDate= date('d');
            $CurrentDateYear = date('Y');
            $CurrentDateMonth = date('m');
            $applicationDate = date('Y-m-d',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDate= date('d',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDateYear =date('Y',strtotime(convertDate($request['application_date'])));
            $applicationCurrentDateMonth =date('m',strtotime(convertDate($request['application_date'])));
            if ($mLoan->emi_option == 1){ //Month
                $daysDiff =(($CurrentDateYear - $LoanCreatedYear) * 12) + ($CurrentDateMonth - $LoanCreatedMonth);
                $daysDiff2 =today()->diffInDays($LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDates($daysDiff,$LoanCreatedDate);
                $nextEmiDates2 = $this->nextEmiDatesDays($daysDiff2,$LoanCreatedDate);
                $nextEmiDates3 = $this->nextEmiDates($mLoan->emi_period,$LoanCreatedDate);
            }
            if ($mLoan->emi_option == 2){ //Week
                $daysDiff =today()->diffInDays($LoanCreatedDate);
                $daysDiff = $daysDiff/7;
                $nextEmiDates2 = $this->nextEmiDatesDays($daysDiff,$LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDatesWeek($daysDiff,$LoanCreatedDate);
            }
            if ($mLoan->emi_option == 3){  //Days
                $daysDiff =today()->diffInDays($LoanCreatedDate);
                $nextEmiDates = $this->nextEmiDatesDays($daysDiff,$LoanCreatedDate);
            }
            // $currentEmiDate = $nextEmiDates[$CurrentDate.'_'.$CurrentDateMonth.'_'.$CurrentDateYear];
            $totalDayInterest =0;
            $totalDailyInterest = 0;
            $newApplicationDate = explode('-',$applicationDate);
            $StartnewDAte = $applicationCurrentDateYear.'-'. $applicationCurrentDateMonth.'-01';
            $EndnewDAte = $applicationCurrentDateYear.'-'. $applicationCurrentDateMonth.'-31';
            $dailyoutstandingAmount = 0;
            $lastOutstanding = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
            $lastOutstandingDate = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->where('is_deleted','0')->pluck('emi_date')->toArray();
                // $eniDateOutstandingArray = array_values($lastOutstandingDate);
            $newDate = array();
            //$checkDate = array_intersect($nextEmiDates,$lastOutstandingDate);
            $deposit = $request['deposite_amount'];
        if(isset($lastOutstanding->out_standing_amount) )
        {
            $checkDateMonth = date('m',strtotime($lastOutstanding->emi_date));
            $checkDateYear = date('Y',strtotime($lastOutstanding->emi_date));
            $newstartDate = $checkDateYear.'-'.  $checkDateMonth.'-01';
            $newEndDate = $checkDateYear.'-'.  $checkDateMonth.'-31';
            $gapDayes = Carbon::parse($lastOutstanding->emi_date)->diff(Carbon::parse($applicationDate))->format('%a');
            $lastOutstanding2 = LoanEmisNew::where('loan_id',$mLoan->id)->where('loan_type',$mLoan->loan_type)->whereBetween('emi_date',[$newstartDate,$newEndDate])->where('is_deleted','0')->sum('out_standing_amount');
            $roi = ((($mLoan->ROI) / 365) * $lastOutstanding->out_standing_amount) / 100;
            if($mLoan->emi_option == 1 || $mLoan->emi_option == 2)
            {
                $roi = $roi * $gapDayes;
                $principal_amount =$deposit - $roi;
                if(!array_key_exists($applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear,$nextEmiDates)){
                    $outstandingAmount = ($lastOutstanding->out_standing_amount - $deposit );
                }else{
                    $preDate =current($nextEmiDates);
                    $oldDate = $nextEmiDates[$applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear];
                    if($mLoan->emi_option == 1)
                    {
                        $previousDate = Carbon::parse($oldDate)->subMonth(1);
                    }
                    if($mLoan->emi_option == 2)
                    {
                        $previousDate = Carbon::parse($oldDate)->subDays(7);
                    }
                    $pDate = date('Y-m-d',strtotime("+1 day",strtotime($previousDate)))  ;
                    if($preDate == $applicationDate)
                    {
                        $aqmount = LoanEmisNew::where('loan_id',$mLoan->id)->whereBetween('emi_date',[$LoanCreatedDate,$applicationDate])->where('is_deleted','0')->sum('roi_amount');
                    }
                    else{
                        $aqmount = LoanEmisNew::where('loan_id',$mLoan->id)->whereBetween('emi_date',[$pDate,$applicationDate])->where('is_deleted','0')->sum('roi_amount');
                    }
                    if($aqmount > 0)
                    {
                        $outstandingAmount = ($lastOutstanding->out_standing_amount -$deposit + $roi   + $aqmount);
                    }else{
                        $outstandingAmount = ($lastOutstanding->out_standing_amount - $deposit + $roi );
                    }
                }
               $dailyoutstandingAmount = $outstandingAmount + $roi;
            }
            else{
                $principal_amount =$deposit - $roi;
                $outstandingAmount = ($lastOutstanding->out_standing_amount - $principal_amount );
            }
            $deposit =  $request['deposite_amount'];
        }
        else{
            $roi = ((($mLoan->ROI) / 365) * $mLoan->amount) / 100;
            $gapDayes = Carbon::parse($mLoan->approve_date)->diff(Carbon::parse($applicationDate))->format('%a');
            if($mLoan->emi_option == 1 || $mLoan->emi_option == 2) //Monthly
            {
                $roi = $roi * $gapDayes;
                $principal_amount =$deposit - $roi;
                if(!array_key_exists($applicationCurrentDate.'_'.$applicationCurrentDateMonth.'_'.$applicationCurrentDateYear,$nextEmiDates)){
                    $outstandingAmount = ($mLoan->amount - $deposit );
                }else{
                    $outstandingAmount = ($mLoan->amount -$deposit + $roi );
                }
               $dailyoutstandingAmount = $outstandingAmount + $roi;
            }else{
            $principal_amount = $deposit- $roi;
            $outstandingAmount = ($mLoan->amount - $principal_amount );
            }
            $deposit =  $request['deposite_amount'];
            $dailyoutstandingAmount = $mLoan->amount + $roi;
        }
        $amountArraySsb = array(
            '1' => $request['deposite_amount']
        );
        if(isset(($ssbAccountDetails['ssbMember'])))
        {
            $amount_deposit_by_name = $ssbAccountDetails['ssbMember']->first_name . ' ' . $ssbAccountDetails['ssbMember']->last_name;
        }
        else{
            $amount_deposit_by_name = NULL;
        }
        $dueAmount = $mLoan->due_amount - round($principal_amount);
        $glResult = Grouploans::find($request['loan_id']);
        $glData['credit_amount'] = $mLoan->credit_amount + $principal_amount;
        $glData['due_amount'] = $dueAmount;
        if ($dueAmount == 0)
        {
            $glData['status'] = 3;
        }
        $glResult['received_emi_amount'] = $mLoan->received_emi_amount + $request['deposite_amount'];
        $glResult->update($glData);
        $gmLoan = Memberloans::with('loanMember')->where('id', $mLoan->member_loan_id)
            ->first();
        $gmDueAmount = $gmLoan->due_amount - $principal_amount;
        $mlResult = Memberloans::find($mLoan->member_loan_id);
        $lData['credit_amount'] = $mLoan->credit_amount + $principal_amount;
        $lData['due_amount'] = $gmDueAmount;
        if ($dueAmount == 0)
        {
            //$lData['status'] = 3;
            //$lData['clear_date'] = date("Y-m-d", strtotime(convertDate($request['application_date'])));
        }
        $mlResult->update($lData);
        // add log
        $postData = $_POST;
        $enData = array(
            "post_data" => $postData,
            "lData" => $lData
        );
        $encodeDate = json_encode($enData);
        $arrs = array(
            "load_id" => $loanId,
            "type" => "7",
            "account_head_id" => 0,
            "user_id" => Auth::user()->id,
            "message" => "Group Loan Recovery - Loan EMI payment",
            "data" => $encodeDate
        );
        DB::table('user_log')->insert($arrs);
        // end log
        if ($request['loan_emi_payment_mode'] == 0)
        {
            $cheque_dd_no = NULL;
            $online_payment_id = NULL;
            $online_payment_by = NULL;
            $bank_name = NULL;
            $cheque_date = NULL;
            $account_number = NULL;
            $paymentMode = 4;
            $ssbpaymentMode = 3;
            $paymentDate = date("Y-m-d", strtotime(convertDate($request['created_date'])));;
            // $record1 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
            //     ->whereDate('created_at', '<', date("Y-m-d", strtotime(convertDate($request['application_date']))))->orderby('id', 'desc')
            //     ->first();
            $transDate = date("Y-m-d ".$entryTime."",strtotime(convertDate($request['application_date'])));
            $record1 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
                ->whereDate('created_at', '<=',  $transDate)->orderby('id', 'desc')
                ->first();
            $ssb['saving_account_id'] = $ssbAccountDetails->id;
            $ssb['account_no'] = $ssbAccountDetails->account_no;
            $ssb['opening_balance'] = $record1->opening_balance - $request['deposite_amount'];
            $ssb['branch_id'] = $request['branch'];
            $ssb['type'] = 9;
            $ssb['deposit'] = 0;
            $ssb['withdrawal'] = $request['deposite_amount'];
            $ssb['description'] = 'Loan EMI Payment'.$mLoan->account_number;
            $ssb['currency_code'] = 'INR';
            $ssb['payment_type'] = 'DR';
            $ssb['payment_mode'] = $ssbpaymentMode;
            $ssb['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            $ssbAccountTran = SavingAccountTranscation::create($ssb);
            $ssb_transaction_id = $ssb_account_id_from = $ssbAccountTran->id;
            // update saving account current balance
            $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
            $ssbBalance->balance = $request['ssb_account'] - $request['deposite_amount'];
            $ssbBalance->save();
            $record2 = SavingAccountTranscation::where('account_no', $ssbAccountDetails->account_no)
                ->whereDate('created_at', '>', date("Y-m-d", strtotime(convertDate($request['application_date']))))->get();
            foreach ($record2 as $key => $value)
            {
                $nsResult = SavingAccountTranscation::find($value->id);
                $nsResult['opening_balance'] = $value->opening_balance - $request['deposite_amount'];
                $nsResult['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                $sResult->update($nsResult);
            }
            $data['saving_account_transaction_id'] = $ssb_transaction_id;
            $data['loan_id'] = $request['loan_id'];
            $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            $satRef = TransactionReferences::create($data);
            $satRefId = $satRef->id;
            $updateSsbDayBook = $this->updateSsbDayBookAmount($request['deposite_amount'], $request['ssb_account_number'], date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
            $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $ssbAccountDetails->id, $ssbAccountDetails->member_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, $ssbAccountDetails->id, 'DR');
            $totalbalance = $request['ssb_account'] - $request['deposite_amount'];
            $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $ssbAccountDetails->member_investments_id, 0, $ssbAccountDetails->member_id, $totalbalance, 0, $request['deposite_amount'], 'Withdrawal from SSB', $request['account_number'], $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, NULL, NULL, $paymentDate, $online_payment_by, $online_payment_by, $ssbAccountDetails->id, 'DR');
        }
        elseif ($request['loan_emi_payment_mode'] == 1)
        {
            if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
            {
                $cheque_dd_no = $request['customer_cheque'];
                $paymentMode = 1;
                $ssbpaymentMode = 5;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            }
            elseif ($request['bank_transfer_mode'] == 1)
            {
                $cheque_dd_no = NULL;
                $paymentMode = 3;
                $ssbpaymentMode = 5;
                $online_payment_id = $request['utr_transaction_number'];
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
            }
            $ssb_transaction_id = '';
            $ssb_account_id_from = '';
        }
        elseif ($request['loan_emi_payment_mode'] == 2)
        {
            $cheque_dd_no = NULL;
            $paymentMode = 0;
            $ssbpaymentMode = 0;
            $online_payment_id = NULL;
            $online_payment_by = NULL;
            $satRefId = NULL;
            $bank_name = NULL;
            $cheque_date = NULL;
            $account_number = NULL;
            $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            $ssb_transaction_id = '';
            $ssb_account_id_from = '';
        }
        elseif ($request['loan_emi_payment_mode'] == 3)
        {
            $cheque_dd_no = $request['cheque_number'];
            $cheque_date = $request['cheque_date'];
            $bank_name = $request['bank_name'];
            $account_number = $request['account_number'];
            $paymentMode = 1;
            $ssbpaymentMode = 1;
            $online_payment_id = NULL;
            $online_payment_by = NULL;
            $satRefId = NULL;
            $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            $ssb_transaction_id = '';
            $ssb_account_id_from = '';
        }
        $ssbCreateTran = CommanController::createTransaction($satRefId, 9, $request['loan_id'], $mLoan->applicant_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, NULL, 'CR');
        $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 9, $request['loan_id'], 0, $mLoan->applicant_id, $dueAmount, $request['deposite_amount'], 0, 'Loan EMI deposite', $mLoan->account_number, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArraySsb, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_by, $online_payment_by, NULL, 'CR');
        if ($request['loan_emi_payment_mode'] == 3)
        {
            $checkData['type'] = 5;
            $checkData['branch_id'] = $request['branch'];
            // $checkData['loan_id']=$request['loan_id'];
            $checkData['day_book_id'] = $createDayBook;
            $checkData['cheque_id'] = $cheque_dd_no;
            $checkData['status'] = 1;
            $checkData['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
            $ssbAccountTran = ReceivedChequePayment::create($checkData);
            $dataRC['status'] = 3;
            $receivedcheque = ReceivedCheque::find($cheque_dd_no);
            $receivedcheque->update($dataRC);
        }
        /*************** Head Implement ************/
        if ($request['loan_emi_payment_mode'] == 0)
        {
            $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            $v_no = "";
            for ($i = 0;$i < 10;$i++)
            {
                $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
            }
            $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
            $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 55, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'SSB A/C Cr ' . ($roi + $principal_amount) . '', 'SSB A/C Cr ' . ($roi + $principal_amount) . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            /*$roibranchDayBook = $this->createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','SSB A/C Cr '.($roi+$principal_amount).'','SSB A/C Cr '.($roi+$principal_amount).'','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 524, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 56, 5, 55, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
                $roiallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
            $loan_head_id = 66;
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 55, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 56, 5, 55, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);
                $principalallTransaction = $this->createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
            $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 55, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            /*$principalmemberTransaction = $this->createMemberTransaction($roidayBookRef,5,55,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
        }
        elseif ($request['loan_emi_payment_mode'] == 2)
        {
            $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
            $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'Cash A/C Dr ' . ($roi + $principal_amount) . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . ($roi + $principal_amount) . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            /*$roibranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Cash A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 524, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 28, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $loan_head_id = 66;
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 28, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
            /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($roi + $principal_amount, $request['branch'], date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
        }
        elseif ($request['loan_emi_payment_mode'] == 1)
        {
            $loan_head_id = 66;
            if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
            {
                $payment_type = 1;
                $amount_from_id = $request['associate_member_id'];
                $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                $cheque_no = $request['customer_cheque'];
                $cheque_date = NULL;
                $cheque_type = 1;
                $cheque_bank_from = $request['customer_bank_name'];
                $cheque_bank_ac_from = $request['customer_bank_account_number'];
                $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
                $cheque_bank_branch_from = NULL;
                $cheque_bank_to = $request['company_bank'];
                $cheque_bank_ac_to = $request['bank_account_number'];
                $v_no = NULL;
                $v_date = NULL;
                $ssb_account_id_from = NULL;
                $transction_no = NULL;
                $transction_bank_from = NULL;
                $transction_bank_ac_from = NULL;
                $transction_bank_ifsc_from = NULL;
                $transction_bank_branch_from = NULL;
                $transction_bank_to = $request['company_bank'];
                $transction_bank_ac_to = $request['bank_account_number'];
                $company_name = $request['cheque_company_bank'];
                $ifsc = NULL;
                $head_id = getSamraddhBankAccount($request['company_bank_account_number'])->account_head_id;
                $bankId = getSamraddhBankAccount($request['company_bank_account_number'])->id;
                $company_bankId = getSamraddhBankAccount($request['company_bank_account_number'])->bank_id;
            }
            elseif ($request['bank_transfer_mode'] == 1)
            {
                $payment_type = 2;
                $amount_from_id = $request['associate_member_id'];
                $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                $cheque_no = NULL;
                $cheque_type = NULL;
                $cheque_date = NULL;
                $cheque_bank_from = NULL;
                $cheque_bank_ac_from = NULL;
                $cheque_bank_ifsc_from = NULL;
                $cheque_bank_branch_from = NULL;
                $cheque_bank_to = NULL;
                $cheque_bank_ac_to = NULL;
                $transction_no = $request['utr_transaction_number'];
                $v_no = NULL;
                $v_date = NULL;
                $ssb_account_id_from = NULL;
                $transction_bank_from = $request['customer_bank_name'];
                $transction_bank_ac_from = $request['customer_bank_account_number'];
                $transction_bank_ifsc_from = $request['customer_ifsc_code'];
                $transction_bank_branch_from = $request['customer_branch_name'];
                $transction_bank_to = $request['company_bank'];
                $transction_bank_ac_to = $request['bank_account_number'];
                $company_name = getSamraddhBank($request['company_bank'])->bank_name;
                $ifsc = getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code;
                $bankId = getSamraddhBankAccount($request['bank_account_number'])->id;
                $head_id = getSamraddhBankAccount($request['bank_account_number'])->account_head_id;
                $company_bankId = getSamraddhBank($request['company_bank'])->id;
            }
            $roidayBookRef = CommanController::createBranchDayBookReference($roi + $principal_amount);
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, 31, 5, 524, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
            /*$roiallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,31,$head4=NULL,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $roi, $roi, $roi, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
            /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$roi,$roi,$roi,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $loan_head_id, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
            /*$principalallTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,25,$loan_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $allHeadTransaction = $this->createAllHeadTransaction($roidayBookRef, $request['branch'], NULL, NULL, $head_id, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $principal_amount, $principal_amount, $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, $ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, NULL, 1, Auth::user()->id);
            /*$allTransaction = CommanController::createAllTransaction($roidayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$principal_amount,$principal_amount,$principal_amount,''.$mLoan->account_number.' EMI collection','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
            $roibranchDayBook = CommanController::branchDayBookNew($roidayBookRef, $branchId, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'Online A/C Dr ' . ($roi + $principal_amount) . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . ($roi + $principal_amount) . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            /*$roibranchDayBook = CommanController::createBranchDayBook($roidayBookRef,$request['branch'],5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','Online A/C Dr '.($roi+$principal_amount).'','To '.$mLoan->account_number.' A/C Cr '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
            $principalmemberTransaction = CommanController::memberTransactionNew($roidayBookRef, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $roi + $principal_amount, '' . $mLoan->account_number . ' EMI collection', 'DR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($roidayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 55, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $roi + $principal_amount, $roi + $principal_amount, $roi + $principal_amount, 'Loan Panelty Charge', 'Online A/C Cr. ' . ($roi + $principal_amount) . '', 'Online A/C Cr. ' . ($roi + $principal_amount) . '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
            /*$principalmemberTransaction = CommanController::createMemberTransaction($roidayBookRef,5,55,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$roi+$principal_amount,''.$mLoan->account_number.' EMI collection','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
                $samraddhBankDaybook = CommanController::createSamraddhBankDaybook($roidayBookRef,$bank_id=NULL,$account_id=NULL,5,55,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$roi+$principal_amount,$roi+$principal_amount,$roi+$principal_amount,'Loan Panelty Charge','Online A/C Cr. '.($roi+$principal_amount).'','Online A/C Cr. '.($roi+$principal_amount).'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,getSamraddhBank($request['company_bank'])->bank_name,$transction_bank_ac_to,NULL,getSamraddhBankAccount($request['bank_account_number'])->ifsc_code,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
            $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($roi + $principal_amount, $company_bankId, $bankId, date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))) , 0, 0);
            $dataRC['status'] = 3;
            $receivedcheque = \App\Models\ReceivedCheque::find($request['customer_cheque']);
            $receivedcheque->update($dataRC);
        }
        /*************** Head Implement ************/
        /*---------- commission script  start  ---------*/
        $daybookId = $createDayBook;
        $total_amount = $request['deposite_amount'];
        $percentage = 2;
        $month = NULL;
        $type_id = $request['loan_id'];
        $type = 7;
        $associate_id = $request['associate_member_id'];
        $branch_id = $request['branch'];
        $commission_type = 0;
        $associateDetail = Member::where('id', $associate_id)->first();
        $carder = $associateDetail->current_carder_id;
        $associate_exist = 0;
        $percentInDecimal = $percentage / 100;
        $commission_amount = round($percentInDecimal * $total_amount, 4);
        $loan_associate_code = $request->loan_associate_code;
        $associateCommission['member_id'] = $associate_id;
        $associateCommission['branch_id'] = $branch_id;
        $associateCommission['type'] = $type;
        $associateCommission['type_id'] = $type_id;
        $associateCommission['day_book_id'] = $daybookId;
        $associateCommission['total_amount'] = $total_amount;
        $associateCommission['month'] = $month;
        $associateCommission['commission_amount'] = $commission_amount;
        $associateCommission['percentage'] = $percentage;
        $associateCommission['commission_type'] = $commission_type;
        $date = \App\Models\Daybook::where('id', $daybookId)->first();
        $associateCommission['created_at'] = $date->created_at;
        $associateCommission['pay_type'] = 4;
        $associateCommission['carder_id'] = $carder;
        $associateCommission['associate_exist'] = $associate_exist;
        if($loan_associate_code != 9999999)
        {
        $associateCommissionInsert = \App\Models\CommissionEntryLoan::create($associateCommission);
        }
        // Collection start
        /*$collection_percentage=5;
            $collection_type=8;
            $Collection_associate_id=$mLoan->associate_member_id;
            $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
            $Collection_carder=$collection_associateDetail->current_carder_id;
            $collection_percentInDecimal = $collection_percentage / 100;
            $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
            $coll_associateCommission['member_id'] = $Collection_associate_id;
            $coll_associateCommission['branch_id'] = $branch_id;
            $coll_associateCommission['type'] = $collection_type;
            $coll_associateCommission['type_id'] = $type_id;
            $coll_associateCommission['day_book_id'] = $daybookId;
            $coll_associateCommission['total_amount'] = $total_amount;
            $coll_associateCommission['month'] = $month;
            $coll_associateCommission['commission_amount'] = $collection_commission_amount;
            $coll_associateCommission['percentage'] = $collection_percentage;
            $coll_associateCommission['commission_type'] = $commission_type;
            $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
            $coll_associateCommission['created_at'] = $coll_date->created_at;
            $coll_associateCommission['pay_type'] = 4;
            $coll_associateCommission['carder_id'] = $Collection_carder;
            $coll_associateCommission['associate_exist'] = $associate_exist;
            $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);  */
        /*---------- commission script  end  ---------*/
        $outstandingAmount = '0';
        $createLoanDayBook = CommanController::createLoanDayBook($roidayBookRef, $daybookId, 3, 0, $mLoan->id, $mLoan->id, $mLoan->account_number, $mLoan->applicant_id, $roi, $principal_amount, $outstandingAmount, $request['deposite_amount'], 'Loan EMI deposite', $request['branch'], getBranchCode($request['branch'])->branch_code, 'CR', 'INR', $paymentMode, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, 1, 1, $cheque_date, $account_number, NULL, $request['loan_associate_name'], $request['associate_member_id'], $request['branch'],$totalDailyInterest,$totalDayInterest,$penalty);
        if ($request['penalty_amount'] != '' && $request['penalty_amount'] > 0)
        {
            $amountArray = array(
                '1' => $request['penalty_amount']
            );
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $cheque_dd_no = NULL;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentMode = 4;
                $ssbpaymentMode = 3;
                $paymentDate = date("Y-m-d", strtotime(convertDate($request['application_date'])));
                $ssb['saving_account_id'] = $ssbAccountDetails->id;
                $ssb['account_no'] = $ssbAccountDetails->account_no;
                $ssb['opening_balance'] = $request['ssb_account'] - $request['penalty_amount'];
                $ssb['deposit'] = 0;
                $ssb['withdrawal'] = $request['penalty_amount'];
                $ssb['description'] = 'Loan EMI Penalty';
                $ssb['currency_code'] = 'INR';
                $ssb['payment_type'] = 'DR';
                $ssb['payment_mode'] = $ssbpaymentMode;
                $ssb['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                $ssbAccountTran = SavingAccountTranscation::create($ssb);
                if($gstAmount > 0)
                {
                    $ssbgst['saving_account_id'] = $ssbAccountDetails->id;
                    $ssbgst['account_no'] = $ssbAccountDetails->account_no;
                    $ssbgst['opening_balance'] = $request['ssb_account'] - $request['penalty_amount'];
                    $ssbgst['deposit'] = 0;
                    $ssbgst['withdrawal'] = $gstAmount;
                    $ssbgst['description'] = 'Loan EMI Penalty Gst Charge'.$mLoan->account_number;
                    $ssbgst['currency_code'] = 'INR';
                    $ssbgst['payment_type'] = 'DR';
                    $ssbgst['payment_mode'] = $ssbpaymentMode;
                    $ssbgst['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                    $ssbAccountTranGst = SavingAccountTranscation::create($ssbgst);
                }
                $ssb_transaction_id = $ssbAccountTran->id;
                // update saving account current balance
                $ssbBalance = SavingAccount::find($ssbAccountDetails->id);
                $ssbBalance->balance = $request['ssb_account'] - $request['penalty_amount'];
                $ssbBalance->save();
                $data['saving_account_transaction_id'] = $ssb_transaction_id;
                $data['loan_id'] = $request['loan_id'];
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                $satRef = TransactionReferences::create($data);
                $satRefId = $satRef->id;
                $ssbCreateTran = CommanController::createTransaction($satRefId, 1, $ssbAccountDetails->id, $ssbAccountDetails->member_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by, $ssbAccountDetails->id, 'DR');
                $totalbalance = $request['ssb_account'] - $request['penalty_amount'];
                $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 1, $ssbAccountDetails->member_investments_id, 0, $ssbAccountDetails->member_id, $totalbalance, 0, $request['penalty_amount'], 'Withdrawal from SSB', $request['account_number'], $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $ssbAccountDetails->account_no, $cheque_dd_no, NULL, NULL, $paymentDate, $online_payment_by, $online_payment_by, $ssbAccountDetails->id, 'DR');
            }
            elseif ($request['loan_emi_payment_mode'] == 1)
            {
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $paymentMode = 1;
                    $cheque_dd_no = $request['customer_cheque'];
                    $ssbpaymentMode = 5;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $paymentMode = 3;
                    $cheque_dd_no = NULL;
                    $ssbpaymentMode = 5;
                    $online_payment_id = $request['utr_transaction_number'];
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
                $ssb_transaction_id = '';
            }
            elseif ($request['loan_emi_payment_mode'] == 2)
            {
                $cheque_dd_no = NULL;
                $paymentMode = 0;
                $ssbpaymentMode = 0;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                $ssb_transaction_id = '';
            }
            $ssbCreateTran = CommanController::createTransaction($satRefId, 11, $request['loan_id'], $mLoan->applicant_id, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, $online_payment_by,NULL, 'CR');
            $createDayBook = CommanController::createDayBook($ssbCreateTran, $satRefId, 11, $request['loan_id'], 0, $mLoan->applicant_id, $dueAmount, $request['penalty_amount'], 0, 'Loan EMI penalty', $mLoan->account_number, $request['branch'], getBranchCode($request['branch'])->branch_code, $amountArray, $paymentMode, $request['loan_associate_name'], $request['associate_member_id'], $mLoan->account_number, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_by, $online_payment_by,NULL, 'CR');
            if ($request['loan_emi_payment_mode'] == 3)
            {
                $checkData['type'] = 5;
                $checkData['branch_id'] = $request['branch'];
                // $checkData['loan_id']=$request['loan_id'];
                $checkData['day_book_id'] = $createDayBook;
                $checkData['cheque_id'] = $cheque_dd_no;
                $checkData['status'] = 1;
                $checkData['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));
                $ssbAccountTran = ReceivedChequePayment::create($checkData);
                $dataRC['status'] = 3;
                $receivedcheque = ReceivedCheque::find($cheque_dd_no);
                $receivedcheque->update($dataRC);
            }
            /************** Head Implement *************/
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                $v_no = "";
                for ($i = 0;$i < 10;$i++)
                {
                    $v_no .= $chars[mt_rand(0, strlen($chars) - 1) ];
                }
                $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 56, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'SSB A/C Cr ' . $request['penalty_amount'] . '', 'SSB A/C Cr ' . $request['penalty_amount'] . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$roibranchDayBook = $this->createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','SSB A/C Cr '.$request['penalty_amount'].'','SSB A/C Cr '.$request['penalty_amount'].'','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 56, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 56, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = $this->createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,1,8,20,56,$head5=NULL,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id);*/
                $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 56, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$roimemberTransaction = $this->createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$ssb_transaction_id,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',3,'INR',$request['branch'],getBranchName($request['branch'])->name,$amount_from_id=NULL,$amount_from_name=NULL,$v_no,date("Y-m-d", strtotime(convertDate($request['application_date']))),$request['ssb_id'],$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL,$ssb_account_id_to=NULL,$ssb_account_tran_id_to=NULL,$ssb_transaction_id); */
                  //Gst Penalty Transacvtion Cash
                  if($gstAmount)
                  {
                      if($IntraState)
                      {
                          $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 542, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                          $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 543, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 542, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty  CGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 543, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty  SGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 542, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 543, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 542, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                          $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 543, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                      }
                      else{
                          $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 544, $loanId, $ssb_transaction_id, $request['associate_member_id'], $member_id = NULL, $branch_id_to = NULL, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Group Panelty IGST Charge', 'SSB A/C Cr ' . $gstAmount . '', 'SSB A/C Cr ' . $gstAmount . '', 'CR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 544, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty  IGST Charge', 'CR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                          $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 544, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty IGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);

                        //   $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 56, 5, 544, $loanId, $ssb_transaction_id, $request['associate_member_id'], NULL, $mLoan->branch_id, $ssbAccountDetails->branch_id, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', 3, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], NULL, NULL, $ssb_transaction_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);

                          $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 544, $loanId, $ssb_transaction_id, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty IGST Charge', 'DR', 3, 'INR', $branchId, getBranchDetail($branchId)->name, $amount_from_id = NULL, $amount_from_name = NULL, $v_no, date("Y-m-d", strtotime(convertDate($request['application_date']))) , $request['ssb_id'], $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], date("H:i:s") , 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_id_from, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                      }
                      $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$mLoan->branch_id);
                  }
            }
            elseif ($request['loan_emi_payment_mode'] == 2)
            {
                $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Dr ' . $request['penalty_amount'] . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $request['penalty_amount'] . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,28,71,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                /*$roimemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',0,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                if($gstAmount > 0)
                {
                    if($IntraState)
                    {
                        $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, ' Group Loan Panelty SGST Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    }
                    else{
                        $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty IGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                        $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty IGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty Charge', 'DR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                        $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty IGST Charge', 'DR', 0, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                    }
                    $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$request['branch']);
                }
                $createPenaltyBranchCash = $this->updateBranchCashFromBackDate($request['penalty_amount'] + $gstAmount , $request['branch'], date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date']))));
            }
            elseif ($request['loan_emi_payment_mode'] == 1)
            {
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $payment_type = 1;
                    $amount_from_id = $request['associate_member_id'];
                    $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                    $cheque_no = $request['customer_cheque'];
                    $cheque_date = NULL;
                    $cheque_type = 1;
                    $cheque_bank_from = $request['customer_bank_name'];
                    $cheque_bank_ac_from = $request['customer_bank_account_number'];
                    $cheque_bank_ifsc_from = $request['customer_ifsc_code'];
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = $request['company_bank'];
                    $cheque_bank_ac_to = $request['bank_account_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_no = NULL;
                    $transction_bank_from = NULL;
                    $transction_bank_ac_from = NULL;
                    $transction_bank_ifsc_from = NULL;
                    $transction_bank_branch_from = NULL;
                    $transction_bank_to = NULL;
                    $transction_bank_ac_to = NULL;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $payment_type = 2;
                    $amount_from_id = $request['associate_member_id'];
                    $amount_from_name = getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name;
                    $cheque_no = NULL;
                    $cheque_type = NULL;
                    $cheque_date = NULL;
                    $cheque_bank_from = NULL;
                    $cheque_bank_ac_from = NULL;
                    $cheque_bank_ifsc_from = NULL;
                    $cheque_bank_branch_from = NULL;
                    $cheque_bank_to = NULL;
                    $cheque_bank_ac_to = NULL;
                    $transction_no = $request['utr_transaction_number'];
                    $v_no = NULL;
                    $v_date = NULL;
                    $ssb_account_id_from = NULL;
                    $transction_bank_from = $request['customer_bank_name'];
                    $transction_bank_ac_from = $request['customer_bank_account_number'];
                    $transction_bank_ifsc_from = $request['customer_ifsc_code'];
                    $transction_bank_branch_from = $request['customer_branch_name'];
                    $transction_bank_to = $request['company_bank'];
                    $transction_bank_ac_to = $request['bank_account_number'];
                }
                $penaltyDayBookRef = CommanController::createBranchDayBookReference($request['penalty_amount']);
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 33, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'CR', $payment_type, 'INR', $request['company_bank'], getSamraddhBank($request['company_bank'])->bank_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, getSamraddhBank($request['company_bank'])->bank_name, $transction_bank_ac_to, NULL, getSamraddhBankAccount($request['bank_account_number'])->ifsc_code, NULL, 1, Auth::user()
                    ->id);
                /*$roiallTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,3,12,33,$head4=NULL,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge'.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL); */
                $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, getSamraddhBankAccount($request['bank_account_number'])->account_head_id, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], NULL, NULL, NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'DR', $payment_type, 'INR', $request['company_bank'], getSamraddhBank($request['company_bank'])->bank_name, $amount_from_id, $amount_from_name, $jv_unique_id = NULL, $v_no, $v_date, $ssb_account_id_from, NULL, NULL, NULL, $cheque_type, NULL, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, NULL, NULL, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_from, $request['branch'], $transction_bank_ac_to, getSamraddhBankAccount($transction_bank_ac_to)->ifsc_code, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, NULL, NULL, $transction_bank_to, $transction_bank_ac_to, getSamraddhBank($request['company_bank'])->bank_name, $transction_bank_ac_to, NULL, getSamraddhBankAccount($request['bank_account_number'])->ifsc_code, NULL, 1, Auth::user()
                    ->id);
                /*$allTransaction = CommanController::createAllTransaction($penaltyDayBookRef,$request['branch'],$bank_id=NULL,$bank_ac_id=NULL,2,10,27,getSamraddhBankAccount($request['bank_account_number'])->account_head_id,$head5=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$branch_id_to=NULL,$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Dr ' . $request['penalty_amount'] . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $request['penalty_amount'] . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $principalmemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $request['penalty_amount'], 'Loan Panelty Charge', 'DR', $payment_type, 'INR', $request['company_bank'], getSamraddhBank($request['company_bank'])->bank_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = getSamraddhBank($request['company_bank'])->id, $account_id = getSamraddhBank($request['company_bank'])->id, 5, 56, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $request['penalty_amount'], $request['penalty_amount'], $request['penalty_amount'], 'Loan Panelty Charge', 'Cash A/C Cr. ' . $request['penalty_amount'] . '', 'Cash A/C Cr. ' . $request['penalty_amount'] . '', 'CR', $payment_type, 'INR', $request['company_bank'], getSamraddhBank($request['company_bank'])->bank_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                /*$roibranchDayBook = CommanController::createBranchDayBook($penaltyDayBookRef,$request['branch'],5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$branch_id_from=NULL,$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Dr '.$request['penalty_amount'].'','To '.$mLoan->account_number.' A/C Cr '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['branch'],getBranchName($request['branch'])->name,$request['associate_member_id'],getMemberData($request['associate_member_id'])->first_name.' '.getMemberData($request['associate_member_id'])->last_name,$v_no=NULL,$v_date=NULL,$ssb_account_id_from=NULL,$cheque_no=NULL,$cheque_date=NULL,$cheque_bank_from=NULL,$cheque_bank_ac_from=NULL,$cheque_bank_ifsc_from=NULL,$cheque_bank_branch_from=NULL,$cheque_bank_to=NULL,$cheque_bank_ac_to=NULL,$transction_no=NULL,$transction_bank_from=NULL,$transction_bank_ac_from=NULL,$transction_bank_ifsc_from=NULL,$transction_bank_branch_from=NULL,$transction_bank_to=NULL,$transction_bank_ac_to=NULL,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$is_contra=NULL,$contra_id=NULL,$created_at=NULL);
                    $principalmemberTransaction = CommanController::createMemberTransaction($penaltyDayBookRef,5,56,$loanId,$createDayBook,$request['associate_member_id'],$mLoan->applicant_id,$request['branch'],$bank_id=NULL,$account_id=NULL,$request['penalty_amount'],'Loan Panelty Charge','DR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);
                    $samraddhBankDaybook = CommanController::createSamraddhBankDaybook($penaltyDayBookRef,$bank_id=NULL,$account_id=NULL,5,56,$loanId,$createDayBook,$request['associate_member_id'],$member_id=NULL,$request['branch'],$request['penalty_amount'],$request['penalty_amount'],$request['penalty_amount'],'Loan Panelty Charge','Cash A/C Cr. '.$request['penalty_amount'].'','Cash A/C Cr. '.$request['penalty_amount'].'','CR',$payment_type,'INR',$request['company_bank'],getSamraddhBank($request['company_bank'])->bank_name,$amount_from_id,$amount_from_name,$v_no,$v_date,$ssb_account_id_from,$cheque_no,$cheque_date,$cheque_bank_from,$cheque_bank_ac_from,$cheque_bank_ifsc_from,$cheque_bank_branch_from,$cheque_bank_to,$cheque_bank_ac_to,$transction_no,$transction_bank_from,$transction_bank_ac_from,$transction_bank_ifsc_from,$transction_bank_branch_from,$transction_bank_to,$transction_bank_ac_to,$transction_date=NULL,$entry_date=NULL,$entry_time=NULL,1,Auth::user()->id,$created_at=NULL);*/
                    if($gstAmount > 0)
                    {
                        if($IntraState)
                        {
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'Bank A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'CR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $sgstHead, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'CR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, 28, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', $payment_type, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty CGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty SGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 536, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty CGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount . '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 537, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty SGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount. '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                        }
                        else{
                            $roibranchDayBook = CommanController::branchDayBookNew($penaltyDayBookRef, $branchId, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $branch_id_from = NULL, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty IGST Charge', 'Cash A/C Dr ' . $gstAmount . '', 'To ' . $mLoan->account_number . ' A/C Cr ' . $gstAmount . '', 'CR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $transction_date = NULL, $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $is_contra = NULL, $contra_id = NULL, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $allHeadTransaction = $this->createAllHeadTransaction($penaltyDayBookRef, $request['branch'], NULL, NULL, $cgstHead, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], NULL, $request['branch'], NULL, $gstAmount, $gstAmount, $gstAmount, 'Loan Panelty IGST Charge', 'CR', 0, 'INR', $request['branch'], getBranchDetail($request['branch'])->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $jv_unique_id = NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, Auth::user()->id);
                            $roimemberTransaction = CommanController::memberTransactionNew($penaltyDayBookRef, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], $mLoan->applicant_id, $branchId, $bank_id = NULL, $account_id = NULL, $gstAmount, 'Group Loan Panelty IGST Charge', 'DR', $payment_type, 'INR', $branchId, getBranchDetail($branchId)->name, $request['associate_member_id'], getMemberData($request['associate_member_id'])->first_name . ' ' . getMemberData($request['associate_member_id'])->last_name, $v_no = NULL, $v_date = NULL, $ssb_account_id_from = NULL, $cheque_no = NULL, $cheque_date = NULL, $cheque_bank_from = NULL, $cheque_bank_ac_from = NULL, $cheque_bank_ifsc_from = NULL, $cheque_bank_branch_from = NULL, $cheque_bank_to = NULL, $cheque_bank_ac_to = NULL, $transction_no = NULL, $transction_bank_from = NULL, $transction_bank_ac_from = NULL, $transction_bank_ifsc_from = NULL, $transction_bank_branch_from = NULL, $transction_bank_to = NULL, $transction_bank_ac_to = NULL, $request['application_date'], $request['application_date'], $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL, $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL);
                            $samraddhBankDaybook = CommanController::samraddhBankDaybookNew($penaltyDayBookRef, $bank_id = $company_bankId, $account_id = $company_bankId, 5, 538, $loanId, $createDayBook, $request['associate_member_id'], $member_id = NULL, $branchId, $gstAmount, $gstAmount, $gstAmount, 'Group Loan Panelty IGST Charge', 'Cash A/C Cr. ' . $gstAmount . '', 'Cash A/C Cr. ' . $gstAmount. '', 'CR', $payment_type, 'INR', $company_bankId, $company_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $company_name, $transction_bank_ac_to, NULL, $ifsc, $request['application_date'], $entry_date = NULL, $entry_time = NULL, 1, Auth::user()->id, $request['application_date'], $jv_unique_id = NULL, $cheque_type = NULL, $cheque_id = NULL, $ssb_account_tran_id_to = NULL, $ssb_account_tran_id_from = NULL);
                        }
                        $createdGstTransaction = CommanController::gstTransaction($dayBookId = $penaltyDayBookRef,$getGstSettingno->gst_no,(!isset($mLoan['loanMember']->gst_no)) ? NULL : $mLoan['loanMember']->gst_no,$request['penalty_amount'],$getHeadSetting->gst_percentage,($IntraState == false ? $gstAmount : 0 ) ,($IntraState == true ? $gstAmount : 0),($IntraState == true ? $gstAmount : 0),($IntraState == true) ? $request['penalty_amount'] + $gstAmount + $gstAmount : $request['penalty_amount'] + $gstAmount,33,$request['date'],'LP33',$mLoan['loanMember']->id,$request['branch']);
                    }
                $createPrincipleBankClosing = CommanController::updateBackDateloanBankBalance($request['penalty_amount'] + $gstAmount, $request['company_bank'], getSamraddhBankAccount($request['bank_account_number'])->id, date("Y-m-d H:i:s", strtotime(convertDate($request['application_date']))) , 0, 0);
            }
            /************** Head Implement *************/
            /*---------- penalty commission script  start  ---------*/
            /* $daybookId=$createDayBook;
                $total_amount=$request['penalty_amount'];
                $month=NULL;
                $type_id=$request['loan_id'];
                $branch_id=$request['branch'];
                $associate_exist=0;
                $commission_type=0;
                // Collection start
                $collection_percentage=5;
                $collection_type=8;
                $Collection_associate_id=$mLoan->associate_member_id;
                $collection_associateDetail=Member::where('id',$Collection_associate_id)->first();
                $Collection_carder=$collection_associateDetail->current_carder_id;
                $collection_percentInDecimal = $collection_percentage / 100;
                $collection_commission_amount = round($collection_percentInDecimal * $total_amount,4);
                $coll_associateCommission['member_id'] = $Collection_associate_id;
                $coll_associateCommission['branch_id'] = $branch_id;
                $coll_associateCommission['type'] = $collection_type;
                $coll_associateCommission['type_id'] = $type_id;
                $coll_associateCommission['day_book_id'] = $daybookId;
                $coll_associateCommission['total_amount'] = $total_amount;
                $coll_associateCommission['month'] = $month;
                $coll_associateCommission['commission_amount'] = $collection_commission_amount;
                $coll_associateCommission['percentage'] = $collection_percentage;
                $coll_associateCommission['commission_type'] = $commission_type;
                $coll_date =\App\Models\Daybook::where('id',$daybookId)->first();
                $coll_associateCommission['created_at'] = $coll_date->created_at;
                $coll_associateCommission['pay_type'] = 4;
                $coll_associateCommission['carder_id'] = $Collection_carder;
                $coll_associateCommission['associate_exist'] = $associate_exist;
                $coll_associateCommissionInsert = \App\Models\CommissionEntryLoan::create($coll_associateCommission);*/
            /*---------- commission script  end  ---------*/
            if ($request['loan_emi_payment_mode'] == 0)
            {
                $paymentMode = 4;
                $cheque_dd_no = NULL;
                $ssbpaymentMode = 5;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
            }
            elseif ($request['loan_emi_payment_mode'] == 1)
            {
                if ($request['bank_transfer_mode'] == 0 && $request['bank_transfer_mode'] != '')
                {
                    $paymentMode = 1;
                    $cheque_dd_no = $request['customer_cheque'];
                    $ssbpaymentMode = 5;
                    $online_payment_id = NULL;
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
                elseif ($request['bank_transfer_mode'] == 1)
                {
                    $paymentMode = 2;
                    $cheque_dd_no = NULL;
                    $ssbpaymentMode = 5;
                    $online_payment_id = $request['utr_transaction_number'];
                    $online_payment_by = NULL;
                    $satRefId = NULL;
                    $bank_name = NULL;
                    $cheque_date = NULL;
                    $account_number = NULL;
                    $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
                }
            }
            elseif ($request['loan_emi_payment_mode'] == 2)
            {
                $cheque_dd_no = NULL;
                $paymentMode = 0;
                $ssbpaymentMode = 0;
                $online_payment_id = NULL;
                $online_payment_by = NULL;
                $satRefId = NULL;
                $bank_name = NULL;
                $cheque_date = NULL;
                $account_number = NULL;
                $paymentDate = date("Y-m-d " . $entryTime . "", strtotime(convertDate($request['application_date'])));;
            }
            $createLoanDayBook = CommanController::createLoanDayBook($penaltyDayBookRef, $createDayBook, $mLoan->loan_type, 1, $mLoan->id, $mLoan->id, $mLoan->account_number, $mLoan->applicant_id, $request['penalty_amount'], $request['penalty_amount'], $outstandingAmount = NULL, $request['penalty_amount'], 'Loan EMI penalty', $request['branch'], getBranchCode($request['branch'])->branch_code, 'CR', 'INR', $paymentMode, $cheque_dd_no, $bank_name, $branch_name = NULL, $paymentDate, $online_payment_id, 1, 1, $cheque_date, $account_number, NULL, $request['loan_associate_name'], $request['associate_member_id'], $request['branch'],$totalDailyInterest,$totalDayInterest,$penalty);
            $record = LoanDaybooks::find($createLoanDayBook);
            if($gstAmount)
            {
                if($IntraState)
                {
                    $updateData =$record->update(['cgst_charge'=>$gstAmount,'sgst_charge'=>$gstAmount]);
                }
                else{
                    $updateData =$record->update(['igst_charge'=>$gstAmount]);
                }
            }
        }
         $totalDepsoit = LoanDaybooks::where('account_number',$mLoan->account_number)->where('loan_sub_type',0)->where('is_deleted',0)->sum('deposit');
        $text = 'Dear Member,Received Rs.'.  $request['deposite_amount']. ' as EMI of Loan A/C '. $mLoan->account_number.' on '. date('d/m/Y',strtotime(convertDate($request['application_date']))).' Total recovery Rs. '.$totalDepsoit.' Thank You. Samraddh Bestwin Microfinance';;
        $temaplteId = 1207166308935249821;
        $contactNumber = array();
        $memberDetail = Member::find($mLoan->member_id);
        $contactNumber[] = $memberDetail->mobile_no;
        $sendToMember = new Sms();
        $sendToMember->sendSms( $contactNumber, $text, $temaplteId);
        DB::commit();
        } catch (\Exception $ex) {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return back()->with('success', 'Loan EMI Successfully submitted!');
    }
    /**
     * Deposite Group loan EMI.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return JSON
     */
    
    /**
     * Loan EMI transactions.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return JSON
     */
    public function emiTransactionsView($id, $type)
    {
        if ($type != 3)
        {
            $data['title'] = 'Loan EMI Transactions';
            $data['loanDetails'] = Memberloans::select('loan_type', 'account_number')->where('id', $id)->first();
            if ($data['loanDetails']->loan_type == 1)
            {
                $data['loanTitle'] = 'Personal Loan';
            }
            elseif ($data['loanDetails']->loan_type == 2)
            {
                $data['loanTitle'] = 'Staff Loan';
            }
            elseif ($data['loanDetails']->loan_type == 3)
            {
                $data['loanTitle'] = 'Group Loan';
            }
            elseif ($data['loanDetails']->loan_type == 4)
            {
                $data['loanTitle'] = 'Loan Against Investment Plan';
            }
        }
        else
        {
            $data['title'] = 'Group Loan EMI Transactions';
            $data['loanDetails'] = Grouploans::select('account_number')->where('id', $id)->first();
            $data['loanTitle'] = 'Group Loan';
        }
        $data['id'] = $id;
        $data['type'] = $type;
        return view('templates.admin.loan.loan_emi_transaction', $data);
    }
    /**
     *EMI transaction ajax listing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    
    public function emiTransactionsList(Request $request)
    {
        
        if ($request->ajax())
        {
            if ($request['loanType'] != 3)
            {
                /*$data = LoanDayBooks::where('loan_type', $request['loanType'])->where('is_deleted', 0)
                    ->where('loan_id', $request['loanId']);*/
                $data = \App\Models\LoanEmisNew::with(['loanEmiDetails','loanDetails'])->where('loan_type','!=',3)->where('loan_id', $request['loanId'])->where('is_deleted','0');
               
            }
            else
            {
                $data = \App\Models\LoanEmisNew::with(['loanEmiDetails'])->where('loan_id', $request['loanId'])->where('loan_type',3)->where('is_deleted','0');
            }
            // $data1 = $data->where('is_deleted', '0')
            //     ->get();
            $data1 = $data->count();
            $count = $data1;
            $data = $data->offset($_POST['start'])->limit($_POST['length'])/*->orderby('emi_date', 'asc')*/
                ->get();
            $dataCount = $count;
            $totalCount = $dataCount;
            $sno = $_POST['start'];
            if($_POST['pages'] == 1)
			{
				$total  = 0;
			}
			else{
				$total  = $_POST['total'];
			}
            if($_POST['pages'] == "1"){
				$length = ($_POST['pages']) * $_POST['length'];
			} else {
				$length = ($_POST['pages']-1) * $_POST['length'];
			}
            $rowReturn = array();
            foreach ($data as $row)
            {
                $sno++;
                if (isset($row['loanEmiDetails']->loan_sub_type))
                {
                    if ($row['loanEmiDetails']->loan_sub_type == 0)
                    {
                        $val['deposite'] = $row->deposit;
                    }
                    else
                    {
                        $val['deposite'] =0;
                    }
            }
            else{
                $val['deposite'] = $row->deposit;
            }
                $val['DT_RowIndex'] = $sno;
                // if(isset($row->emi_id))
                // {
                //     if(strlen($row->id) < 8)
                //     {
                //             $val['transaction_id'] =  str_pad($row->id, 8, '0', STR_PAD_LEFT);
                //     }
                //     else{
                //         $val['transaction_id'] = $row->id;
                //     }
                // }
                // else{
                //     $val['transaction_id'] ='N/A';
                // }
                if(isset($row->emi_received_date))
                {
                    $val['date'] = date("d/m/Y", strtotime($row->emi_received_date));
                }
                else if(isset($row->emi_date)){
                    $val['date'] = date("d/m/Y", strtotime($row->emi_date));
                }
                else{
                    $val['date'] = date("d/m/Y", strtotime($row->created_at));
                }
                $paymentMode = 'N/A';
                if(isset($row['loanEmiDetails']->payment_mode))
                {
                    if ($row['loanEmiDetails']->payment_mode == 0)
                    {
                        $paymentMode = 'Cash';
                    }
                    elseif ($row['loanEmiDetails']->payment_mode == 1)
                    {
                        $paymentMode = 'Cheque';
                    }
                    elseif ($row['loanEmiDetails']->payment_mode == 2)
                    {
                        $paymentMode = 'DD';
                    }
                    elseif ($row['loanEmiDetails']->payment_mode == 3)
                    {
                        $paymentMode = 'Online Transaction';
                    }
                    elseif ($row['loanEmiDetails']->payment_mode == 4)
                    {
                        $paymentMode = 'By Saving Account ';
                    }
                    elseif ($row['loanEmiDetails']->payment_mode == 6)
                    {
                        $paymentMode = 'JV ';
                    }
                }
                else{
                    if ($row->payment_mode == 0)
                    {
                        $paymentMode = 'Cash';
                    }
                    elseif ($row->payment_mode == 1)
                    {
                        $paymentMode = 'Cheque';
                    }
                    elseif ($row->payment_mode == 2)
                    {
                        $paymentMode = 'DD';
                    }
                    elseif ($row->payment_mode == 3)
                    {
                        $paymentMode = 'Online Transaction';
                    }
                    elseif ($row->payment_mode == 4)
                    {
                        $paymentMode = 'By Saving Account ';
                    }
                    elseif ($row->payment_mode == 6)
                    {
                        $paymentMode = 'JV ';
                    }
                }
                $val['payment_mode'] = $paymentMode;
                if (isset($row['loanEmiDetails']->jv_journal_amount))
                {
                    $val['jv_amount'] = number_format((float)$row->jv_journal_amount, 2, '.', '');
                }
                else
                {
                    $val['jv_amount'] = 0;
                }
                if(isset($row['loanEmiDetails']->description))
                {
                    $val['description'] = $row['loanEmiDetails']->description;
                }
                else{
                    $val['description'] = "Loan EMI Deposite";
                }
                if(isset($row->penalty))
                {
                        $deposite = $row->penalty;
                        $val['penalty'] = $deposite;
                }
                else
                    {
                        $val['penalty'] = 0;
                    }
                if(isset($row['loanEmiDetails']->loan_sub_type))
                {
                    if ($row['loanEmiDetails']->loan_sub_type == 0)
                    {
                        $roi_amount = $row->roi_amount;
                        $val['roi_amount'] = $roi_amount  +  $row->daily_wise_interest;
                    }
                    else
                    {
                        $val['roi_amount'] = '0';
                    }
                }
                else{
                    $val['roi_amount'] =  $row->roi_amount;
                }
                if(isset($row['loanEmiDetails']->loan_sub_type))
                {
                    if ($row['loanEmiDetails']->loan_sub_type == 0)
                    {
                        $principal_amount = $row->principal_amount;
                        $val['principal_amount'] = $principal_amount;
                    }
                    else
                    {
                        $val['principal_amount'] = $row->principal_amount;
                    }
                }
                else{
                    $val['principal_amount'] =  $row->principal_amount;
                }
                if($request['loanType'] != 3)
                {
                    $val['opening_balance'] =  $row->opening_balance;
                }
                if(isset($row['loanEmiDetails']->loan_sub_type))
                {
                    // if ($row['loanEmiDetails']->loan_sub_type == 0)
                    // {
                        $opening_balance = $row->out_standing_amount;
                        $val['opening_balance'] = $opening_balance;
                    // }
                    // else
                    // {
                    //     $val['opening_balance'] = '0';
                    // }
                }
                else{
                    $val['opening_balance'] =  $row->out_standing_amount;
                }
                $penalty = 0;
                if(isset($row->penalty))
                {
                    $penalty = $row->penalty;
                }
                if (isset($row['loanEmiDetails']->jv_journal_amount))
                {
                    $total = $total + $row['loanEmiDetails']->jv_journal_amount;
                }
                else if(isset($row->deposit))
                {
                    $total = $total + $row->deposit + $penalty;
                }
                else{
                    $total = $total +0;
                }
                $val['balance'] = number_format((float)$total, 2, '.', '') . ' <i class="fas fa-rupee-sign"></i>';
                $rowReturn[] = $val;
            }
            /*return Datatables::of($data)
            ->addIndexColumn()
            ->addColumn('transaction_id', function($row){
                $transaction_id = $row->id;
                return $transaction_id;
            })
            ->rawColumns(['transaction_id'])
            ->addColumn('date', function($row){
                $date = date("d/m/Y", strtotime($row->payment_date));
                return $date;
            })
            ->rawColumns(['date'])
            ->addColumn('payment_mode', function($row){
                if($row->payment_mode == 0){
                    $paymentMode = 'Cash';
                }elseif($row->payment_mode == 1){
                    $paymentMode = 'Cheque';
                }elseif($row->payment_mode == 2){
                    $paymentMode = 'DD';
                }elseif($row->payment_mode == 3){
                    $paymentMode = 'Online Transaction';
                }elseif($row->payment_mode == 4){
                    $paymentMode = 'By Saving Account ';
                }
                return $paymentMode;
            })
            ->rawColumns(['payment_mode'])
            ->addColumn('description', function($row){
                $description =  $row->description;
                return $description;
            })
            ->rawColumns(['description'])
            ->addColumn('penalty', function($row){
                if($row->loan_sub_type == 1){
                    $deposite =  $row->deposit.' <i class="fas fa-rupee-sign"></i>';
                    return $deposite;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('deposite', function($row){
                if($row->loan_sub_type == 0){
                    $deposite =  $row->deposit.' <i class="fas fa-rupee-sign"></i>';
                    return $deposite;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('roi_amount', function($row){
                if($row->loan_sub_type == 0){
                    $roi_amount =  $row->roi_amount.' <i class="fas fa-rupee-sign"></i>';
                    return $roi_amount;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('principal_amount', function($row){
                if($row->loan_sub_type == 0){
                    $principal_amount =  $row->principal_amount.' <i class="fas fa-rupee-sign"></i>';
                    return $principal_amount;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('opening_balance', function($row){
                if($row->loan_sub_type == 0){
                    $opening_balance =  $row->opening_balance;
                    return $opening_balance;
                }else{
                    return 'N/A';
                }
            })
            ->rawColumns(['opening_balance'])
            ->make(true);*/
        }
        $output = array(
            "draw" => $_POST['draw'],
            "recordsTotal" => $totalCount,
            "recordsFiltered" => $totalCount,
            "data" => $rowReturn,
            'totalAmount' =>$total,
        );
        return json_encode($output);
    }
    /**
     * Display loan details.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function printView($id, $type)
    {
        $data['title'] = "Download Loan PDF";
        $data['id'] = $id;
        $data['loanDetails'] = Memberloans::with('loan', 'loanMember', 'loanMemberBankDetails', 'loanMemberIdProofs', 'LoanApplicants', 'LoanCoApplicants', 'LoanGuarantor', 'Loanotherdocs', 'GroupLoanMembers', 'loanInvestmentPlans')->findOrFail($id);
        $data['formPrintUrl'] = URL::to("admin/loan/form/print/" . $id . "/" . $type . "");
        $data['formTermConditionUrl'] = URL::to("admin/loan/form/termcondition/" . $id . "/" . $type . "");
        return view('templates.admin.loan.print_view', $data); /*$data['title'] = "Download Loan PDF";
        $data['id'] = $id;
        $data['data'] =\App\Models\Memberloans::with('loan','loanMember','loanMemberBankDetails','loanMemberIdProofs','LoanApplicants','LoanCoApplicants','LoanGuarantor','Loanotherdocs','GroupLoanMembers','loanInvestmentPlans')->where('id',$id)->orderby('id','DESC')->first();
        return view('templates.admin.loan.loan_form_pdf', $data);*/
    }
    /**
     * Print loan form details.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function printLoanForm($id, $type)
    {
        $data['loanDetails'] = array(
            ''
        );
        $data['loanDetails'] = Memberloans::with('loan', 'LoanApplicants', 'loanMember', 'loanMemberBankDetails', 'loanMemberIdProofs', 'LoanApplicants', 'LoanCoApplicants', 'LoanGuarantor', 'Loanotherdocs', 'GroupLoanMembers', 'loanInvestmentPlans')->findOrFail($id);
        $data['EMI'] = [];
        if ($type != 3)
        {
            $data['EMI'] = LoanDayBooks::where('loan_type', $type)->where('loan_id', $id)->get()
                ->toArray();
        }
        else
        {
            $data['EMI'] = LoanDayBooks::where('loan_type', $type)->where('group_loan_id', $id)->get()
                ->toArray();
        }
        /*echo '<pre>';
        print_r($data['loanDetails']->toArray());
         exit;*/
        /* $data['loanDetails'] = Memberloans::with('loan','LoanApplicants','LoanCoApplicants','LoanGuarantor','Loanotherdocs','GroupLoanMembers','loanInvestmentPlans')->findOrFail($id);*/
        /*loan_guarantor*/
        /* echo '<pre>';
        print_r($data['loanDetails']->toArray());
         exit;  */
        $data['loanDetails'] = $data['loanDetails']->toArray();
        //$data['loan_guarantor'][0]['educational_qualification_exam_name']='';
        /*if(isset($data['loan_guarantor'][0]['educational_qualification']) && $data['loan_guarantor'][0]['educational_qualification'] >0)
          {
        $loan_guarantor=\App\Models\EmployeeQualification::where([['id', '=', $data['loan_guarantor'][0]['educational_qualification']],['status', '=', '1'],['is_deleted', '=', '0'],])->get(['id','name']);
        }*/
        /*loan_guarantor*/
        /*echo '<pre>';
        print_r($data['loanDetails']->toArray());
        exit; */
        return view('templates.admin.loan.personalAndEmployDetail', $data);
    }
    public function update_pdf_generate_status(Request $request)
    {
        $id = $request->id;
        $status = Memberloans::where('id', $id)->update(['pdf_generate_status' => 1]);
        $return_array = compact('status');
        return json_encode($return_array);
    }
    /**
     * Show loan  commission list.
     * Route: /loan
     * Method: get
     * @return  view
     */
    public function loanCommission($id)
    {
        //die('hi');
        $data['title'] = 'Loan Commission Detail | Listing';
        // $data['plans'] = Plans::where('status',1)->get();
        $data['loan'] = Memberloans::where('id', $id)->first();
        return view('templates.admin.loan.commissionDetailLoan', $data);
    }
    /**
     * Get loan  commission list
     * Route: ajax call from - /admin/loan
     * Method: Post
     * @param  \Illuminate\Http\Request  $request
     * @return JSON array
     */
    public function loanCommissionList(Request $request)
    {
        if ($request->ajax())
        {
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $data = \App\Models\AssociateCommission::where('type_id', $arrFormData['id'])->whereIn('type', array(
                4,
                6
            ))
                ->where('status', 1)->where('is_deleted','0');
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['start_date'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['start_date'])));
                    if ($arrFormData['end_date'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['end_date'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(created_at)') , [$startDate, $endDate]);
                }
                if (isset($arrFormData['plan_id']) && $arrFormData['plan_id'] != '')
                {
                    $meid = $arrFormData['plan_id'];
                    $data = $data->whereHas('investment', function ($query) use ($meid)
                    {
                        $query->where('member_investments.plan_id', $meid);
                    });
                }
            }
            $count = $data->orderby('id', 'DESC')
                ->count();
            // $count=count($data1);
            $data = $data->orderby('id', 'DESC')
                ->offset($_POST['start'])->limit($_POST['length'])->get();
            $totalCount = \App\Models\AssociateCommission::where('type_id', $arrFormData['id'])->whereIn('type', array(
                4,
                6,
                7,
                8
            ))
                ->where('status', 1)
                ->count();
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $val)
            {
                $sno++;
                $row['DT_RowIndex'] = $sno;
                $row['investment_account'] = getSeniorData($val->member_id, 'first_name') . ' ' . getSeniorData($val->member_id, 'last_name');
                $row['plan_name'] = getSeniorData($val->member_id, 'associate_no');
                $row['total_amount'] = $val->total_amount;
                $row['commission_amount'] = $val->commission_amount;
                $row['percentage'] = $val->percentage;
                $carder_name = getCarderName($val->carder_id);
                $row['carder_name'] = $carder_name;
                $commission_for = '';
                if ($val->type == 4)
                {
                    $commission_for = 'Loan Commission';
                }
                if ($val->type == 6)
                {
                    $commission_for = 'Loan Collection';
                }
                if ($val->type == 7)
                {
                    $commission_for = 'Group Loan Commission';
                }
                if ($val->type == 8)
                {
                    $commission_for = 'Group Loan Collection';
                }
                $row['commission_type'] = $commission_for;
                $pay_type = '';
                if ($val->pay_type == 4)
                {
                    $pay_type = 'Loan Emi';
                }
                elseif ($val->pay_type == 5)
                {
                    $pay_type = 'Loan Panelty';
                }
                $row['pay_type'] = $pay_type;
                if ($val->is_distribute == 1)
                {
                    $is_distribute = 'Yes';
                }
                else
                {
                    $is_distribute = 'No';
                }
                $row['is_distribute'] = $is_distribute;
                $created_at = date("d/m/Y", strtotime($val->created_at));
                $row['created_at'] = $created_at;
                $rowReturn[] = $row;
            }
            // echo 'hi';
            //  print_r($rowReturn);die;
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Show loan  commission list.
     * Route: /loan
     * Method: get
     * @return  view
     */
    public function loanGroupCommission($id)
    {
        $data['title'] = 'Loan Commission Detail | Listing';
        // $data['plans'] = Plans::where('status',1)->get();
        $data['loan'] = Grouploans::where('id', $id)->first();
        return view('templates.admin.loan.commissionDetailLoanGroup', $data);
    }
    /**
     * Get loan  commission list
     * Route: ajax call from - /admin/loan
     * Method: Post
     * @param  \Illuminate\Http\Request  $request
     * @return JSON array
     */
    public function loanGroupCommissionList(Request $request)
    {
        if ($request->ajax())
        {
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $data = \App\Models\AssociateCommission::where('type_id', $arrFormData['id'])->whereIn('type', array(
                7,
                8
            ))->where('is_deleted','0')
                ->where('status', 1);
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['start_date'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['start_date'])));
                    if ($arrFormData['end_date'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['end_date'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                    $data = $data->whereBetween(\DB::raw('DATE(created_at)') , [$startDate, $endDate]);
                }
                if (isset($arrFormData['plan_id']) && $arrFormData['plan_id'] != '')
                {
                    $meid = $arrFormData['plan_id'];
                    $data = $data->whereHas('investment', function ($query) use ($meid)
                    {
                        $query->where('member_investments.plan_id', $meid);
                    });
                }
            }
            $count = $data->orderby('id', 'DESC')
                ->count();
            // $count=count($data1);
            $data = $data->orderby('id', 'DESC')
                ->offset($_POST['start'])->limit($_POST['length'])->get();
            $totalCount = \App\Models\AssociateCommission::where('type_id', $arrFormData['id'])->whereIn('type', array(
                7,
                8
            ))
                ->where('status', 1)
                ->count();
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $val)
            {
                $sno++;
                $row['DT_RowIndex'] = $sno;
                $row['investment_account'] = getSeniorData($val->member_id, 'first_name') . ' ' . getSeniorData($val->member_id, 'last_name');
                $row['plan_name'] = getSeniorData($val->member_id, 'associate_no');
                $row['total_amount'] = $val->total_amount;
                $row['commission_amount'] = $val->commission_amount;
                $row['percentage'] = $val->percentage;
                $carder_name = getCarderName($val->carder_id);
                $row['carder_name'] = $carder_name;
                $commission_for = '';
                if ($val->type == 4)
                {
                    $commission_for = 'Loan Commission';
                }
                if ($val->type == 6)
                {
                    $commission_for = 'Loan Collection';
                }
                if ($val->type == 7)
                {
                    $commission_for = 'Group Loan Commission';
                }
                if ($val->type == 8)
                {
                    $commission_for = 'Group Loan Collection';
                }
                $row['commission_type'] = $commission_for;
                $pay_type = '';
                if ($val->pay_type == 4)
                {
                    $pay_type = 'Loan Emi';
                }
                elseif ($val->pay_type == 5)
                {
                    $pay_type = 'Loan Panelty';
                }
                $row['pay_type'] = $pay_type;
                if ($val->is_distribute == 1)
                {
                    $is_distribute = 'Yes';
                }
                else
                {
                    $is_distribute = 'No';
                }
                $row['is_distribute'] = $is_distribute;
                $created_at = date("d/m/Y", strtotime($val->created_at));
                $row['created_at'] = $created_at;
                $rowReturn[] = $row;
            }
            // echo 'hi';
            //  print_r($rowReturn);die;
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    /**
     * Display renew form.
     *
     * @return \Illuminate\Http\Response
     */
    public function getCollectorAssociate(Request $request)
    {
        $code = $request->code;
        $applicationDate = $request->applicationDate;
        $collectorDetails = Member::with('savingAccount')->leftJoin('carders', 'members.current_carder_id', '=', 'carders.id')
            ->where('members.associate_no', $code)
->where('members.status', 1)
            ->where('members.is_deleted', 0)
            ->where('members.is_associate', 1)
            ->where('members.is_block', 0)
            ->where('members.associate_status', 1)
            ->select('carders.name as carders_name', 'members.first_name', 'members.last_name', 'members.id')
            ->first();
        if ($collectorDetails)
        {
            if ($collectorDetails['savingAccount'])
            {
                $ssbTransaction = SavingAccountTranscation::select('id', 'opening_balance')->where('account_no', $collectorDetails['savingAccount'][0]->account_no)
                    ->whereDate('created_at', date("Y-m-d", strtotime(convertDate($applicationDate))))->orderBy('id', 'desc')
                    ->first();
                if ($ssbTransaction)
                {
                    $ssbAmount = $ssbTransaction->opening_balance;
                }
                else
                {
                    $ssbTransaction = SavingAccountTranscation::select('id', 'opening_balance')->where('account_no', $collectorDetails['savingAccount'][0]->account_no)
                        ->whereDate('created_at', '>', date("Y-m-d", strtotime(convertDate($applicationDate))))->first();
                    if ($ssbTransaction)
                    {
                        $ssbAmount = $ssbTransaction->opening_balance;
                    }
                    else
                    {
                        $ssbTransaction = SavingAccountTranscation::select('id', 'opening_balance')->where('account_no', $collectorDetails['savingAccount'][0]->account_no)
                            ->whereDate('created_at', '<', date("Y-m-d", strtotime(convertDate($applicationDate))))->orderBy('id', 'desc')
                            ->first();
                        if ($ssbTransaction)
                        {
                            $ssbAmount = $ssbTransaction->opening_balance;
                        }
                        else
                        {
                            $ssbAmount = 0;
                        }
                    }
                }
            }
            else
            {
                $ssbAmount = 0;
            }
        }
        else
        {
            $ssbAmount = 0;
        }
        if ($collectorDetails)
        {
            return Response::json(['msg_type' => 'success', 'collectorDetails' => $collectorDetails, 'ssbAmount' => $ssbAmount]);
        }
        else
        {
            return Response::json(['view' => 'No data found', 'msg_type' => 'error']);
        }
    }
    public function personalAndEmployDetail(Request $request)
    {
        $data['title'] = "PERSONAL AND EMPLOYMENT DETAILS";
        return view('templates.admin.loan.personalAndEmployDetail', $data);
    }
    public function updateBranchCashFromBackDate($amount, $branch_id, $ftdate)
    {
        $globaldate = $ftdate;
        $entryTime = date("H:i:s");
        $entryDate = date("Y-m-d", strtotime(convertDate($globaldate)));
        $getCurrentBranchRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($getCurrentBranchRecord)
        {
            $bResult = \App\Models\BranchCash::find($getCurrentBranchRecord->id);
            $bData['balance'] = $getCurrentBranchRecord->balance + $amount;
            if ($getCurrentBranchRecord->closing_balance > 0)
            {
                $bData['closing_balance'] = $getCurrentBranchRecord->closing_balance + $amount;
            }
            $bData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
            $bResult->update($bData);
            $getNextBranchRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                ->get();
            if ($getNextBranchRecord)
            {
                foreach ($getNextBranchRecord as $key => $value)
                {
                    $sResult = \App\Models\BranchCash::find($value->id);
                    $sData['opening_balance'] = $value->closing_balance;
                    $sData['balance'] = $value->balance + $amount;
                    if ($value->closing_balance > 0)
                    {
                        $sData['closing_balance'] = $value->closing_balance + $amount;
                    }
                    $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                    $sResult->update($sData);
                }
            }
        }
        else
        {
            $oldDateRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', '<', $entryDate)->orderby('entry_date', 'DESC')
                ->first();
            if ($oldDateRecord)
            {
                $Result1 = \App\Models\BranchCash::find($oldDateRecord->id);
                $data1['closing_balance'] = $oldDateRecord->balance;
                $Result1->update($data1);
                $insertid1 = $oldDateRecord->id;
                $dataRecordExists = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                    ->get();
                $data['balance'] = $oldDateRecord->balance + $amount;
                $data['opening_balance'] = $oldDateRecord->balance;
                if ($dataRecordExists)
                {
                    $data['closing_balance'] = $oldDateRecord->balance + $amount;
                    foreach ($dataRecordExists as $key => $value)
                    {
                        $sResult = \App\Models\BranchCash::find($value->id);
                        $sData['opening_balance'] = $value->closing_balance;
                        $sData['balance'] = $value->balance + $amount;
                        if ($value->closing_balance > 0)
                        {
                            $sData['closing_balance'] = $value->closing_balance + $amount;
                        }
                        $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                        $sResult->update($sData);
                    }
                }
                else
                {
                    $data['closing_balance'] = 0;
                }
                $data['opening_balance'] = $oldDateRecord->balance;
                $data['balance'] = $oldDateRecord->balance;
                $data['closing_balance'] = 0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = 1;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($entryDate)));
                $transcation = \App\Models\BranchCash::create($data);
                $insertid = $transcation->id;
            }
            else
            {
                $data['balance'] = $amount;
                $data['opening_balance'] = 0;
                $data['closing_balance'] = 0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = 1;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($entryDate)));
                $transcation = \App\Models\BranchCash::create($data);
                $insertid = $transcation->id;
            }
        }
        $getCurrentBranchClosingRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($getCurrentBranchClosingRecord)
        {
            $bResult = \App\Models\BranchClosing::find($getCurrentBranchClosingRecord->id);
            $bData['balance'] = $getCurrentBranchClosingRecord->balance + $amount;
            if ($getCurrentBranchClosingRecord->closing_balance > 0)
            {
                $bData['closing_balance'] = $getCurrentBranchClosingRecord->closing_balance + $amount;
            }
            $bData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
            $bResult->update($bData);
            $getNextBranchClosingRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                ->get();
            if ($getNextBranchClosingRecord)
            {
                foreach ($getNextBranchClosingRecord as $key => $value)
                {
                    $sResult = \App\Models\BranchClosing::find($value->id);
                    $sData['opening_balance'] = $value->closing_balance;
                    $sData['balance'] = $value->balance + $amount;
                    if ($value->closing_balance > 0)
                    {
                        $sData['closing_balance'] = $value->closing_balance + $amount;
                    }
                    $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                    $sResult->update($sData);
                }
            }
        }
        else
        {
            $oldDateRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', '<', $entryDate)->orderby('entry_date', 'DESC')
                ->first();
            if ($oldDateRecord)
            {
                $Result1 = \App\Models\BranchClosing::find($oldDateRecord->id);
                $data1['closing_balance'] = $oldDateRecord->balance;
                $Result1->update($data1);
                $insertid1 = $oldDateRecord->id;
                $data1RecordExists = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                    ->get();
                $data['balance'] = $oldDateRecord->balance + $amount;
                $data['opening_balance'] = $oldDateRecord->balance;
                if ($data1RecordExists)
                {
                    $data['closing_balance'] = $oldDateRecord->balance + $amount;
                    foreach ($data1RecordExists as $key => $value)
                    {
                        $sResult = \App\Models\BranchClosing::find($value->id);
                        $sData['opening_balance'] = $value->closing_balance;
                        $sData['balance'] = $value->balance + $amount;
                        if ($value->closing_balance > 0)
                        {
                            $sData['closing_balance'] = $value->closing_balance + $amount;
                        }
                        $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                        $sResult->update($sData);
                    }
                }
                else
                {
                    $data['closing_balance'] = 0;
                }
                $data['opening_balance'] = $oldDateRecord->balance;
                $data['closing_balance'] = 0;
                $data['balance'] = $oldDateRecord->balance;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = 1;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($entryDate)));
                $transcation = \App\Models\BranchClosing::create($data);
                $insertid = $transcation->id;
            }
            else
            {
                $data['balance'] = $amount;
                $data['opening_balance'] = 0;
                $data['closing_balance'] = 0;
                $data['branch_id'] = $branch_id;
                $data['entry_date'] = $entryDate;
                $data['entry_time'] = $entryTime;
                $data['type'] = 1;
                $data['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($entryDate)));
                $transcation = \App\Models\BranchClosing::create($data);
                $insertid = $transcation->id;
            }
        }
    }
    public function updateSsbDayBookAmount($amount, $account_number, $date)
    {
        $globaldate = $date;
        $entryTime = date("H:i:s");
        $entryDate = date("Y-m-d", strtotime(convertDate($date)));
        $getCurrentBranchRecord = SavingAccountTranscation::where('account_no', $account_number)->whereDate('created_at', $entryDate)->first();
        if(isset($getCurrentBranchRecord->id))
        {
            $bResult = SavingAccountTranscation::find($getCurrentBranchRecord->id);
            $bData['opening_balance'] = $getCurrentBranchRecord->opening_balance - $amount;
            $bData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
        }
        $getNextBranchRecord = SavingAccountTranscation::where('account_no', $account_number)->whereDate('created_at', '>', $entryDate)->orderby('created_at', 'ASC')
            ->get();
        if ($getNextBranchRecord)
        {
            foreach ($getNextBranchRecord as $key => $value)
            {
                $sResult = SavingAccountTranscation::find($value->id);
                $sData['opening_balance'] = $value->opening_balance - $amount;
                $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                $sResult->update($sData);
            }
        }
    }
    public function getBankDayBookAmount(Request $request)
    {
        $fromBankId = $request->fromBankId;
        $date = date("Y-m-d", strtotime(convertDate($request->date)));
        $bankRes = SamraddhBankClosing::where('bank_id', $fromBankId)->whereDate('entry_date', $date) /*->orderBy('entry_date', 'desc')*/->first();
        if ($bankRes)
        {
            $bankDayBookAmount = (int)$bankRes->balance;
        }
        else
        {
            $bankRes = SamraddhBankClosing::where('bank_id', $fromBankId)->whereDate('entry_date', '<', $date)->orderby('entry_date', 'DESC')
                ->first();
            $bankDayBookAmount = (int)$bankRes->balance;
        }
        $return_array = compact('bankDayBookAmount');
        return json_encode($return_array);
    }
    // Edit Branch to ho
    public function getBranchDayBookAmount(Request $request)
    {
        $branch_id = $request->branch_id;
        $date = date("Y-m-d", strtotime(convertDate($request->date)));
        $microLoanRes = BranchCash::select('balance', 'loan_balance')->where('branch_id', $branch_id)->whereDate('entry_date', $date) /*->orderBy('entry_date', 'desc')*/->first();
        if ($microLoanRes)
        {
            $loanDayBookAmount = (int)$microLoanRes->loan_balance;
            $microDayBookAmount = (int)$microLoanRes->balance;
        }
        else
        {
            $microLoan = BranchCash::select('balance', 'loan_balance')->where('branch_id', $branch_id)->whereDate('entry_date', '<', $date)->orderby('entry_date', 'DESC')
                ->first();
            $loanDayBookAmount = (int)$microLoan->loan_balance;
            $microDayBookAmount = (int)$microLoan->balance;
        }
        $return_array = compact('microDayBookAmount', 'loanDayBookAmount');
        return json_encode($return_array);
    }
    public function loanClosing(Request $request)
    {
        $loanId = $request->loan_id;
        $date = $request->created_at;
        $mlResult = Memberloans::find($loanId);
        $lData['status'] = 3;
        $lData['clear_date'] = date("Y-m-d", strtotime(convertDate($date)));
        $mlResult->update($lData);
        $return_array = compact('loanId');
        return json_encode($return_array);
    }
    public function groupLoanClosing(Request $request)
    {
        $loanId = $request->loan_id;
        $date = $request->created_at;
        $mlResult = Grouploans::find($loanId);
        $lData['status'] = 3;
        $lData['clear_date'] = date("Y-m-d", strtotime(convertDate($date)));
        $mlResult->update($lData);
        $return_array = compact('loanId');
        return json_encode($return_array);
    }
    public static function createBranchDayBook($daybook_ref_id, $branch_id, $type, $sub_type, $type_id, $type_transaction_id, $associate_id, $member_id, $branch_id_to, $branch_id_from, $opening_balance, $amount, $closing_balance, $description, $description_dr, $description_cr, $payment_type, $payment_mode, $currency_code, $amount_to_id, $amount_to_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date, $entry_date, $entry_time, $created_by, $created_by_id, $is_contra, $contra_id, $created_at, $ssb_account_id_to, $ssb_account_tran_id_to, $ssb_account_tran_id_from)
    {
        $globaldate = Session::get('created_at');
        $t = date("H:i:s");
        $data['daybook_ref_id'] = $daybook_ref_id;
        $data['branch_id'] = $branch_id;
        $data['type'] = $type;
        $data['sub_type'] = $sub_type;
        $data['type_id'] = $type_id;
        $data['type_transaction_id'] = $type_transaction_id;
        $data['associate_id'] = $associate_id;
        $data['member_id'] = $member_id;
        $data['branch_id_to'] = $branch_id_to;
        $data['branch_id_from'] = $branch_id_from;
        $data['opening_balance'] = $opening_balance;
        $data['amount'] = $amount;
        $data['closing_balance'] = $closing_balance;
        $data['description'] = $description;
        $data['description_dr'] = $description_dr;
        $data['description_cr'] = $description_cr;
        $data['payment_type'] = $payment_type;
        $data['payment_mode'] = $payment_mode;
        $data['currency_code'] = $currency_code;
        $data['amount_to_id'] = $amount_to_id;
        $data['amount_to_name'] = $amount_to_name;
        $data['amount_from_id'] = $amount_from_id;
        $data['amount_from_name'] = $amount_from_name;
        $data['v_no'] = $v_no;
        $data['v_date'] = $v_date;
        $data['ssb_account_id_from'] = $ssb_account_id_from;
        $data['cheque_no'] = $cheque_no;
        $data['cheque_date'] = $cheque_date;
        $data['cheque_bank_from'] = $cheque_bank_from;
        $data['cheque_bank_ac_from'] = $cheque_bank_ac_from;
        $data['cheque_bank_ifsc_from'] = $cheque_bank_ifsc_from;
        $data['cheque_bank_branch_from'] = $cheque_bank_branch_from;
        $data['cheque_bank_to'] = $cheque_bank_to;
        $data['cheque_bank_ac_to'] = $cheque_bank_to;
        $data['transction_no'] = $transction_no;
        $data['transction_bank_from'] = $transction_bank_from;
        $data['transction_bank_ac_from'] = $transction_bank_ac_from;
        $data['transction_bank_ifsc_from'] = $transction_bank_ifsc_from;
        $data['transction_bank_branch_from'] = $transction_bank_branch_from;
        $data['transction_bank_to'] = $transction_bank_to;
        $data['transction_bank_ac_to'] = $transction_bank_ac_to;
        $data['transction_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_time'] = date("H:i:s");
        $data['created_by'] = $created_by;
        $data['created_by_id'] = $created_by_id;
        $data['is_contra'] = $is_contra;
        $data['contra_id'] = $contra_id;
        $data['ssb_account_id_to'] = $ssb_account_id_to;
        $data['ssb_account_tran_id_to'] = $ssb_account_tran_id_to;
        $data['ssb_account_tran_id_from'] = $ssb_account_tran_id_from;
        $data['created_at'] = date("Y-m-d " . $t . "", strtotime(convertDate($globaldate)));
        $transcation = \App\Models\BranchDaybook::create($data);
        return true;
    }
    public static function createAllTransaction($daybook_ref_id, $branch_id, $bank_id, $bank_ac_id, $head1, $head2, $head3, $head4, $head5, $type, $sub_type, $type_id, $type_transaction_id, $associate_id, $member_id, $branch_id_to, $branch_id_from, $opening_balance, $amount, $closing_balance, $description, $payment_type, $payment_mode, $currency_code, $amount_to_id, $amount_to_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date, $entry_date, $entry_time, $created_by, $created_by_id, $created_at, $ssb_account_id_to, $ssb_account_tran_id_to, $ssb_account_tran_id_from)
    {
        $globaldate = Session::get('created_at');
        $t = date("H:i:s");
        $data['daybook_ref_id'] = $daybook_ref_id;
        $data['branch_id'] = $branch_id;
        $data['bank_id'] = $bank_id;
        $data['bank_ac_id'] = $bank_ac_id;
        $data['head1'] = $head1;
        $data['head2'] = $head2;
        $data['head3'] = $head3;
        $data['head4'] = $head4;
        $data['head5'] = $head5;
        $data['type'] = $type;
        $data['sub_type'] = $sub_type;
        $data['type_id'] = $type_id;
        $data['type_transaction_id'] = $type_transaction_id;
        $data['associate_id'] = $associate_id;
        $data['member_id'] = $member_id;
        $data['branch_id_to'] = $branch_id_to;
        $data['branch_id_from'] = $branch_id_from;
        $data['opening_balance'] = $opening_balance;
        $data['amount'] = $amount;
        $data['closing_balance'] = $closing_balance;
        $data['description'] = $description;
        $data['payment_type'] = $payment_type;
        $data['payment_mode'] = $payment_mode;
        $data['currency_code'] = $currency_code;
        $data['amount_to_id'] = $amount_to_id;
        $data['amount_to_name'] = $amount_to_name;
        $data['amount_from_id'] = $amount_from_id;
        $data['amount_from_name'] = $amount_from_name;
        $data['v_no'] = $v_no;
        $data['v_date'] = $v_date;
        $data['ssb_account_id_from'] = $ssb_account_id_from;
        $data['cheque_no'] = $cheque_no;
        $data['cheque_date'] = $cheque_date;
        $data['cheque_bank_from'] = $cheque_bank_from;
        $data['cheque_bank_ac_from'] = $cheque_bank_ac_from;
        $data['cheque_bank_ifsc_from'] = $cheque_bank_ifsc_from;
        $data['cheque_bank_branch_from'] = $cheque_bank_branch_from;
        $data['cheque_bank_to'] = $cheque_bank_to;
        $data['cheque_bank_ac_to'] = $cheque_bank_ac_to;
        $data['transction_no'] = $transction_no;
        $data['transction_bank_from'] = $transction_bank_from;
        $data['transction_bank_ac_from'] = $transction_bank_ac_from;
        $data['transction_bank_ifsc_from'] = $transction_bank_ifsc_from;
        $data['transction_bank_branch_from'] = $transction_bank_branch_from;
        $data['transction_bank_to'] = $transction_bank_to;
        $data['transction_bank_ac_to'] = $transction_bank_ac_to;
        $data['transction_date'] = $transction_date;
        $data['entry_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_time'] = date("H:i:s");
        $data['created_by'] = $created_by;
        $data['created_by_id'] = $created_by_id;
        $data['ssb_account_id_to'] = $ssb_account_id_to;
        $data['ssb_account_tran_id_to'] = $ssb_account_tran_id_to;
        $data['ssb_account_tran_id_from'] = $ssb_account_tran_id_from;
        $data['created_at'] = date("Y-m-d " . $t . "", strtotime(convertDate($globaldate)));
        $transcation = \App\Models\AllTransaction::create($data);
        return true;
    }
    public static function createAllHeadTransaction($daybook_ref_id, $branch_id, $bank_id, $bank_ac_id, $head_id, $type, $sub_type, $type_id, $type_transaction_id, $associate_id, $member_id, $branch_id_to, $branch_id_from, $opening_balance, $amount, $closing_balance, $description, $payment_type, $payment_mode, $currency_code, $amount_to_id, $amount_to_name, $amount_from_id, $amount_from_name, $jv_unique_id, $v_no, $v_date, $ssb_account_id_from, $ssb_account_id_to, $ssb_account_tran_id_to, $ssb_account_tran_id_from, $cheque_type, $cheque_id, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_from_id, $cheque_bank_ac_from_id, $cheque_bank_to, $cheque_bank_ac_to, $cheque_bank_to_name, $cheque_bank_to_branch, $cheque_bank_to_ac_no, $cheque_bank_to_ifsc, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_from_id, $transction_bank_from_ac_id, $transction_bank_to, $transction_bank_ac_to, $transction_bank_to_name, $transction_bank_to_ac_no, $transction_bank_to_branch, $transction_bank_to_ifsc, $transction_date, $created_by, $created_by_id)
    {
        $globaldate = Session::get('created_at');
        $t = date("H:i:s");
        $data['daybook_ref_id'] = $daybook_ref_id;
        $data['branch_id'] = $branch_id;
        $data['bank_id'] = $bank_id;
        $data['bank_ac_id'] = $bank_ac_id;
        $data['head_id'] = $head_id;
        $data['type'] = $type;
        $data['sub_type'] = $sub_type;
        $data['type_id'] = $type_id;
        $data['type_transaction_id'] = $type_transaction_id;
        $data['associate_id'] = $associate_id;
        $data['member_id'] = $member_id;
        $data['branch_id_to'] = $branch_id_to;
        $data['branch_id_from'] = $branch_id_from;
        $data['opening_balance'] = $opening_balance;
        $data['amount'] = $amount;
        $data['closing_balance'] = $closing_balance;
        $data['description'] = $description;
        $data['payment_type'] = $payment_type;
        $data['payment_mode'] = $payment_mode;
        $data['currency_code'] = $currency_code;
        $data['amount_to_id'] = $amount_to_id;
        $data['amount_to_name'] = $amount_to_name;
        $data['amount_from_id'] = $amount_from_id;
        $data['amount_from_name'] = $amount_from_name;
        $data['jv_unique_id'] = $jv_unique_id;
        $data['v_no'] = $v_no;
        $data['v_date'] = $v_date;
        $data['ssb_account_id_from'] = $ssb_account_id_from;
        $data['ssb_account_id_to'] = $ssb_account_id_to;
        $data['ssb_account_tran_id_to'] = $ssb_account_tran_id_to;
        $data['ssb_account_tran_id_from'] = $ssb_account_tran_id_from;
        $data['cheque_type'] = $cheque_type;
        $data['cheque_id'] = $cheque_id;
        $data['cheque_no'] = $cheque_no;
        $data['cheque_date'] = $cheque_date;
        $data['cheque_bank_from'] = $cheque_bank_from;
        $data['cheque_bank_ac_from'] = $cheque_bank_ac_from;
        $data['cheque_bank_ifsc_from'] = $cheque_bank_ifsc_from;
        $data['cheque_bank_branch_from'] = $cheque_bank_branch_from;
        $data['cheque_bank_from_id'] = $cheque_bank_from_id;
        $data['cheque_bank_ac_from_id'] = $cheque_bank_ac_from_id;
        $data['cheque_bank_to'] = $cheque_bank_to;
        $data['cheque_bank_ac_to'] = $cheque_bank_ac_to;
        $data['cheque_bank_to_name'] = $cheque_bank_to_name;
        $data['cheque_bank_to_branch'] = $cheque_bank_to_branch;
        $data['cheque_bank_to_ac_no'] = $cheque_bank_to_ac_no;
        $data['cheque_bank_to_ifsc'] = $cheque_bank_to_ifsc;
        $data['transction_no'] = $transction_no;
        $data['transction_bank_from'] = $transction_bank_from;
        $data['transction_bank_ac_from'] = $transction_bank_ac_from;
        $data['transction_bank_ifsc_from'] = $transction_bank_ifsc_from;
        $data['transction_bank_branch_from'] = $transction_bank_branch_from;
        $data['transction_bank_from_id'] = $transction_bank_from_id;
        $data['transction_bank_from_ac_id'] = $transction_bank_from_ac_id;
        $data['transction_bank_to'] = $transction_bank_to;
        $data['transction_bank_ac_to'] = $transction_bank_ac_to;
        $data['transction_bank_to_name'] = $transction_bank_to_name;
        $data['transction_bank_to_ac_no'] = $transction_bank_to_ac_no;
        $data['transction_bank_to_branch'] = $transction_bank_to_branch;
        $data['transction_bank_to_ifsc'] = $transction_bank_to_ifsc;
        $data['transction_date'] = $transction_date;
        $data['entry_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_time'] = date("H:i:s");
        $data['created_by'] = $created_by;
        $data['created_by_id'] = $created_by_id;
        $data['created_at'] = date("Y-m-d " . $t . "", strtotime(convertDate($globaldate)));
        $transcation = \App\Models\AllHeadTransaction::create($data);
        return true;
    }
    public static function createMemberTransaction($daybook_ref_id, $type, $sub_type, $type_id, $type_transaction_id, $associate_id, $member_id, $branch_id, $bank_id, $account_id, $amount, $description, $payment_type, $payment_mode, $currency_code, $amount_to_id, $amount_to_name, $amount_from_id, $amount_from_name, $v_no, $v_date, $ssb_account_id_from, $cheque_no, $cheque_date, $cheque_bank_from, $cheque_bank_ac_from, $cheque_bank_ifsc_from, $cheque_bank_branch_from, $cheque_bank_to, $cheque_bank_ac_to, $transction_no, $transction_bank_from, $transction_bank_ac_from, $transction_bank_ifsc_from, $transction_bank_branch_from, $transction_bank_to, $transction_bank_ac_to, $transction_date, $entry_date, $entry_time, $created_by, $created_by_id, $created_at, $ssb_account_id_to, $ssb_account_tran_id_to, $ssb_account_tran_id_from)
    {
        $globaldate = Session::get('created_at');
        $t = date("H:i:s");
        $data['daybook_ref_id'] = $daybook_ref_id;
        $data['type'] = $type;
        $data['sub_type'] = $sub_type;
        $data['type_id'] = $type_id;
        $data['type_transaction_id'] = $type_transaction_id;
        $data['associate_id'] = $associate_id;
        $data['member_id'] = $member_id;
        $data['branch_id'] = $branch_id;
        $data['bank_id'] = $bank_id;
        $data['account_id'] = $account_id;
        $data['amount'] = $amount;
        $data['description'] = $description;
        $data['payment_type'] = $payment_type;
        $data['payment_mode'] = $payment_mode;
        $data['currency_code'] = $currency_code;
        $data['amount_to_id'] = $amount_to_id;
        $data['amount_to_name'] = $amount_to_name;
        $data['amount_from_id'] = $amount_from_id;
        $data['amount_from_name'] = $amount_from_name;
        $data['v_no'] = $v_no;
        $data['v_date'] = $v_date;
        $data['ssb_account_id_from'] = $ssb_account_id_from;
        $data['cheque_no'] = $cheque_no;
        $data['cheque_date'] = $cheque_date;
        $data['cheque_bank_from'] = $cheque_bank_from;
        $data['cheque_bank_ac_from'] = $cheque_bank_ac_from;
        $data['cheque_bank_ifsc_from'] = $cheque_bank_ifsc_from;
        $data['cheque_bank_branch_from'] = $cheque_bank_branch_from;
        $data['cheque_bank_to'] = $cheque_bank_to;
        $data['cheque_bank_ac_to'] = $cheque_bank_ac_to;
        $data['transction_no'] = $transction_no;
        $data['transction_bank_from'] = $transction_bank_from;
        $data['transction_bank_ac_from'] = $transction_bank_ac_from;
        $data['transction_bank_ifsc_from'] = $transction_bank_ifsc_from;
        $data['transction_bank_branch_from'] = $transction_bank_branch_from;
        $data['transction_bank_to'] = $transction_bank_to;
        $data['transction_bank_ac_to'] = $transction_bank_ac_to;
        $data['transction_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_date'] = date("Y-m-d", strtotime(convertDate($globaldate)));
        $data['entry_time'] = date("H:i:s");
        $data['created_by'] = $created_by;
        $data['created_by_id'] = $created_by_id;
        $data['ssb_account_id_to'] = $ssb_account_id_to;
        $data['ssb_account_tran_id_to'] = $ssb_account_tran_id_to;
        $data['ssb_account_tran_id_from'] = $ssb_account_tran_id_from;
        $data['created_at'] = date("Y-m-d " . $t . "", strtotime(convertDate($globaldate)));
        $transcation = \App\Models\MemberTransaction::create($data);
        return true;
    }
    public function emideleteForm(Request $request)
    {
        $data['title'] = 'Delete Loan EMI';
        return view('templates.admin.loan.delete_emi_form', $data);
    }
    public function emilist(Request $request)
    {
        if ($request->is_search == 'yes')
        {
            $id = Memberloans::where('account_number', $request->account_number)
                ->first();
            if ($id)
            {
                $record = LoanDayBooks::where('loan_type', '!=', 3)->where('loan_sub_type', 0)
                    ->where('loan_id', $id->id) /*->where('payment_mode',0)*/
                    ->orderBy('created_at', 'desc')
                    ->where('is_deleted', 0)
                    ->get();
                if (count($record) > 0)
                {
                    $status = 1;
                    return \Response::json(['view' => view('templates.admin.loan.emi_list', ['record' => $record])->render() , 'msg_type' => 'success']);
                }
                else
                {
                    return response()
                        ->json(['msg_type' => 'error']);
                }
            }
            else
            {
                $groupId = Grouploans::where('account_number', $request->account_number)
                    ->first();
                if ($groupId)
                {
                    $record = LoanDayBooks::where('loan_type', 3)->where('loan_sub_type', 0)
                        ->where('is_deleted', 0) /*->where('payment_mode',0)*/
                        ->where('loan_id', $groupId->id)
                        ->orderBy('id', 'desc')
                        ->get();
                    if (count($record) > 0)
                    {
                        $status = 1;
                        return \Response::json(['view' => view('templates.admin.loan.emi_list', ['record' => $record])->render() , 'msg_type' => 'success']);
                    }
                    else
                    {
                        return response()
                            ->json(['msg_type' => 'error']);
                    }
                }
                else
                {
                    return redirect()
                        ->back()
                        ->with('success', 'Loan EMI not generated!');
                }
            }
        }
    }
    
    public function updateSsbDayBookAmountAfterEmiDelete($amount, $account_number, $date)
    {
        $globaldate = $date;
        $entryTime = date("H:i:s");
        $entryDate = date("Y-m-d", strtotime(convertDate($date)));
        $getCurrentBranchRecord = SavingAccountTranscation::where('account_no', $account_number)->whereDate('created_at', $entryDate)->first();
        //dd($getCurrentBranchRecord);die();
        $bResult = SavingAccountTranscation::find($getCurrentBranchRecord->id);
        $bData['opening_balance'] = $getCurrentBranchRecord->opening_balance + $amount;
        $bData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
        $bResult->update($bData);
        $getNextBranchRecord = SavingAccountTranscation::where('account_no', $account_number)->whereDate('created_at', '>', $entryDate)->orderby('created_at', 'ASC')
            ->get();
        if ($getNextBranchRecord)
        {
            foreach ($getNextBranchRecord as $key => $value)
            {
                $sResult = SavingAccountTranscation::find($value->id);
                $sData['opening_balance'] = $value->opening_balance + $amount;
                $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                $sResult->update($sData);
            }
        }
    }
    public function updateBranchCashFromBackDateAfterDeleteTransaction($amount, $branch_id, $ftdate)
    {
        $globaldate = $ftdate;
        $entryTime = date("H:i:s");
        $entryDate = date("Y-m-d", strtotime(convertDate($globaldate)));
        $getCurrentBranchRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($getCurrentBranchRecord)
        {
            $bResult = \App\Models\BranchCash::find($getCurrentBranchRecord->id);
            $bData['balance'] = $getCurrentBranchRecord->balance - $amount;
            if ($getCurrentBranchRecord->closing_balance > 0)
            {
                $bData['closing_balance'] = $getCurrentBranchRecord->closing_balance - $amount;
            }
            //$bData['updated_at']=date("Y-m-d ".$entryTime."", strtotime(convertDate($globaldate)));
            $bResult->update($bData);
            //dd($bData,$amount);
            $getNextBranchRecord = \App\Models\BranchCash::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                ->get();
            if ($getNextBranchRecord)
            {
                foreach ($getNextBranchRecord as $key => $value)
                {
                    $sResult = \App\Models\BranchCash::find($value->id);
                    $sData['opening_balance'] = $value->closing_balance;
                    $sData['balance'] = $value->balance - $amount;
                    if ($value->closing_balance > 0)
                    {
                        $sData['closing_balance'] = $value->closing_balance - $amount;
                    }
                    $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                    $sResult->update($sData);
                }
            }
        }
        $getCurrentBranchClosingRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', $entryDate)->first();
        if ($getCurrentBranchClosingRecord)
        {
            $bResult = \App\Models\BranchClosing::find($getCurrentBranchClosingRecord->id);
            $bData['balance'] = $getCurrentBranchClosingRecord->balance - $amount;
            if ($getCurrentBranchClosingRecord->closing_balance > 0)
            {
                $bData['closing_balance'] = $getCurrentBranchClosingRecord->closing_balance - $amount;
            }
            $bData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
            $bResult->update($bData);
            $getNextBranchClosingRecord = \App\Models\BranchClosing::where('branch_id', $branch_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                ->get();
            if ($getNextBranchClosingRecord)
            {
                foreach ($getNextBranchClosingRecord as $key => $value)
                {
                    $sResult = \App\Models\BranchClosing::find($value->id);
                    $sData['opening_balance'] = $value->closing_balance;
                    $sData['balance'] = $value->balance - $amount;
                    if ($value->closing_balance > 0)
                    {
                        $sData['closing_balance'] = $value->closing_balance - $amount;
                    }
                    $sData['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                    $sResult->update($sData);
                }
            }
        }
    }
    public static function updateBackDateloanBankBalanceAftrDeleteTransaction($amount, $bank_id, $account_id, $ltdate, $neft)
    {
        $globaldate = $ltdate;
        $entryTime = date("H:i:s");
        $entryDate = date("Y-m-d", strtotime(convertDate($globaldate)));
        $getCurrentFromBankRecord = \App\Models\SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $account_id)->whereDate('entry_date', $entryDate)->first();
        if ($getCurrentFromBankRecord)
        {
            $Result = \App\Models\SamraddhBankClosing::find($getCurrentFromBankRecord->id);
            $data['balance'] = $getCurrentFromBankRecord->balance + ($amount - $neft);
            if ($getCurrentFromBankRecord->closing_balance > 0)
            {
                $data['closing_balance'] = $getCurrentFromBankRecord->closing_balance + ($amount - $neft);
            }
            $data['updated_at'] = $entryDate;
            $Result->update($data);
            $insertid = $getCurrentFromBankRecord->id;
            $getNextFromBankRecord = \App\Models\SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $account_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                ->get();
            if ($getNextFromBankRecord)
            {
                foreach ($getNextFromBankRecord as $key => $value)
                {
                    $sResult = \App\Models\SamraddhBankClosing::find($value->id);
                    $sData['opening_balance'] = $value->closing_balance;
                    $sdata['balance'] = $value->balance + ($amount - $neft);
                    if ($value->closing_balance > 0)
                    {
                        $sdata['closing_balance'] = $value->closing_balance + ($amount - $neft);
                    }
                    $sdata['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                    $sResult->update($sdata);
                }
            }
        }
        else
        {
            $oldCurrentFromDateRecord = \App\Models\SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $account_id)->whereDate('entry_date', '<', $entryDate)->orderby('entry_date', 'DESC')
                ->first();
            if ($oldCurrentFromDateRecord)
            {
                $cResult = \App\Models\SamraddhBankClosing::find($oldCurrentFromDateRecord->id);
                //$cdata['loan_closing_balance']=$oldCurrentFromDateRecord->loan_balance;
                $cdata['closing_balance'] = $oldCurrentFromDateRecord->balance;
                $cdata['updated_at'] = $entryDate;
                $cResult->update($cdata);
                $nextRecordExists = \App\Models\SamraddhBankClosing::where('bank_id', $bank_id)->where('account_id', $account_id)->whereDate('entry_date', '>', $entryDate)->orderby('entry_date', 'ASC')
                    ->get();
                $data1['bank_id'] = $oldCurrentFromDateRecord->bank_id;
                $data1['account_id'] = $oldCurrentFromDateRecord->account_id;
                $data1['opening_balance'] = $oldCurrentFromDateRecord->balance;
                $data1['balance'] = $oldCurrentFromDateRecord->balance + ($amount - $neft);
                if ($nextRecordExists)
                {
                    $data1['closing_balance'] = $oldCurrentFromDateRecord->balance + ($amount - $neft);
                    foreach ($nextRecordExists as $key => $value)
                    {
                        $sResult = \App\Models\SamraddhBankClosing::find($value->id);
                        $sData['opening_balance'] = $value->closing_balance;
                        $sdata['balance'] = $value->balance + ($amount - $neft);
                        if ($value->closing_balance > 0)
                        {
                            $sdata['closing_balance'] = $value->closing_balance + ($amount - $neft);
                        }
                        $sdata['updated_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                        $sResult->update($sdata);
                    }
                }
                else
                {
                    $data1['closing_balance'] = 0;
                }
                $data1['entry_date'] = $entryDate;
                $data1['entry_time'] = $entryTime;
                $data1['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                $transcation = \App\Models\SamraddhBankClosing::create($data1);
                $insertid = $transcation->id;
            }
            else
            {
                $data2['bank_id'] = $from_bank_id;
                $data1['account_id'] = $account_id;
                $data2['opening_balance'] = 0;
                $data2['balance'] = - ($amount + $neft);
                $data2['closing_balance'] = 0;
                $data2['entry_date'] = $entryDate;
                $data2['entry_time'] = $entryTime;
                $data2['created_at'] = date("Y-m-d " . $entryTime . "", strtotime(convertDate($globaldate)));
                $transcation = \App\Models\SamraddhBankClosing::create($data2);
                $insertid = $transcation->id;
            }
        }
        return true;
    }
    public function getBranchApprovedCheque(Request $request)
    {
        $cheque = ReceivedCheque::where('branch_id', $request->branch_id)
            ->where('status', 2)
            ->get();
        return response()
            ->json($cheque);
    }
    public function outstanding_report(Request $request)
    {
        $reportName = $request->segment(3);
        switch ($reportName){
            case 'outstanding_report':
                $data['title'] = 'Loan Outstanding';
            break ;
            case 'loan_due_report':
                $data['title'] = 'Loan Due Report';
            break;
            case 'group_loans':
                $data['title'] = 'Group Loan Outstanding';
            break;
            default:
                $data['title'] = '';
        }
        return view('templates.admin.loan.report', $data);
    }
    public function LoanoutstandingDuereport(Request $request)
    {
        if ($request->ajax())
        {
            $arrFormData = array();
            if (!empty($_POST['searchform']))
            {
                foreach ($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            if($request->title == 'Loan Outstanding' )
            {
                $data = Memberloans::with(['loanMember', 'loanMemberAssociate', 'loanBranch','loanTransaction','loanTransactionSum'])->with(['loanMemberCustom' ])->with(['GroupLoanMembers'])->whereIn('status',[1,4,3])->where('loan_type','!=',3)->whereNotNull('approve_date') ;;
            }
            if($request->title == 'Group Loan Outstanding' )
            {
                $data = Grouploans::with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanMemberAssociate'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanBranch'=>function($q){
                    $q->select('id','branch_code','name');
                },'loanTransactionSum'])->whereIn('status',[1,4,3])->where('loan_type','=',3)->whereNotNull('approve_date') ;
				
				if ($arrFormData['group_loan_common_id'] != '')
				{
					$group_loan_common_id = $arrFormData['group_loan_common_id'];
					$data = $data->where('group_loan_common_id', '=', $group_loan_common_id);
				}
					
            }
            else if($request->title =='Loan Due Report'){
                $data = Memberloans::with('loanMember', 'loanMemberAssociate', 'loanBranch')->with(['loanMemberCustom' => function ($q)
                {
                    $q->select('id', 'member_id', 'first_name', 'last_name', 'associate_no');
                }
                ])->with(['GroupLoanMembers'=>function($q){
                    $q->select('id','account_number','member_loan_id');
                }])->whereIn('status',[1,4]) ;
            }
            if (isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
            {
                if ($arrFormData['date_from'] != '')
                {
                    $startDate = date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if ($arrFormData['date_to'] != '')
                    {
                        $endDate = date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate = '';
                    }
                }else{
                    $startDate ='';
                    $endDate = '';
                }
                if($request->title == 'Loan Outstanding')
                {
                    if ($arrFormData['plan'] != '')
                    {
                        $planId = $arrFormData['plan'];
                        $data = $data->where('loan_type', '=', $planId);
                    }
                }
                if ($arrFormData['branch_id'] != '')
                {
                    $branch = $arrFormData['branch_id'];
                    $data = $data->where('branch_id', '=', $branch);
                }
                if ($arrFormData['loan_account_number'] != '')
                {
                    $loan_account_number = $arrFormData['loan_account_number'];
                    $data = $data->where('account_number', '=', $loan_account_number);
                }
                if ($arrFormData['member_id'] != '')
                {
                    $meid = $arrFormData['member_id'];
                    $data = $data->whereHas('loanMember', function ($query) use ($meid)
                    {
                        $query->where('members.member_id', 'LIKE', '%' . $meid . '%');
                    });
                }
                if ($arrFormData['emi_option'] != '')
                {
                    $emiType = $arrFormData['emi_option'];
                    $data = $data->where('emi_option',$emiType);
                }
            }else{
                $startDate = '';
                $endDate = '';
            }
            $datas = $data->count();
            $data = $data->orderby('id', 'desc')->offset($_POST['start'])->limit($_POST['length'])->get();
            $count = $datas;
            $totalCount = $count;
            $sno = $_POST['start'];
            $rowReturn = array();
            foreach ($data as $row)
            {
                if($row->emi_option == 2)
                {
                    if(!empty($endDate) && !empty($startDate))
                    {
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('emi_date','>=',$startDate )->where('emi_date','<=',$endDate)->where('is_deleted','0')->orderBy('id','desc')->first();
                    }
                    else{
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                    }
                }
                else if($row->emi_option == 3)
                {
                    if(!empty($endDate) && !empty($startDate))
                    {
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('emi_date','=',$endDate )->where('is_deleted','0')->first();
                    }
                    else{
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                    }
                }
                else{
                    if(!empty($endDate))
                    {
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where(\DB::raw('Month(emi_date)'),'=', date('m',strtotime($endDate)))->where(\DB::raw('year(emi_date)'),'=', date('Y',strtotime($endDate)))->where('is_deleted','0')->first();
                    }
                    else{
                        $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                    }
                }
                $sno++;
                $val['DT_RowIndex'] = $sno;
                $val['created_date'] = date('d/m/Y',strtotime($row->approve_date));
                $val['branch'] = $row['loanBranch']->name;
                $val['branch_code'] = $row['loanBranch']->branch_code;
                $url =URL::to("admin/loan/emi-transactions/".$row->id."/".$row->loan_type."");
                $btn = '<a class=" " href="'.$url.'" title="View Statement" target="_blank">' . $row->account_number.'</a>';
                if($row->loan_type == 3)
                {
                    $val['account_number'] = $btn;
                }
                else{
                    $val['account_number'] =$btn;
                }
				
				if($row->group_loan_common_id != null)
				{
					$val['group_loan_common_id'] = $row->group_loan_common_id;
				}else{
					$val['group_loan_common_id'] = 'N/A';
				}
				
                if(isset($row['loanMember']->first_name))
                {
                    $val['member_name'] = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                }
                else{
                    $val['member_name'] = 'N/A';
                }
                if(isset($row['loanMember']->member_id))
                {
                $val['member_id'] = $row['loanMember']->member_id;
                }
                else{
                    $val['member_id'] = 'N/A';
                }
                if(($row->emi_option == 1))
                {
                $emitYPE = 'Monthly';
                $EMI = 'Month';
                }
                else if(($row->emi_option == 2))
                {
                $emitYPE = 'Weekly';
                $EMI = 'Week';
                }
                else if(($row->emi_option == 3))
                {
                $emitYPE = 'Daily';
                $EMI = 'Days';
                }
                else{
                    $emitYPE = 'N/A';
                    $EMI = '';
                }
                $val['emi_type'] = $emitYPE;
                if(isset($row->emi_option))
                {
                $val['emi_period'] = $row->emi_period.' '.$EMI;
                }
                else
                {
                $val['emi_period'] = 'N/A';
                }
                if ($row->loan_type == 1)
                {
                    $plan_name = 'Personal Loan';
                }
                elseif ($row->loan_type == 2)
                {
                    $plan_name = 'Staff Loan(SL)';
                }
                elseif ($row->loan_type == 3)
                {
                    $plan_name = 'Group Loan';
                }
                elseif ($row->loan_type == 4)
                {
                    $plan_name = 'Loan against Investment plan(DL) ';
                }
                $val['loan_type'] = $plan_name;
                if ($row->emi_option == 1)
                {
                    $tenure = $row->emi_period . ' Months';
                }
                elseif ($row->emi_option == 2)
                {
                    $tenure = $row->emi_period . ' Weeks';
                }
                elseif ($row->emi_option == 3)
                {
                    $tenure = $row->emi_period . ' Days';
                }
                $val['tenure'] = $tenure;
                $val['roi'] = $row->ROI . ' %';
                $val['loan_amount'] = $row->amount . ' <i class="fas fa-rupee-sign"></i>';
                $val['total_deposit'] = $row['loanTransactionSum']->sum('deposit') + $row['loanTransactionSum']->sum('penalty') . ' <i class="fas fa-rupee-sign"></i>';
                $totalbalance = $row->emi_period * $row->emi_amount;
                $Finaloutstanding_amount = $totalbalance - $row->received_emi_amount;
                if($request->title != 'Loan Outstanding')
                {
                    $val['total_due_amount'] = $Finaloutstanding_amount . ' <i class="fa fa-inr"></i>';
                    $val['no_of_due_emi'] = 0 . ' <i class="fa fa-inr"></i>';
                    $val['total_deposite_emi'] =  $row->received_emi_amount . ' <i class="fa fa-inr"></i>';
                    $val['no_of_deposite_emi'] = 0 . ' <i class="fa fa-inr"></i>';
                    $val['outstanding_amount'] = $row->emi_amount . ' <i class="fa fa-inr"></i>';
                }
                else{
                    if(($row->emi_option == 1))
                    {
                        $outAmount = $this->getoutstandingAmountData(new LoanEmisNew ,$row->id,$row->emi_option,$startDate,$endDate,$row->approve_date,$row->ROI);
                        $amount = ((int)$outAmount > 0) ? $outAmount : $row->amount;
                        $val['outstanding_amount'] =$amount. ' <i class="fa fa-inr"></i>';
                    }
                    elseif(isset($datas->out_standing_amount))
                    {
                        $val['outstanding_amount'] =((int) $datas->out_standing_amount > 0) ? $datas->out_standing_amount : $row->transfer_amount. ' <i class="fa fa-inr"></i>';
                    }
                    else{
                        $val['outstanding_amount'] = $row->transfer_amount;
                    }
                }
                // }
                $url2 =URL::to("admin/loan/deposit/emi-transactions/".$row->id."/".$row->loan_type."");
                $eurl = URL::to("admin/loan/repayment_chart/" . $row->member_loan_id . "");
                $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9"></i></a><div class="dropdown-menu dropdown-menu-right">';
                $btn .= '<a class="dropdown-item" href="' . $url2 . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>View Deposite Statement</a>';
                $btn .= '<a class="dropdown-item repayment" href="javascript:void(0);" data-toggle="modal" data-target="#exampleModalLong" data-loan-id="' . $row->id . '" data-type = "'.$row->loan_type.'" ><i class="fas fa-percent text-default mr-2"></i>Repayment Chart</a>';
                if( $row->loan_type != 3)
                {
                    $vurl = URL::to("admin/loan/view/" . $row->id . "/" . $row->loan_type . "");
                }
                else{
                    $vurl = URL::to("admin/loan/view/" . $row->member_loan_id . "/" . $row->loan_type . "");
                }
                $btn .= '<a class="dropdown-item" href="' . $vurl . '"><i class="fas fa-eye text-default mr-2"></i>View</a>';
                $btn .= '</div></div></div>';
                $val['action'] = $btn;
                $rowReturn[] = $val;
            }
            $output = array(
                "draw" => $_POST['draw'],
                "recordsTotal" => $totalCount,
                "recordsFiltered" => $totalCount,
                "data" => $rowReturn,
            );
            return json_encode($output);
        }
    }
    public function export_Loanoutstandingreport(Request $request)
    {
        if ($request['export'] == 0) {
        $input = $request->all();
        $start = $input["start"];
        $limit = $input["limit"];
        $returnURL = URL::to('/')."/asset/outstanding.csv";
        $fileName = env('APP_EXPORTURL') . "asset/outstanding.csv";
        global $wpdb;
        $postCols = array(
            'post_title',
            'post_content',
            'post_excerpt',
            'post_name',
        );
        header("Content-type: text/csv");
        }
            if($request->title == 'Loan Outstanding' )
            {
                $data = Memberloans::with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanMemberAssociate'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanBranch'=>function($q){
                    $q->select('id','branch_code','name');
                },'loanTransaction'])->whereIn('status',[1,4,3])->where('loan_type','!=',3)->whereNotNull('approve_date') ;
            }
            if($request->title == 'Group Loan Outstanding' )
            {
                $data = Grouploans::with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanMemberAssociate'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanBranch'=>function($q){
                    $q->select('id','branch_code','name');
                },'loanTransaction'])->whereIn('status',[1,4,3])->where('loan_type','=',3)->whereNotNull('approve_date') ;
				
				if($request['group_loan_common_id'] != ''){
					$data = $data->where('group_loan_common_id', '=', $request['group_loan_common_id']);
				}
				
            }
            else if($request->title =='Loan Due Report'){
                $data = Memberloans::with('loanMember', 'loanMemberAssociate', 'loanBranch')->with(['loanMemberCustom' => function ($q)
                {
                    $q->select('id', 'member_id', 'first_name', 'last_name', 'associate_no');
                }
                ])->with(['GroupLoanMembers'=>function($q){
                    $q->select('id','account_number','member_loan_id');
                }])->whereIn('status',[1,4]) ;
            }
			
			if ($request['date_from'] != '')
			{
				$startDate = date("Y-m-d", strtotime(convertDate($request['date_from'])));
				if ($request['date_to'] != '')
				{
					$endDate = date("Y-m-d ", strtotime(convertDate($request['date_to'])));
				}
				else
				{
					$endDate = '';
				}
			}
			if($request->title == 'Loan Outstanding')
			{
				if ($request['plan'] != '')
				{
					$planId = $request['plan'];
					$data = $data->where('loan_type', '=', $planId);
				}
			}
			if ($request['branch_id'] != '')
			{
				$branch = $request['branch_id'];
				$data = $data->where('branch_id', '=', $branch);
			}
			if ($request['loan_account_number'] != '')
			{
				$loan_account_number = $request['loan_account_number'];
				$data = $data->where('account_number', '=', $loan_account_number);
			}
			if ($request['member_id'] != '')
			{
				$meid = $request['member_id'];
				$data = $data->whereHas('loanMember', function ($query) use ($meid)
				{
					$query->where('members.member_id', 'LIKE', '%' . $meid . '%');
				});
			}
			if ($request['emi_option'] != '')
			{
				$emiType = $request['emi_option'];
				$data = $data->where('emi_option',$emiType);
			}
		if($request['export'] == 0){
            $sno=$_POST['start'];			
            $totalResults=$data->orderby('id','DESC')->count();
            $results=$data->orderby('id','DESC')->offset($start)->limit($limit)->get();
            $result = 'next';
            if( ($start + $limit ) >= $totalResults){
                $result = 'finished';
            }
            // if its a fist run truncate the file. else append the file
            if($start==0) {
                $handle = fopen($fileName, 'w');
            }else{
                $handle = fopen($fileName, 'a');
            }
            if($start==0) {
                $headerDisplayed = false;
            }else{
                $headerDisplayed = true;
            }
            $sno=$_POST['start'];
            foreach ($results as $row)
            {
                     $sno++;
                     if($row->emi_option == 2)
                     {
                         if(!empty($endDate) && !empty($startDate))
                         {
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('emi_date','>=',$startDate )->where('emi_date','<=',$endDate)->where('is_deleted','0')->orderBy('id','desc')->first();
                         }
                         else{
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                         }
                     }
                     else if($row->emi_option == 3)
                     {
                         if(!empty($endDate) && !empty($startDate))
                         {
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->where('emi_date','=',$endDate )->first();
                         }
                         else{
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                         }
                     }
                     else{
                         if(!empty($endDate))
                         {
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where(\DB::raw('Month(emi_date)'),'=', date('m',strtotime($endDate)))->where(\DB::raw('year(emi_date)'),'=', date('Y',strtotime($endDate)))->where('is_deleted','0')->first();
                         }
                         else{
                             $datas = \App\Models\LoanEmisNew::where('loan_id',$row->id)->where('loan_type',$row->loan_type)->where('is_deleted','0')->orderBy('id','desc')->first();
                         }
                     }
                     $sno++;
                     $val['CREATED DATE'] = date('d/m/Y',strtotime($row->created_at));
                     $val['BRANCH'] = $row['loanBranch']->name;
                     $val['BRANCH CODE'] = $row['loanBranch']->branch_code;
					 $btn =  $row->account_number;
					 $val['ACCOUNT NUMBER'] =$btn;
					 $val['GROUP LOAN COMMON ID'] = $row['group_loan_common_id'];
                     if(isset($row['loanMember']->first_name))
                     {
                         $val['MEMBER NAME'] = $row['loanMember']->first_name . ' ' . $row['loanMember']->last_name;
                     }
                     else{
                         $val['MEMBER NAME'] = 'N/A';
                     }
                     if(isset($row['loanMember']->member_id))
                     {
                     $val['MEMBER ID'] = $row['loanMember']->member_id;
                     }
                     else{
                         $val['MEMBER ID'] = 'N/A';
                     }
                     if(($row->emi_option == 1))
                     {
                     $emitYPE = 'Monthly';
                     $EMI = 'Month';
                     }
                     else if(($row->emi_option == 2))
                     {
                     $emitYPE = 'Weekly';
                     $EMI = 'Week';
                     }
                     else if(($row->emi_option == 3))
                     {
                     $emitYPE = 'Daily';
                     $EMI = 'Days';
                     }
                     else{
                         $emitYPE = 'N/A';
                         $EMI = '';
                     }
                     $val['EMI TYPE'] = $emitYPE;
                     if(isset($row->emi_option))
                     {
                     $val['EMI PERIOD'] = $row->emi_period.' '.$EMI;
                     }
                     else
                     {
                     $val['EMI PERIOD'] = 'N/A';
                     }
                     if ($row->loan_type == 1)
                     {
                         $plan_name = 'Personal Loan';
                     }
                     elseif ($row->loan_type == 2)
                     {
                         $plan_name = 'Staff Loan(SL)';
                     }
                     elseif ($row->loan_type == 3)
                     {
                         $plan_name = 'Group Loan';
                     }
                     elseif ($row->loan_type == 4)
                     {
                         $plan_name = 'Loan against Investment plan(DL) ';
                     }
                     $val['LOAN TYPE'] = $plan_name;
                     if ($row->emi_option == 1)
                     {
                         $tenure = $row->emi_period . ' Months';
                     }
                     elseif ($row->emi_option == 2)
                     {
                         $tenure = $row->emi_period . ' Weeks';
                     }
                     elseif ($row->emi_option == 3)
                     {
                         $tenure = $row->emi_period . ' Days';
                     }
                     $val['TENURE'] = $tenure;
                     $val['ROI'] = $row->ROI . ' %';
                     $val['LOAN AMOUNT'] = $row->amount;
                     $totalbalance = $row->emi_period * $row->emi_amount;
                     $Finaloutstanding_amount = $totalbalance - $row->received_emi_amount;
                         if(isset($datas->out_standing_amount))
                         {
                             $val['OUTSTANDING AMOUNT'] =((int)$datas->out_standing_amount > 0  ) ? $datas->out_standing_amount : $row->transfer_amount;
                         }
                         else{
                             $val['OUTSTANDING AMOUNT'] =$row->amount;
                         }
                if (!$headerDisplayed) {
                    // Use the keys from $data as the titles
                    fputcsv($handle, array_keys($val));
                    $headerDisplayed = true;
                }
                // Put the data into the stream
                fputcsv($handle, $val);
            }
             // Close the file
            fclose($handle);
            if($totalResults == 0)
            {
                $percentage=100;
            }
            else{
                $percentage = ($start+$limit)*100/$totalResults;
                $percentage = number_format((float)$percentage, 1, '.', '');
            }
            // Output some stuff for jquery to use
            $response = array(
                'result'        => $result,
                'start'         => $start,
                'limit'         => $limit,
                'totalResults'  => $totalResults,
                'fileName' => $returnURL,
                'percentage' => $percentage
            );
            echo json_encode($response);
        }
    }
    public function repayment_chart(Request $req)
    {
       if($req->loanType != 3)
       {
            $laonData  =  Memberloans::select('id','created_at','approve_date','emi_option','emi_period','emi_amount','amount','ROI')->where('id',$req->loanId)->first();
       }
       else
       {
            $laonData  =  Grouploans::select('id','created_at','approve_date','emi_option','emi_period','emi_amount','amount','ROI')->where('id',$req->loanId)->first();
       }
       $data = array();
       $dataValue = $this->getOutstandingAmount($laonData->emi_period,$laonData->emi_option,$laonData->created_at,$laonData->amount,$laonData->ROI,$laonData->emi_amount);
        $totalCount = count($data);
        $sno = 1;
        $rowReturn = array();
        foreach($dataValue as $i => $value)
        {
            $val['DT_RowIndex'] = $sno;
            $val['emi_date'] = $value['emi_date'];
            $val['emi_amount'] = number_format((float)$laonData->emi_amount, 2, '.', '');
            $val['roi'] = number_format((float)$value['roi'], 2, '.', '');
            $val['principal_amount'] = number_format((float)$value['principalAmount'], 2, '.', '');
            $val['outstanding'] = number_format((float)$value['outStandingAmount'], 2, '.', '');
            $sno++;
            $rowReturn[] = $val;
        }
           return response()->json($rowReturn);
    }
    public function grp_repayment_chart(Request $req)
    {
       $laonData  =  Grouploans::select('id','created_at','approve_date','emi_option','emi_period','emi_amount','amount','ROI')->where('id',$req->loanId)->first();
       $data = array();
       $dataValue = $this->getOutstandingAmount($laonData->emi_period,$laonData->emi_option,$laonData->created_at,$laonData->amount,$laonData->ROI,$laonData->emi_amount);
        $totalCount = count($data);
        $sno = 1;
        $rowReturn = array();
        foreach($dataValue as $i => $value)
        {
            $val['DT_RowIndex'] = $sno;
            $val['emi_date'] = $value['emi_date'];
            $val['emi_amount'] = number_format((float)$laonData->emi_amount, 2, '.', '');
            $val['roi'] = number_format((float)$value['roi'], 2, '.', '');
            $val['principal_amount'] = number_format((float)$value['principalAmount'], 2, '.', '');
            $val['outstanding'] = number_format((float)$value['outStandingAmount'], 2, '.', '');
            $sno++;
            $rowReturn[] = $val;
        }
           return response()->json($rowReturn);
    }
    public function export_repayment(Request $request)
    {
        $input = $request->all();
        $start = $input["start"];
        $limit = $input["limit"];
        $returnURL = URL::to('/')."/asset/outstanding.csv";
        $fileName = env('APP_EXPORTURL') . "asset/outstanding.csv";
        global $wpdb;
        $postCols = array(
            'post_title',
            'post_content',
            'post_excerpt',
            'post_name',
        );
        header("Content-type: text/csv");
        if($request->title != 'Group Loan Outstanding')
        {
             $laonData  =  Memberloans::select('id','created_at','approve_date','emi_option','emi_period','emi_amount','amount','ROI')->where('id',$request->loanId)->first();
        }
        else
        {
             $laonData  =  Grouploans::select('id','created_at','approve_date','emi_option','emi_period','emi_amount','amount','ROI')->where('id',$request->loanId)->first();
        }
        $data = array();
        $dataValue = $this->getOutstandingAmount($laonData->emi_period,$laonData->emi_option,$laonData->created_at,$laonData->amount,$laonData->ROI,$laonData->emi_amount);
        $totalCount = count($data);
         $sno = 1;
         $rowReturn = array();
         if($request['export'] == 0){
            $sno=$_POST['start'];
            $totalResults=count($dataValue);
            $results=$dataValue;
            $result = 'next';
            if( ($start + $limit ) >= $totalResults){
                $result = 'finished';
            }
            // if its a fist run truncate the file. else append the file
            if($start==0) {
                $handle = fopen($fileName, 'w');
            }else{
                $handle = fopen($fileName, 'a');
            }
            if($start==0) {
                $headerDisplayed = false;
            }else{
                $headerDisplayed = true;
            }
            $sno=$_POST['start'];
            foreach($dataValue as $i => $value)
            {
                $val['EMI DATE'] = $value['emi_date'];
                $val['EMI AMOUNT'] = number_format((float)$laonData->emi_amount, 2, '.', '');
                $val['ROI'] = number_format((float)$value['roi'], 2, '.', '');
                $val['PRINCIPAL AMOUNT'] = number_format((float)$value['principalAmount'], 2, '.', '');
                $val['OUTSTANDING AMOUNT'] = number_format((float)$value['outStandingAmount'], 2, '.', '');
                if (!$headerDisplayed) {
                    // Use the keys from $data as the titles
                    fputcsv($handle, array_keys($val));
                    $headerDisplayed = true;
                }
                // Put the data into the stream
                fputcsv($handle, $val);
            }
            fclose($handle);
            if($totalResults == 0)
            {
                $percentage=100;
            }
            else{
                $percentage = ($start+$limit)*100/$totalResults;
                $percentage = number_format((float)$percentage, 1, '.', '');
            }
            // Output some stuff for jquery to use
            $response = array(
                'result'        => $result,
                'start'         => $start,
                'limit'         => $limit,
                'totalResults'  => $totalResults,
                'fileName' => $returnURL,
                'percentage' => $percentage
            );
            echo json_encode($response);
        }
    }
    public function depositeloanEmiView($id,$type)
    {
        if($type != 3){
            // if(!in_array('Loan Transactions', auth()->user()->getPermissionNames()->toArray())){
            //       return redirect()->route('branch.dashboard');
            //       }
              $data['title']='Loan EMI Transactions';
              $data['loanDetails'] =  Memberloans::select('loan_type','account_number')->where('id',$id)->first();
              if($data['loanDetails']->loan_type == 1){
                  $data['loanTitle'] = 'Personal Loan';
              }elseif($data['loanDetails']->loan_type == 2){
                  $data['loanTitle'] = 'Staff Loan';
              }elseif($data['loanDetails']->loan_type == 3){
                  $data['loanTitle'] = 'Group Loan' ;
              }elseif($data['loanDetails']->loan_type == 4){
                  $data['loanTitle'] = 'Loan Against Investment Plan';
              }
          }else{
            //   if(!in_array('Group Loan Transactions', auth()->user()->getPermissionNames()->toArray())){  //group loan
            //       return redirect()->route('branch.dashboard');
            //       }
              $data['title']='Group Loan EMI Transactions';
              $data['loanDetails'] =  Grouploans::select('account_number')->where('id',$id)->first();
              $data['loanTitle'] = 'Group Loan';
          }
          $data['id'] = $id;
          $data['type'] = $type;
          return view('templates.admin.loan.deposite_loan_emi_transaction', $data);
    }
    public function depositLoanTransaction(Request $request)
    {
        if ($request->ajax()) {
            if($request['loanType'] != 3){
                $loanRecord = Memberloans::Where('id',$request['loanId'])->first('account_number');
                //$data=LoanDayBooks::where('loan_type',$request['loanType'])->where('loan_id',$request['loanId'])->get();
           }else{
                $loanRecord = Grouploans::Where('id',$request['loanId'])->first('account_number');
           }
           /*$data=LoanDayBooks::/*where('loan_type',$request['loanType'])->*///where('account_number',$loanRecord->account_number);
           $data=LoanDayBooks::where('loan_type',$request['loanType'])->where('loan_id',$request['loanId'])->where('is_deleted',0);
           $data1=$data->get();
            $count=count($data1);
            $data=$data->offset($_POST['start'])->limit($_POST['length'])->orderBy('payment_date','asc')->get();
            $dataCount = LoanDayBooks::where('loan_id','=',$request->loanId);
			$totalCount =$dataCount->count();
            $sno=$_POST['start'];
            $rowReturn = array();
            if($_POST['pages'] == 1)
			{
				$total  = 0;
			}
			else{
				$total  = $_POST['total'];
			}
            if($_POST['pages'] == "1"){
				$length = ($_POST['pages']) * $_POST['length'];
			} else {
				$length = ($_POST['pages']-1) * $_POST['length'];
			}
            foreach($data as $row)
			{
				$sno++;
                $val['DT_RowIndex']=$sno;
                $val['transaction_id']=$row->id;
                $val['date']=date("d/m/Y", strtotime($row->payment_date));
				$paymentMode = '';
				  if($row->payment_mode == 0){
                    $paymentMode = 'Cash';
                }elseif($row->payment_mode == 1){
                    $paymentMode = 'Cheque';
                }elseif($row->payment_mode == 2){
                    $paymentMode = 'DD';
                }elseif($row->payment_mode == 3){
                    $paymentMode = 'Online Transaction';
                }elseif($row->payment_mode == 4){
                    $paymentMode = 'By Saving Account ';
                }
                elseif($row->payment_mode == 6){
                    $paymentMode = 'JV ';
                }
				$val['payment_mode']=$paymentMode;
				$val['description']= $row->description;
				if($row->loan_sub_type == 1){
                    $deposite =  $row->deposit;
                    $val['penalty'] =  $deposite;
                }else{
                     $val['penalty'] =  '0';
                }
				if($row->loan_sub_type == 0){
                     $deposite =  $row->deposit;;
                     $val['deposite'] =  $deposite;
                }else{
                     $val['deposite'] =  '0';
                }
                if($row->jv_journal_amount){
                     $jv_journal_amount =  $row->jv_journal_amount;;
                     $val['jv_amount'] =  number_format((float)$jv_journal_amount, 2, '.', '');
                }else{
                     $val['jv_amount'] =  '0';
                }
				 //$val['deposite'] =  $deposite;
                 if($row->igst_charge > 0 && isset($row->igst_charge))
                 {
                     $val['igst_charge'] = number_format((float)$row->igst_charge, 2, '.', '');
                 }
                 else{
                     $val['igst_charge'] = '0';
                 }
                 if($row->cgst_charge > 0 && isset($row->cgst_charge))
                 {
                     $val['cgst_charge'] = number_format((float)$row->cgst_charge, 2, '.', '');
                 }
                 else{
                     $val['cgst_charge'] = '0';
                 }
                 if($row->sgst_charge > 0 && isset($row->sgst_charge))
                 {
                     $val['sgst_charge'] = number_format((float)$row->sgst_charge, 2, '.', '');
                 }
                 else{
                     $val['sgst_charge'] = '0';
                 }
				$total = $total+$row->deposit + $val['igst_charge'] + $val['sgst_charge'] + $val['cgst_charge'] ;
				$val['balance'] = number_format((float)$total, 2, '.', '');
				$rowReturn[] = $val;
			}
            /*return Datatables::of($data)
            ->addIndexColumn()
            ->addColumn('transaction_id', function($row){
                $transaction_id = $row->id;
                return $transaction_id;
            })
            ->rawColumns(['transaction_id'])
            ->addColumn('date', function($row){
                $date = date("d/m/Y", strtotime($row->payment_date));
                return $date;
            })
            ->rawColumns(['date'])
            ->addColumn('payment_mode', function($row){
                if($row->payment_mode == 0){
                    $payment_mode =  'Cash';
                }elseif($row->payment_mode == 1){
                    $payment_mode =  'Cheque';
                }elseif($row->payment_mode == 2){
                    $paymentMode = 'DD';
                }elseif($row->payment_mode == 3){
                    $payment_mode =  'Online Transaction';
                }elseif($row->payment_mode == 4){
                    $payment_mode =  'By Saving Account';
                }
                return $payment_mode;
            })
            ->rawColumns(['payment_mode'])
            ->addColumn('description', function($row){
                $description =  $row->description;
                return $description;
            })
            ->rawColumns(['description'])
            ->addColumn('penalty', function($row){
                if($row->loan_sub_type == 1){
                    $deposite =  $row->deposit.' <i class="fas fa-rupee-sign"></i>';
                    return $deposite;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('deposite', function($row){
                if($row->loan_sub_type == 0){
                    $deposite =  $row->deposit.' <i class="fas fa-rupee-sign"></i>';
                    return $deposite;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('roi_amount', function($row){
                if($row->loan_sub_type == 0){
                    $roi_amount =  $row->roi_amount.' <i class="fas fa-rupee-sign"></i>';
                    return $roi_amount;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('principal_amount', function($row){
                if($row->loan_sub_type == 0){
                    $principal_amount =  $row->principal_amount.' <i class="fas fa-rupee-sign"></i>';
                    return $principal_amount;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->addColumn('opening_balance', function($row){
                if($row->loan_sub_type == 0){
                    $opening_balance =  $row->opening_balance.' <i class="fas fa-rupee-sign"></i>';
                    return $opening_balance;
                }else{
                    return 'N/A';
                }
            })
            ->escapeColumns(['description'])
            ->make(true);*/
        }
        $output = array( "draw" => $_POST['draw'], "recordsTotal" => $totalCount, "recordsFiltered" => $count, "data" => $rowReturn,'total'=>$total );
          return json_encode($output);
    }
     public function loanTransaction(Request $request)
    {
         if(check_my_permission( Auth::user()->id,"265") != "1"){
		  return redirect()->route('admin.dashboard');
		}
        $data['title']='Loan Transactions Detail';
   /*        $data=Memberloans::with('loan','loanMember','loanMemberAssociate')->with(['loanBranch' => function($query){ $query->select('id', 'name','branch_code','sector','regan','zone');}])->where('loan_type','!=',3);*/
        return view('templates.admin.loan.loan-transactions', $data);
    }
     public function loanTransactionAjax(Request $request)
    {
        if ($request->ajax()) {
            $arrFormData = array();
            if(!empty($_POST['searchform']))
            {
                foreach($_POST['searchform'] as $frm_data)
                {
                    $arrFormData[$frm_data['name']] = $frm_data['value'];
                }
            }
            $data=LoanDayBooks::with(['loan_member' => function($query){ $query->select('id', 'member_id','first_name','last_name','associate_code');}])->with(['loanBranch' => function($query){ $query->select('id', 'name','branch_code','sector','regan','zone');}])->with(['member_loan' => function($query){ $query->select('id', 'emi_option','emi_period');},'group_member_loan'=>function($q){
                $q->select('id','account_number','member_id')->with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }]);
            }])->where('is_deleted',0)
                ->with(['loanMemberAssociate'])
                ->WHERE('status',1);
			if(Auth::user()->branch_id>0){
			 $id=Auth::user()->branch_id;
		     $data=$data->where('branch_id','=',$id);
		    }
            if(isset($arrFormData['is_search']) && $arrFormData['is_search'] == 'yes')
              {
                if($arrFormData['date_from'] !=''){
                    $startDate=date("Y-m-d", strtotime(convertDate($arrFormData['date_from'])));
                    if($arrFormData['date_to'] !=''){
                        $endDate=date("Y-m-d ", strtotime(convertDate($arrFormData['date_to'])));
                    }
                    else
                    {
                        $endDate='';
                    }
                    $data=$data->whereBetween(\DB::raw('DATE(created_at)'), [$startDate, $endDate]);
                }
                if($arrFormData['plan'] !=''){
                    $planId=$arrFormData['plan'];
                    $data=$data->where('loan_type','=',$planId);
                }
                if(isset($arrFormData['branch_id']) && $arrFormData['branch_id'] !=''){
                    $branch_id=$arrFormData['branch_id'];
                    $data=$data->where('branch_id','=',$branch_id);
                }
                if($arrFormData['application_number'] !=''){
                    $application_number=$arrFormData['application_number'];
                    $data=$data->where('account_number','=',$application_number);
                }
                if($arrFormData['associate_code'] !=''){
                    $associateCode=$arrFormData['associate_code'];
                    $data=$data->whereHas('loanMemberAssociate', function ($query) use ($associateCode) {
                      $query->where('members.associate_no','LIKE','%'.$associateCode.'%');
                    });
                }
                if($arrFormData['payment_mode'] !=''){
                    $payment_mode=$arrFormData['payment_mode'];
                    if($payment_mode == 1)
                    {
                        $data=$data->whereIn('payment_mode','=',[1,2]);
                    }
                    else{
                         $data=$data->where('payment_mode','=', $payment_mode);
                    }
                }
            }
            $count = $data->count('id');
			$data_export = $data->orderby('id', 'DESC')->get();
            $totalCount  = $count;
            $data = $data->orderby('id', 'DESC')->offset($_POST['start'])->limit($_POST['length'])->get();
            $sno=$_POST['start'];
            $rowReturn = array();
            foreach($data as $i => $row)
            {
             $sno++;
            $val['DT_RowIndex'] = $sno;
            $val['created_at'] =  date("d/m/Y", strtotime( $row['created_at']));;
            $val['branch'] = $row['loanBranch']->name;
            $val['sector'] =  $row['loanBranch']->sector;
            $val['branch_code'] =$row['loanBranch']->branch_code;
            $val['region'] = $row['loanBranch']->regan;
            $val['zone'] = $row['loanBranch']->zone;
            $url =URL::to("admin/loan/emi-transactions/".$row->loan_id."/".$row->loan_type."");
             $btn = '<a class=" " href="'.$url.'" title="Edit Member" target="_blank">' . $row->account_number.'</a>';
            $val['account_number'] = $btn;
            if($row->loan_type == 3)
            {
              if(isset($row['loan_member']))
              {
                $val['member_name'] =$row['group_member_loan']['loanMember']->first_name.' '.$row['group_member_loan']['loanMember']->last_name;
                $val['member_id'] = $row['group_member_loan']['loanMember']->member_id;
              }
            }else{
                if(isset( $row['loan_member']))
                {
                    $val['member_id'] = $row['loan_member']->member_id;
                    $val['member_name'] = $row['loan_member']->first_name.' '.$row['loan_member']->last_name;
                }
            }
           if(isset($row['loanMemberAssociate']))
           {
                $val['associate_code'] =$row['loanMemberAssociate']->associate_no;
           }
           else{
            $val['associate_code'] ='N/A';
           }
            $plan_name = 'N/A';
            if($row->loan_type == 1){
                    $plan_name = 'Personal Loan';
                }elseif($row->loan_type == 2){
                    $plan_name = 'Staff Loan(SL)';
                }elseif($row->loan_type == 3){
                    $plan_name = 'Group Loan';
                }elseif($row->loan_type == 4){
                    $plan_name = 'Loan against Investment plan(DL) ';
                }
            $val['plan_name'] = $plan_name;
            $emi_tenure ='N/A';
             if(isset($row['member_loan']->emi_option) && $row['member_loan']->emi_option == 1){
            $emi_tenure = $row['member_loan']->emi_period." Months";
            }elseif(isset($row['member_loan']->emi_option) && $row['member_loan']->emi_option == 2){
                $emi_tenure = $row['member_loan']->emi_period." Weeks";
            }elseif(isset($row['member_loan']->emi_option) && $row['member_loan']->emi_option == 3){
                $emi_tenure = $row['member_loan']->emi_period." Days";
            }
            $val['tenure'] =$emi_tenure;
            $val['emi_amount'] = $row->deposit;
            $loan_sub_type = $row->loan_sub_type;
				if($loan_sub_type==0){
					$loan_sub_type	=	'EMI';
				}else{
					$loan_sub_type	=	'Late Penalty';
				}
            $val['loan_sub_type'] = 	$loan_sub_type;
            // $member =Member::where('id',$row->associate_id)->first(['id','first_name','last_name']);
            if(isset($row['loanMemberAssociate']))
            {
                 $val['associate_name'] =$row['loanMemberAssociate']->first_name.' '.$row['loanMemberAssociate']->last_name;
            }
            else{
             $val['associate_name'] ='N/A';
            }
             $payment_mode = '';
				switch($row->payment_mode){
					case 0:
					$payment_mode='Cash';
					break;
					case 1:
					$payment_mode='Cheque';
					break;
					case 2:
					$payment_mode='DD';
					break;
					case 3:
					$payment_mode='Online Transaction';
					break;
					case 4:
					$payment_mode='By Saving Account';
					break;
				default :
					$payment_mode='Cash';
					break;
				}
            $val['payment_mode'] =$payment_mode;
    //           $vurl = URL::to("admin/loan/view/" . $row->id . "/" . $row->loan_type . "");
    //             $eurl = URL::to("admin/loan/edit/" . $row->id . "");
    //             $aurl = URL::to("admin/loan/approve/" . $row->id . "");
    //             $rurl = URL::to("admin/loan/loan-request-reject/" . $row->id . "/" . $row->loan_type . "");
    //             $taurl = URL::to("admin/loan/transfer/" . $row->id . "");
    //             $purl = URL::to("admin/loan/print/" . $row->id . "/" . $row->loan_type . "");
    //             $turl = URL::to("admin/loan/emi-transactions/" . $row->id . "/" . $row->loan_type . "");
    //              $urlCom = URL::to("admin/loan/commission/" . $row->id . "");
				//  $pdf = URL::to("admin/loan/download-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
    //              $print = URL::to("admin/loan/print-recovery-clear/" . $row->id . "/" . $row->loan_type . "");
    //             $btn = '<div class="list-icons"><div class="dropdown"><a href="#" class="list-icons-item" data-toggle="dropdown"><i class="icon-menu9 mr-2"></i></a><div class="dropdown-menu dropdown-menu-right">';
    //             if($row->status == 0){
    //               $btn .= '<a class="dropdown-item" href="' . $aurl . '"><i class="fas fa-thumbs-up mr-2"></i>Approve</a>';
    //               $btn .= '<a class="dropdown-item reject-loan" href="'.$rurl.'" data-toggle="modal" data-target="#loan-rejected" loan-id="'.$row->id.'"><i class="fas fa-thumbs-down mr-2"></i>Delete</a>';
    //               $btn .= '<a class="dropdown-item" href="' . $eurl . '"><i class="icon-pencil7 mr-2"></i>Edit</a>';
    //             }elseif($row->status == 1 && ($row->amount != $row->deposite_amount)){
    //                 $btn .= '<a class="dropdown-item" href="' . $taurl . '"><i class="fa fa-exchange mr-2"></i>Transfer Amount</a>';
    //             }
    //             $btn .= '<a class="dropdown-item" href="' . $vurl . '"><i class="fas fa-eye text-default mr-2"></i>View</a>';
    //             $btn .= '<a class="dropdown-item" href="' . $purl . '" target="_blank"><i class="fa fa-print mr-2" aria-hidden="true"></i>Print</a>';
    //             $btn .= '<a class="dropdown-item" href="' . $turl . '"><i class="fas fa-money-bill-wave-alt mr-2" aria-hidden="true"></i>Transactions</a>';
    //             $btn .= '<a class="dropdown-item" href="' . $urlCom . '"><i class="fas fa-percent text-default mr-2"></i>Loan Commission</a>';
				// if($row->status == 3){
				//   $btn .= '<a class="dropdown-item" href="' . $pdf . '"><i class="fas fa-download text-default mr-2"></i>Download No Dues</a>';
				//   $btn .= '<a class="dropdown-item" href="' . $print . '" target="_blank"><i class="fas fa-print text-default mr-2" ></i>print No Dues</a>';
				// }
    //             $btn .= '</div></div></div>';
    //             $val['action'] = $btn;
            $rowReturn[] = $val;
        }		
        $value = Cache::put('loan_transaction_data', $data_export);
        Cache::put('loan_transaction_data_count', $totalCount);
    }
            $output = array( "draw" => $_POST['draw'], "recordsTotal" => $totalCount, "recordsFiltered" => $count, "data" => $rowReturn);
            return json_encode($output);
    }
    public function gst_amount_penalty(Request $req)
    {
        $loanId = $req->loanId;
        $loanType = $req->loanType;
        $penaltyAmount = $req->penaltyAmount;
        $headId = $req->headId;
        $globaldate = date('Y-m-d',strtotime(convertDate($req->deDate)));
        if($loanType == 'loan')
        {
            $loanDetails = Memberloans::select('id','branch_id')->with('loanBranch')->where('id',$loanId)->first();
        }
        else{
            $loanDetails = Grouploans::select('id','branch_id')->with('loanBranch')->where('id',$loanId)->first();
        }
        // $stateid = getBranchState($loanDetails['loanBranch']->name);
        // $globaldate = checkMonthAvailability(date('d'),date('m'),date('Y'),$stateid);
        $getHeadSetting = \App\Models\HeadSetting::where('head_id',$headId)->first();
        $getGstSetting = \App\Models\GstSetting::where('state_id',$loanDetails['loanBranch']->state_id)->whereDate('applicable_date','<=',$globaldate)->exists();
        if($penaltyAmount >0 && $getGstSetting)
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmount =  (($penaltyAmount*$getHeadSetting->gst_percentage)/100)/2;
                $label1 ='CGST '.($getHeadSetting->gst_percentage/2).' %';
                $label2 ='SGST '.($getHeadSetting->gst_percentage/2).' %';;
            }
            else{
                $gstAmount =  ($penaltyAmount*$getHeadSetting->gst_percentage)/100;
                $label1 ='IGST '.($getHeadSetting->gst_percentage).' %';
                $label2 = '';
            }
        }
        elseif(!empty($penaltyAmount) && $loanDetails->amount )
        {
            if($loanDetails['loanBranch']->state_id == 33)
            {
                $gstAmount =  (($loanDetails->amount*$getHeadSetting->gst_percentage)/100)/2;
                $label1 ='CGST '.($getHeadSetting->gst_percentage/2).' %';
                $label2 ='SGST '.($getHeadSetting->gst_percentage/2).' %';;
            }
            else{
                $gstAmount =  ($loanDetails->amount*$getHeadSetting->gst_percentage)/100;
                $label1 ='IGST '.($getHeadSetting->gst_percentage).' %';
                $label2 = '';
            }
        }
        else{
            $gstAmount = 0;
            $label1 = 0;
            $label2 = 0;
        }
        return response()->json(['gstAmount'=>$gstAmount,'label1'=>$label1,'label2'=>$label2]);
    }
    /*********************  loan Branch Transfer start ******************************/
    public function loanbranchtransfer()
    {
		if(check_my_permission(Auth::user()->id,"284") != "1"){
            return redirect()->route('admin.dashboard');
        }
        $data['title'] = 'Loan | Account Branch Transfer';
        return view('templates.admin.loan.loanbranchtransfer', $data);
    }
	public function getLoanbrtansferData(Request $request)
    {
        $branch =   \App\Models\Branch::where('status',1);
		if (Auth::user()->branch_id > 0)
        {
            $branch=$branch->where('id', Auth::user()->branch_id);
        }
		$branch=$branch->get();
		$groupList='';
        $data = Memberloans::with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanMemberAssociate'=>function($q){
                    $q->select('id','associate_no','first_name','last_name');
                }, 'loanBranch'=>function($q){
                    $q->select('id','branch_code','name');
                }])->where('account_number', $request->code)
            ->first();
			if(empty($data))
			{
				$data = Grouploans::with(['loanMember'=>function($q){
                    $q->select('id','member_id','first_name','last_name');
                }, 'loanMemberAssociate'=>function($q){
                    $q->select('id','associate_no','first_name','last_name');
                }, 'loanBranch'=>function($q){
                    $q->select('id','branch_code','name');
                }])->where('account_number', $request->code)->first();
				if ($data)
                {
                    $groupList=Grouploans::with(['loanMember'=>function($q){
                        $q->select('id','member_id','first_name','last_name');
                    }])->where('group_loan_common_id', $data->group_loan_common_id)->where('id','!=', $data->id)->get();
                    $clearCount=Grouploans::where('group_loan_common_id', $data->group_loan_common_id)->where('status',3)->count();
                }
			}
        $type = $request->type;
        if ($data)
        {
            if($data->loan_type==3)
            {
                if($clearCount>0)
                {
                    return \Response::json(['view' => 'No data found', 'msg_type' => 'error_cleargoup']);
                }
                else
                {
                    $id = $data->id;
		            return \Response::json(['view' => view('templates.admin.loan.partials.loanbranchtransfer_detail', ['loanData' => $data, 'branch'=> $branch,'groupList'=>$groupList])->render() , 'msg_type' => 'success', 'id' => $id]);
                }
            }
            else
            {
                if($data->status==3)
                {
                    return \Response::json(['view' => 'No data found', 'msg_type' => 'error_clear']);
                }
                else
                {
                    $id = $data->id;
		            return \Response::json(['view' => view('templates.admin.loan.partials.loanbranchtransfer_detail', ['loanData' => $data, 'branch'=> $branch,'groupList'=>$groupList])->render() , 'msg_type' => 'success', 'id' => $id]);
                }
            }
		 }
      else
         {
         return \Response::json(['view' => 'No data found', 'msg_type' => 'error']);
        }
    }
	public function loanbranchtransfersave(Request $request)
	{
		if(empty($request->loan_id) || empty($request->branch_id))
		{
	        return back()->with('errors', 'Enter account number');
	    }
			$id =   $request->loan_id;
			$created_by_id = Auth::user()->id;
			$globaldate=$request['created_at'];
		    $created_at=date("Y-m-d H:i:s", strtotime(convertDate($globaldate)));
		/*DB::beginTransaction();
		try
		{*/
			if($request->loan_type==3)
			{
				$loanDetail =   Grouploans::where('id',$id)->first(['id','group_loan_common_id','member_loan_id']);
				$groupList=Grouploans::where('group_loan_common_id', $loanDetail->group_loan_common_id)->where('id','!=', $loanDetail->id)->get();
					foreach( $groupList as $glist)
					{
						//print_r($glist->id);die;
						$LoanBranchTransferGroup  = new  AccountBranchTransfer;
						$LoanBranchTransferGroup->type =3;
						$LoanBranchTransferGroup->new_branch_id = $request['branch_id'];
						$LoanBranchTransferGroup->type_id = $glist->id;
						$LoanBranchTransferGroup->old_branch_id = $glist->branch_id;
						$LoanBranchTransferGroup->created_by =1;
						$LoanBranchTransferGroup->created_by_id =$created_by_id;
						$LoanBranchTransferGroup->created_at =$created_at;
						$LoanBranchTransferGroup->updated_at =$created_at;
						$LoanBranchTransferGroup->save();
						$groupLoan = \App\Models\Grouploans::where('id',$glist->id)->update(['branch_id' =>$request->branch_id]);
					}
				$Membernew = \App\Models\Grouploans::where('id',$loanDetail->id)->update(['branch_id' =>$request->branch_id]);
				$Membernewgroup = \App\Models\Memberloans::where('id',$loanDetail->member_loan_id)->update(['branch_id' =>$request->branch_id]);
					$LoanBranchTransfer1  = new  AccountBranchTransfer;
				   $LoanBranchTransfer1->type =3;
				   $LoanBranchTransfer1->new_branch_id = $request['branch_id'];
				   $LoanBranchTransfer1->type_id = $loanDetail->member_loan_id;
				   $LoanBranchTransfer1->old_branch_id = $request['old_branch_id'];
				   $LoanBranchTransfer1->created_by =1;
				   $LoanBranchTransfer1->created_by_id =$created_by_id;
				   $LoanBranchTransfer1->created_at =$created_at;
				   $LoanBranchTransfer1->updated_at =$created_at;
				   $LoanBranchTransfer1->save();
			}
			else{
				$Membernew = \App\Models\Memberloans::where('id',$id)->update(['branch_id' =>$request->branch_id]);
			}
	       $LoanBranchTransfer  = new  AccountBranchTransfer;
		   $LoanBranchTransfer->type =3;
		   $LoanBranchTransfer->new_branch_id = $request['branch_id'];
		   $LoanBranchTransfer->type_id = $id;
		   $LoanBranchTransfer->old_branch_id = $request['old_branch_id'];
		   $LoanBranchTransfer->created_by =1;
		   $LoanBranchTransfer->created_by_id =$created_by_id;
		   $LoanBranchTransfer->created_at =$created_at;
		   $LoanBranchTransfer->updated_at =$created_at;
		   $LoanBranchTransfer->save();
			return back()->with('success', 'Loan branch updated successfully');
	    /*		DB::commit();
        } catch (\Exception $ex) {
            DB::rollback();
            return back()->with('success', $ex->getMessage());
        }*/
	}
    public function loanbranchtransferlog()
    {
		if(check_my_permission(Auth::user()->id,"285") != "1"){
            return redirect()->route('admin.dashboard');
        }
        $data['title'] = 'Loan | Account Branch Transfer Log Detail';
        return view('templates.admin.log.loanlogbranchtransfer', $data);
    }
    public function getLoanbrtansferLogData(Request $request)
    {
        $accno = $request->code;
        //print_r($accno);die;
		$loanDetail =   Memberloans::where('account_number',$accno)->first('id');
		if(empty($loanDetail))
		{
			$loanDetail =   Grouploans::where('account_number',$accno)->first('id');
		}
        if ($loanDetail)
		{
			$data =  AccountBranchTransfer::where('type',3)->where('type_id',$loanDetail['id'])->orderBy('id','DESC')->get();
			if($data)
			{
				return \Response::json(['view' => view('templates.admin.log.partials.loanlogbranchtransfer_detail', ['loanData' => $data])->render() , 'msg_type' => 'success']);
			}
		}
		else
        {
			return \Response::json(['view' => 'No data found', 'msg_type' => 'error']);
        }
    }
	/*********************  loan Branchghjgh Transfer end ******************************/
    /**
     * check penalty
     */
    
    public function loanRequestRejectHold(Request $request)
    {
        $loanId = $request->demandId;
        $rejectreason = $request->rejectreason;
        $loanType = $request->loanType;
        $loanCategory = $request->loanCategory;
        $status = $request->status;
        $date = date('Y-m-d',strtotime(convertDate($request->create_application_date)));
        $msg = ($status == 5)  ? 'Rejected' : 'Hold';
        $mLoanDetails =($loanCategory == '3' ) ?    
        Grouploans::select('branch_id', 'loan_type','rejection_description','status','id')->with(['loan'=> function($q){
           $q->select('id','name');
        }])->where('id', $loanId)->first() : Memberloans::select('branch_id', 'loan_type','rejection_description','status','id')->with(['loan'=> function($q){
           $q->select('id','name');
        }])->where('id', $loanId)->first() ;
        DB::beginTransaction();
        try {
            $mLoanDetails->update(['status'=>$status,'rejection_description'=>$rejectreason]);
            $data = [
               'loanId' => $loanId,
               'loan_type' => $loanType,
               'loan_category' => $loanCategory,
               'loan_name' => $mLoanDetails['loan']->name,
               'status' => $status,
               'status_changed_date' =>$date ,
               'created_by' => Auth::user()->id,
               'user_name' => Auth::user()->username,
            ];
            \App\Models\LoanLog::create($data); 
            DB::commit();
        }
        catch(\Exception $ex)
        {
            DB::rollback();
            return back()->with('alert', $ex->getMessage());
        }
        return back()
            ->with('success', 'Loan request has been '.$msg.'!');
    }
   /**
    * Summary of loanLogs
    * @param mixed $loanId
    * @param mixed $loanType
    * @return void
    */
   public function loanLogs($loanId,$loanType)
   {
       $data['title'] =   'Loan Logs';
       $data['headTitle'] =   'Loan Log Listing';
       $data['columnName'] = ['S/N','Loan Category','Loan Name','Status','Status Change Date','Created By','UserName','Created_at'];
       $data['record'] =   \App\Models\LoanLog::logs($loanType,$loanId)->orderBy('created_at','desc')->get();
       return view('templates.admin.Logs.index',$data);
   }
   /**
    * Summary of loanRequestPending
    * @param mixed $id
    * @return mixed
    */
   public function loanStatusChange($loanId,$loanType,$status,$date)
   {
       $date = decrypt($date);
       $mLoan =($loanType == '3' ) ?    
        Grouploans::select('branch_id', 'loan_type','rejection_description','status','id','account_number')->with(['loan'=> function($q){
           $q->select('id','name','loan_category');
        }])->where('id', $loanId)->first() : Memberloans::select('branch_id', 'loan_type','rejection_description','status','id','account_number')->with(['loan'=> function($q){
           $q->select('id','name','loan_category');
        }])->where('id', $loanId)->first() ;
       $mLoanData['status'] = $status;
       $mLoanData['rejection_description'] = '';
       $mLoan->update($mLoanData);
       $data = [
           'loanId' => $mLoan->id,
           'loan_type' => $mLoan->loan_type,
           'loan_name' => $mLoan->loan->name,
           'status' => $status,
           'status_changed_date' =>$date ,
           'created_by' => Auth::user()->id,
           'user_name' => Auth::user()->username,
           'loan_category' =>$mLoan->loan->loan_category,
        ];
        \App\Models\LoanLog::create($data); 
        if($status == 1 && !isset($mLoan->account_number) )
        {
           ($loanType == '3') ? $this->groupLoanRequestApproval($mLoan->id) : $this->loanRequestApproval($mLoan->id);
        }
       return back()->with('success', 'Loan Status SuccessFully Changed !');
   }
   public function loanTransactionExportList(Request $request)
    {
        if($request['loan_transaction_export'] == 0){
			
            $data = Cache::get('loan_transaction_data');
            $count = Cache::get('loan_transaction_data_count');
			$input = $request->all();
			$start = $_POST["start"];
			$limit = $_POST["limit"];
			$returnURL = URL::to('/')."/asset/LoanTransactionsList.csv";
			$fileName = env('APP_EXPORTURL') . "asset/LoanTransactionsList.csv";
            global $wpdb;
            $postCols = array(
                'post_title',
                'post_content',
                'post_excerpt',
                'post_name',
            );
			header("Content-type: text/csv");
			$totalResults = $count;
			$record = $data;
			$result = 'next';
			if (($start + $limit) >= $totalResults) {
				$result = 'finished';
			}
			if ($start == 0) {
				$handle = fopen($fileName, 'w');
			} else {
				$handle = fopen($fileName, 'a');
			}
			if ($start == 0) {
				$headerDisplayed = false;
			} else {
				$headerDisplayed = true;
			}
			$sno = $_POST['start'];
			$rowReturn = [];
			
			foreach ($record->slice($start,$limit) as $row)
			{
				
				$sno++;
				$val['S/N']=$sno;
				$val['Created Date']=date("d/m/Y", strtotime($row->created_at));
				$val['BR Name']=$row['loanBranch']->name;
				$val['BR Code']=$row['loanBranch']->branch_code;
				$val['SO Name']=$row['loanBranch']->sector;
				$val['RO Name']=$row['loanBranch']->regan;
				$val['ZO Name']=$row['loanBranch']->zone;
				//	$val['Member Id']=$row['loan_member']->member_id;
				$val['Account No']=$row->account_number;
				   $member =Member::where('id',$row->associate_id)->first(['id','first_name','last_name']);
				   if(!empty($member))
				   {
					   $associate_name = $member->first_name.' '.$member->last_name;
				   }
				   else{
					   $associate_name = 'N/A';
				   }
				//dd($row['payment_mode']);
					$plan_name = '';
					if($row->loan_type == 1){
						$plan_name = 'Personal Loan';
					}elseif($row->loan_type == 2){
						$plan_name = 'Staff Loan(SL)';
					}elseif($row->loan_type == 3){
						$plan_name = 'Group Loan';
					}elseif($row->loan_type == 4){
						$plan_name = 'Loan against Investment plan(DL) ';
					}
					$val['Loan Type'] =  $plan_name;
					 $tenure = '';
					  if(isset($row['member_loan']['emi_option']) && $row['member_loan']['emi_option'] == 1){
						$tenure =  $row['member_loan']['emi_period'].' Months';
					}elseif (isset($row['member_loan']['emi_option']) && $row['member_loan']['emi_option'] == 2) {
						$tenure =  $row['member_loan']['emi_period'].' Weeks';
					}elseif (isset($row['member_loan']['emi_option']) && $row['member_loan']['emi_option'] == 3) {
						$tenure =  $row['member_loan']['emi_period'].' Days';
					}
					$val['Tenure'] =  $tenure;
				switch($row['payment_mode']){
				case '1':
				$payment_mode	=	'Cheque';
				break;
				case '2':
				$payment_mode	=	'DD';
				break;
				case '3':
				$payment_mode	=	'Online Ttransaction';
				break;
				case '4':
				$payment_mode	=	'By saving account';
				break;
				case '5':
				$payment_mode	=	'From loan amount';
				break;
				default:
				$payment_mode	=	'Cash';
				}
				if($row->loan_type == 3)
				{
					if(isset( $row['loan_member']))
					{
					$val['Member Id'] =  $row['group_member_loan']['loanMember']->member_id;
					 $val['Member(Account Holder Name)'] =$row['group_member_loan']['loanMember']->first_name.' '.$row['group_member_loan']['loanMember']->last_name;
					}
					else{
						$val['Member Id'] = '';
						$val['Member(Account Holder Name)']= '';
					}
				}else{
					if(isset( $row['loan_member']))
					{
						$val['Member Id'] = $row['loan_member']->member_id;
						$val['Member(Account Holder Name)']= $row['loan_member']->first_name.' '.$row['loan_member']->last_name;
					}
					else{
						$val['Member Id'] = '';
						$val['Member(Account Holder Name)']= '';
					}
				}
				$val['Emi Amount'] =  $row->deposit;
								$loan_sub_type = $row->loan_sub_type;
					if($loan_sub_type==0){
						$loan_sub_type	=	'EMI';
					}else{
						$loan_sub_type	=	'Late Penalty';
					}
				$val['Transaction Type'] =  $loan_sub_type;
				if(isset($row['loanMemberAssociate']))
				{
					 $val['Associate Code'] =$row['loanMemberAssociate']->associate_no;
				}
				else{
				 $val['Associate Code'] ='N/A';
				}
				if(isset($row['loanMemberAssociate']))
				{
					 $val['Associate Name'] =$row['loanMemberAssociate']->first_name.' '.$row['loanMemberAssociate']->last_name;
				}
				else{
				 $val['Associate Name'] ='N/A';
				}
				$val['Payment Mode'] =  $payment_mode;
					if (!$headerDisplayed) {
						// Use the keys from $data as the titles
						fputcsv($handle, array_keys($val));
						$headerDisplayed = true;
					}
					// Put the data into the stream
					fputcsv($handle, $val);
			}
			 // Close the file
			fclose($handle);
			if($totalResults == 0)
			{
				$percentage=100;
			}
			else{
				$percentage = ($start+$limit)*100/$totalResults;
				$percentage = number_format((float)$percentage, 1, '.', '');
			}
			// Output some stuff for jquery to use
			$response = array(
				'result'        => $result,
				'start'         => $start,
				'limit'         => $limit,
				'totalResults'  => $totalResults,
				'fileName' => $returnURL,
				'percentage' => $percentage
			);
			echo json_encode($response);
		}elseif ($request['loan_transaction_export'] == 1) {
            $data = $data->orderby('id','DESC')->get();
            $pdf = PDF::loadView('templates.admin.loan.export_loan_transactions_list',compact('data'))->setPaper('a4', 'landscape')->setWarnings(false);
            $pdf->save(storage_path().'_filename.pdf');
            return $pdf->download('LoanTransactionsList.pdf');
        }
    }


    public function delete_emi_transaction(Request $request, $loanId, $loanType, $recordId)
    {
       DB::beginTransaction();
       try
       {
           $memberLoanRecord = (( $loanType != 3 ) ? MemberLoans::findorfail($loanId) : GroupLoans::findorfail($loanId));
           $getRecord = LoanDaybooks::findorfail($recordId);
           $checkPenaltyExist = LoanDaybooks::where('loan_sub_type',1)->where('created_at',$getRecord->created_at)->where(['loan_type'=>$getRecord->loan_type,'loan_id'=>$getRecord->loan_id])->first();
           if($checkPenaltyExist)
           {
               $this->records(new AllHeadTransaction(),$checkPenaltyExist->daybook_ref_id);
               $checkPenaltyExist->update(['is_deleted' => 1]);
           }
           /*Delete Record in All Head Transaction */
           $this->records(new AllHeadTransaction(),$getRecord->daybook_ref_id);
           Switch($getRecord->payment_mode)
           {
               case 4:
                   $getSavingAccount =  SavingAccountTranscation::where('daybook_ref_id',$getRecord->daybook_ref_id)->first();
                   $getSavingAccount->update(['is_deleted'=>1]);
                   DB::select('call updateSSbTransactionAmount(?)',[$getSavingAccount->account_no] );
                   $getSavingAccount->savingAc->update(['balance' => $getSavingAccount->savingAc->balance + $getSavingAccount->withdrawal]);
                   break;
               case 1:
               case 3:
                   SamraddhBankDaybook::where('daybook_ref_id',$getRecord->daybook_ref_id)->update(['is_deleted'=>1]);
                   break;
           }
           LoanEmisNew::where('emi_id',$recordId)->update(['is_deleted'=>'1']);
           $getRecord->update(['is_deleted'=>1]);
           $this->cron($memberLoanRecord);
           /*Get Branch DaybookRecord */
           DB::commit();
       }
       catch (\Exception $ex)
       {
           DB::rollback();
           return back()->with('alert', $ex->getMessage());
       }
       return back()->with('success', "Emi Deleted SuccessFully");
    }
}